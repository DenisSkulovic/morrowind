syntax = "proto3";

package ai_service_openai_v1;

// AI Service Definition
service AiServiceOpenAIv1 {
    rpc ProcessRequest(AiRequest) returns (AiResponse);
    rpc StreamProcessRequest(AiRequest) returns (stream AiResponse);
    rpc Interrupt(InterruptRequest) returns (InterruptResponse);
    rpc CheckStatus(CheckStatusRequest) returns (CheckStatusResponse);
}

// Request to the AI Service
message AiRequest {
    string requestId = 1;
    string prompt = 2;                 // The main prompt or input to be sent to the AI
    AiRequestMetadata metadata = 3;                // General context or metadata for the request
    AiRequestOptions options = 4;   // Options for AI behavior (e.g., temperature, max tokens)
}

message AiRequestMetadata {
    int64 timestamp = 1; // Unix timestamp when the request was created
    string useCase = 2;
    string context = 3;
}
message AiRequestOptions {
    string model = 1;
    string temperature = 2;
    string maxTokens = 3;
    int32 timeout = 4;  // Maximum processing time in seconds (optional)
}

// Response from the AI Service
message AiResponse {
    string requestId = 1;              // Matches the requestId from the AiRequest
    bool success = 2;                  // Whether the processing was successful
    string status = 3;                  // Task status: queued, processing, completed, failed
    string output = 4;                 // Raw output from the AI
    string errorMessage = 5;           // Error message in case of failure
    AiResponseMetadata metadata = 6;  // Additional metadata for debugging or analysis
    bool isLast = 7;                    // Indicates if this is the final chunk
    int32 chunkId = 8;                 // Optional: Identifier for the chunk in a streamed response
}

message AiResponseMetadata {
    int64 timestamp = 1; // Unix timestamp when the request was created
    string useCase = 2;
    string context = 3;
}


// Interrupt Request
message InterruptRequest {
    string requestId = 1;              // The ID of the request to interrupt
}

// Interrupt Response
message InterruptResponse {
    string requestId = 1;              // The ID of the interrupted request
    bool success = 2;                  // Whether the interruption was successful
    string status = 3;                 // Status after interruption: queued, interrupted, completed
    string message = 4;                // Additional information about the interruption
}

message CheckStatusRequest {
    string requestId = 1;              // The ID of the request whose status is being checked
}

message CheckStatusResponse {
    string requestId = 1;              // Matches the requestId from the CheckStatusRequest
    string status = 2;                 // Task status: queued, processing, completed, failed
    string output = 3;                 // Final result if the task is completed
    string errorMessage = 4;           // Error message if the task failed
    AiResponseMetadata metadata = 5;  // Additional metadata for debugging or analysis
    bool isLast = 6;                   // Indicates if this is the final chunk (for streamed results)
}
