// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: src/proto/world.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "world";

export interface CreateWorldRequest {
  name: string;
  description?: string | undefined;
  userId: string;
}

export interface CreateWorldResponse {
  worldId: string;
}

export interface GetWorldRequest {
  worldId: string;
}

export interface GetWorldResponse {
  world: World | undefined;
}

export interface World {
  id: string;
  name: string;
  description?: string | undefined;
}

function createBaseCreateWorldRequest(): CreateWorldRequest {
  return { name: "", description: undefined, userId: "" };
}

export const CreateWorldRequest: MessageFns<CreateWorldRequest> = {
  encode(message: CreateWorldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorldRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CreateWorldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWorldRequest>, I>>(base?: I): CreateWorldRequest {
    return CreateWorldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWorldRequest>, I>>(object: I): CreateWorldRequest {
    const message = createBaseCreateWorldRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCreateWorldResponse(): CreateWorldResponse {
  return { worldId: "" };
}

export const CreateWorldResponse: MessageFns<CreateWorldResponse> = {
  encode(message: CreateWorldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorldResponse {
    return { worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "" };
  },

  toJSON(message: CreateWorldResponse): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWorldResponse>, I>>(base?: I): CreateWorldResponse {
    return CreateWorldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWorldResponse>, I>>(object: I): CreateWorldResponse {
    const message = createBaseCreateWorldResponse();
    message.worldId = object.worldId ?? "";
    return message;
  },
};

function createBaseGetWorldRequest(): GetWorldRequest {
  return { worldId: "" };
}

export const GetWorldRequest: MessageFns<GetWorldRequest> = {
  encode(message: GetWorldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorldRequest {
    return { worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "" };
  },

  toJSON(message: GetWorldRequest): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorldRequest>, I>>(base?: I): GetWorldRequest {
    return GetWorldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorldRequest>, I>>(object: I): GetWorldRequest {
    const message = createBaseGetWorldRequest();
    message.worldId = object.worldId ?? "";
    return message;
  },
};

function createBaseGetWorldResponse(): GetWorldResponse {
  return { world: undefined };
}

export const GetWorldResponse: MessageFns<GetWorldResponse> = {
  encode(message: GetWorldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.world !== undefined) {
      World.encode(message.world, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.world = World.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorldResponse {
    return { world: isSet(object.world) ? World.fromJSON(object.world) : undefined };
  },

  toJSON(message: GetWorldResponse): unknown {
    const obj: any = {};
    if (message.world !== undefined) {
      obj.world = World.toJSON(message.world);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorldResponse>, I>>(base?: I): GetWorldResponse {
    return GetWorldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorldResponse>, I>>(object: I): GetWorldResponse {
    const message = createBaseGetWorldResponse();
    message.world = (object.world !== undefined && object.world !== null) ? World.fromPartial(object.world) : undefined;
    return message;
  },
};

function createBaseWorld(): World {
  return { id: "", name: "", description: undefined };
}

export const World: MessageFns<World> = {
  encode(message: World, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): World {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorld();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): World {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: World): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<World>, I>>(base?: I): World {
    return World.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<World>, I>>(object: I): World {
    const message = createBaseWorld();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? undefined;
    return message;
  },
};

export interface WorldController {
  createWorld(request: CreateWorldRequest): Promise<CreateWorldResponse>;
  getWorld(request: GetWorldRequest): Promise<GetWorldResponse>;
}

export const WorldControllerServiceName = "world.WorldController";
export class WorldControllerClientImpl implements WorldController {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WorldControllerServiceName;
    this.rpc = rpc;
    this.createWorld = this.createWorld.bind(this);
    this.getWorld = this.getWorld.bind(this);
  }
  createWorld(request: CreateWorldRequest): Promise<CreateWorldResponse> {
    const data = CreateWorldRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "createWorld", data);
    return promise.then((data) => CreateWorldResponse.decode(new BinaryReader(data)));
  }

  getWorld(request: GetWorldRequest): Promise<GetWorldResponse> {
    const data = GetWorldRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "getWorld", data);
    return promise.then((data) => GetWorldResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
