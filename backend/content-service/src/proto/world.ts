// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: src/proto/world.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PresetEnum, presetEnumFromJSON, presetEnumToJSON, WorldDTO } from "./common";

export const protobufPackage = "world";

export interface CreateWorldRequest {
  name: string;
  description?: string | undefined;
  userId: string;
}

export interface CreateWorldResponse {
  worldId: string;
}

export interface GetWorldRequest {
  worldId: string;
}

export interface GetWorldResponse {
  world: WorldDTO | undefined;
}

export interface GetWorldsForUserRequest {
  userId: string;
}

export interface GetWorldsForUserResponse {
  worlds: WorldDTO[];
}

export interface DeleteWorldRequest {
  worldId: string;
}

/** No fields required for a 200 status response */
export interface DeleteWorldResponse {
}

export interface DropWorldContentRequest {
  worldId: string;
}

/** No fields required for a 200 status response */
export interface DropWorldContentResponse {
}

export interface LoadWorldPresetRequest {
  worldId: string;
  userId: string;
  preset: PresetEnum;
}

/** No fields required for a 200 status response */
export interface LoadWorldPresetResponse {
}

function createBaseCreateWorldRequest(): CreateWorldRequest {
  return { name: "", description: undefined, userId: "" };
}

export const CreateWorldRequest: MessageFns<CreateWorldRequest> = {
  encode(message: CreateWorldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorldRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CreateWorldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWorldRequest>, I>>(base?: I): CreateWorldRequest {
    return CreateWorldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWorldRequest>, I>>(object: I): CreateWorldRequest {
    const message = createBaseCreateWorldRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCreateWorldResponse(): CreateWorldResponse {
  return { worldId: "" };
}

export const CreateWorldResponse: MessageFns<CreateWorldResponse> = {
  encode(message: CreateWorldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorldResponse {
    return { worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "" };
  },

  toJSON(message: CreateWorldResponse): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWorldResponse>, I>>(base?: I): CreateWorldResponse {
    return CreateWorldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWorldResponse>, I>>(object: I): CreateWorldResponse {
    const message = createBaseCreateWorldResponse();
    message.worldId = object.worldId ?? "";
    return message;
  },
};

function createBaseGetWorldRequest(): GetWorldRequest {
  return { worldId: "" };
}

export const GetWorldRequest: MessageFns<GetWorldRequest> = {
  encode(message: GetWorldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorldRequest {
    return { worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "" };
  },

  toJSON(message: GetWorldRequest): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorldRequest>, I>>(base?: I): GetWorldRequest {
    return GetWorldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorldRequest>, I>>(object: I): GetWorldRequest {
    const message = createBaseGetWorldRequest();
    message.worldId = object.worldId ?? "";
    return message;
  },
};

function createBaseGetWorldResponse(): GetWorldResponse {
  return { world: undefined };
}

export const GetWorldResponse: MessageFns<GetWorldResponse> = {
  encode(message: GetWorldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.world !== undefined) {
      WorldDTO.encode(message.world, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.world = WorldDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorldResponse {
    return { world: isSet(object.world) ? WorldDTO.fromJSON(object.world) : undefined };
  },

  toJSON(message: GetWorldResponse): unknown {
    const obj: any = {};
    if (message.world !== undefined) {
      obj.world = WorldDTO.toJSON(message.world);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorldResponse>, I>>(base?: I): GetWorldResponse {
    return GetWorldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorldResponse>, I>>(object: I): GetWorldResponse {
    const message = createBaseGetWorldResponse();
    message.world = (object.world !== undefined && object.world !== null)
      ? WorldDTO.fromPartial(object.world)
      : undefined;
    return message;
  },
};

function createBaseGetWorldsForUserRequest(): GetWorldsForUserRequest {
  return { userId: "" };
}

export const GetWorldsForUserRequest: MessageFns<GetWorldsForUserRequest> = {
  encode(message: GetWorldsForUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorldsForUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorldsForUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorldsForUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetWorldsForUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorldsForUserRequest>, I>>(base?: I): GetWorldsForUserRequest {
    return GetWorldsForUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorldsForUserRequest>, I>>(object: I): GetWorldsForUserRequest {
    const message = createBaseGetWorldsForUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetWorldsForUserResponse(): GetWorldsForUserResponse {
  return { worlds: [] };
}

export const GetWorldsForUserResponse: MessageFns<GetWorldsForUserResponse> = {
  encode(message: GetWorldsForUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.worlds) {
      WorldDTO.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorldsForUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorldsForUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worlds.push(WorldDTO.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorldsForUserResponse {
    return {
      worlds: globalThis.Array.isArray(object?.worlds) ? object.worlds.map((e: any) => WorldDTO.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetWorldsForUserResponse): unknown {
    const obj: any = {};
    if (message.worlds?.length) {
      obj.worlds = message.worlds.map((e) => WorldDTO.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorldsForUserResponse>, I>>(base?: I): GetWorldsForUserResponse {
    return GetWorldsForUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorldsForUserResponse>, I>>(object: I): GetWorldsForUserResponse {
    const message = createBaseGetWorldsForUserResponse();
    message.worlds = object.worlds?.map((e) => WorldDTO.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteWorldRequest(): DeleteWorldRequest {
  return { worldId: "" };
}

export const DeleteWorldRequest: MessageFns<DeleteWorldRequest> = {
  encode(message: DeleteWorldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWorldRequest {
    return { worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "" };
  },

  toJSON(message: DeleteWorldRequest): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteWorldRequest>, I>>(base?: I): DeleteWorldRequest {
    return DeleteWorldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteWorldRequest>, I>>(object: I): DeleteWorldRequest {
    const message = createBaseDeleteWorldRequest();
    message.worldId = object.worldId ?? "";
    return message;
  },
};

function createBaseDeleteWorldResponse(): DeleteWorldResponse {
  return {};
}

export const DeleteWorldResponse: MessageFns<DeleteWorldResponse> = {
  encode(_: DeleteWorldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteWorldResponse {
    return {};
  },

  toJSON(_: DeleteWorldResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteWorldResponse>, I>>(base?: I): DeleteWorldResponse {
    return DeleteWorldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteWorldResponse>, I>>(_: I): DeleteWorldResponse {
    const message = createBaseDeleteWorldResponse();
    return message;
  },
};

function createBaseDropWorldContentRequest(): DropWorldContentRequest {
  return { worldId: "" };
}

export const DropWorldContentRequest: MessageFns<DropWorldContentRequest> = {
  encode(message: DropWorldContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DropWorldContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDropWorldContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DropWorldContentRequest {
    return { worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "" };
  },

  toJSON(message: DropWorldContentRequest): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DropWorldContentRequest>, I>>(base?: I): DropWorldContentRequest {
    return DropWorldContentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DropWorldContentRequest>, I>>(object: I): DropWorldContentRequest {
    const message = createBaseDropWorldContentRequest();
    message.worldId = object.worldId ?? "";
    return message;
  },
};

function createBaseDropWorldContentResponse(): DropWorldContentResponse {
  return {};
}

export const DropWorldContentResponse: MessageFns<DropWorldContentResponse> = {
  encode(_: DropWorldContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DropWorldContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDropWorldContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DropWorldContentResponse {
    return {};
  },

  toJSON(_: DropWorldContentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DropWorldContentResponse>, I>>(base?: I): DropWorldContentResponse {
    return DropWorldContentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DropWorldContentResponse>, I>>(_: I): DropWorldContentResponse {
    const message = createBaseDropWorldContentResponse();
    return message;
  },
};

function createBaseLoadWorldPresetRequest(): LoadWorldPresetRequest {
  return { worldId: "", userId: "", preset: 0 };
}

export const LoadWorldPresetRequest: MessageFns<LoadWorldPresetRequest> = {
  encode(message: LoadWorldPresetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worldId !== "") {
      writer.uint32(10).string(message.worldId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.preset !== 0) {
      writer.uint32(24).int32(message.preset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadWorldPresetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadWorldPresetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worldId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.preset = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadWorldPresetRequest {
    return {
      worldId: isSet(object.worldId) ? globalThis.String(object.worldId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      preset: isSet(object.preset) ? presetEnumFromJSON(object.preset) : 0,
    };
  },

  toJSON(message: LoadWorldPresetRequest): unknown {
    const obj: any = {};
    if (message.worldId !== "") {
      obj.worldId = message.worldId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.preset !== 0) {
      obj.preset = presetEnumToJSON(message.preset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoadWorldPresetRequest>, I>>(base?: I): LoadWorldPresetRequest {
    return LoadWorldPresetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoadWorldPresetRequest>, I>>(object: I): LoadWorldPresetRequest {
    const message = createBaseLoadWorldPresetRequest();
    message.worldId = object.worldId ?? "";
    message.userId = object.userId ?? "";
    message.preset = object.preset ?? 0;
    return message;
  },
};

function createBaseLoadWorldPresetResponse(): LoadWorldPresetResponse {
  return {};
}

export const LoadWorldPresetResponse: MessageFns<LoadWorldPresetResponse> = {
  encode(_: LoadWorldPresetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadWorldPresetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadWorldPresetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LoadWorldPresetResponse {
    return {};
  },

  toJSON(_: LoadWorldPresetResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LoadWorldPresetResponse>, I>>(base?: I): LoadWorldPresetResponse {
    return LoadWorldPresetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoadWorldPresetResponse>, I>>(_: I): LoadWorldPresetResponse {
    const message = createBaseLoadWorldPresetResponse();
    return message;
  },
};

export interface WorldController {
  createWorld(request: CreateWorldRequest): Promise<CreateWorldResponse>;
  getWorld(request: GetWorldRequest): Promise<GetWorldResponse>;
  getWorldsForUser(request: GetWorldsForUserRequest): Promise<GetWorldsForUserResponse>;
  deleteWorld(request: DeleteWorldRequest): Promise<DeleteWorldResponse>;
  dropWorldContent(request: DropWorldContentRequest): Promise<DropWorldContentResponse>;
  loadWorldPreset(request: LoadWorldPresetRequest): Promise<LoadWorldPresetResponse>;
}

export const WorldControllerServiceName = "world.WorldController";
export class WorldControllerClientImpl implements WorldController {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WorldControllerServiceName;
    this.rpc = rpc;
    this.createWorld = this.createWorld.bind(this);
    this.getWorld = this.getWorld.bind(this);
    this.getWorldsForUser = this.getWorldsForUser.bind(this);
    this.deleteWorld = this.deleteWorld.bind(this);
    this.dropWorldContent = this.dropWorldContent.bind(this);
    this.loadWorldPreset = this.loadWorldPreset.bind(this);
  }
  createWorld(request: CreateWorldRequest): Promise<CreateWorldResponse> {
    const data = CreateWorldRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "createWorld", data);
    return promise.then((data) => CreateWorldResponse.decode(new BinaryReader(data)));
  }

  getWorld(request: GetWorldRequest): Promise<GetWorldResponse> {
    const data = GetWorldRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "getWorld", data);
    return promise.then((data) => GetWorldResponse.decode(new BinaryReader(data)));
  }

  getWorldsForUser(request: GetWorldsForUserRequest): Promise<GetWorldsForUserResponse> {
    const data = GetWorldsForUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "getWorldsForUser", data);
    return promise.then((data) => GetWorldsForUserResponse.decode(new BinaryReader(data)));
  }

  deleteWorld(request: DeleteWorldRequest): Promise<DeleteWorldResponse> {
    const data = DeleteWorldRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "deleteWorld", data);
    return promise.then((data) => DeleteWorldResponse.decode(new BinaryReader(data)));
  }

  dropWorldContent(request: DropWorldContentRequest): Promise<DropWorldContentResponse> {
    const data = DropWorldContentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "dropWorldContent", data);
    return promise.then((data) => DropWorldContentResponse.decode(new BinaryReader(data)));
  }

  loadWorldPreset(request: LoadWorldPresetRequest): Promise<LoadWorldPresetResponse> {
    const data = LoadWorldPresetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "loadWorldPreset", data);
    return promise.then((data) => LoadWorldPresetResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
