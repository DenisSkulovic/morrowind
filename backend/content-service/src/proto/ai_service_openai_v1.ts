// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.2
//   protoc               v3.20.3
// source: ai_service_openai_v1.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import {
  AiRequest,
  AiResponse,
  CheckStatusRequest,
  CheckStatusResponse,
  InterruptRequest,
  InterruptResponse,
} from "./ai_service_common";

export const protobufPackage = "ai_service_openai_v1";

/** AI Service Definition */
export interface AiServiceOpenAIv1 {
  ProcessPrompt(request: AiRequest): Promise<AiResponse>;
  StreamProcessPrompt(request: AiRequest): Observable<AiResponse>;
  Interrupt(request: InterruptRequest): Promise<InterruptResponse>;
  CheckStatus(request: CheckStatusRequest): Promise<CheckStatusResponse>;
}

export const AiServiceOpenAIv1ServiceName = "ai_service_openai_v1.AiServiceOpenAIv1";
export class AiServiceOpenAIv1ClientImpl implements AiServiceOpenAIv1 {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AiServiceOpenAIv1ServiceName;
    this.rpc = rpc;
    this.ProcessPrompt = this.ProcessPrompt.bind(this);
    this.StreamProcessPrompt = this.StreamProcessPrompt.bind(this);
    this.Interrupt = this.Interrupt.bind(this);
    this.CheckStatus = this.CheckStatus.bind(this);
  }
  ProcessPrompt(request: AiRequest): Promise<AiResponse> {
    const data = AiRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProcessPrompt", data);
    return promise.then((data) => AiResponse.decode(new BinaryReader(data)));
  }

  StreamProcessPrompt(request: AiRequest): Observable<AiResponse> {
    const data = AiRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamProcessPrompt", data);
    return result.pipe(map((data) => AiResponse.decode(new BinaryReader(data))));
  }

  Interrupt(request: InterruptRequest): Promise<InterruptResponse> {
    const data = InterruptRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Interrupt", data);
    return promise.then((data) => InterruptResponse.decode(new BinaryReader(data)));
  }

  CheckStatus(request: CheckStatusRequest): Promise<CheckStatusResponse> {
    const data = CheckStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CheckStatus", data);
    return promise.then((data) => CheckStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
