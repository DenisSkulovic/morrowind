// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.2
//   protoc               v3.20.3
// source: activity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ContextDTO, SearchQueryDTO } from "./common";

export const protobufPackage = "activity";

export enum ActivityEventNameEnumDTO {
  CONTENT_CREATED = 0,
  CONTENT_UPDATED = 1,
  CONTENT_DELETED = 2,
  CONTENT_CREATED_BULK = 3,
  CONTENT_UPDATED_BULK = 4,
  CONTENT_DELETED_BULK = 5,
  WORLD_PRESET_LOADED = 6,
  UNRECOGNIZED = -1,
}

export function activityEventNameEnumDTOFromJSON(object: any): ActivityEventNameEnumDTO {
  switch (object) {
    case 0:
    case "CONTENT_CREATED":
      return ActivityEventNameEnumDTO.CONTENT_CREATED;
    case 1:
    case "CONTENT_UPDATED":
      return ActivityEventNameEnumDTO.CONTENT_UPDATED;
    case 2:
    case "CONTENT_DELETED":
      return ActivityEventNameEnumDTO.CONTENT_DELETED;
    case 3:
    case "CONTENT_CREATED_BULK":
      return ActivityEventNameEnumDTO.CONTENT_CREATED_BULK;
    case 4:
    case "CONTENT_UPDATED_BULK":
      return ActivityEventNameEnumDTO.CONTENT_UPDATED_BULK;
    case 5:
    case "CONTENT_DELETED_BULK":
      return ActivityEventNameEnumDTO.CONTENT_DELETED_BULK;
    case 6:
    case "WORLD_PRESET_LOADED":
      return ActivityEventNameEnumDTO.WORLD_PRESET_LOADED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActivityEventNameEnumDTO.UNRECOGNIZED;
  }
}

export function activityEventNameEnumDTOToJSON(object: ActivityEventNameEnumDTO): string {
  switch (object) {
    case ActivityEventNameEnumDTO.CONTENT_CREATED:
      return "CONTENT_CREATED";
    case ActivityEventNameEnumDTO.CONTENT_UPDATED:
      return "CONTENT_UPDATED";
    case ActivityEventNameEnumDTO.CONTENT_DELETED:
      return "CONTENT_DELETED";
    case ActivityEventNameEnumDTO.CONTENT_CREATED_BULK:
      return "CONTENT_CREATED_BULK";
    case ActivityEventNameEnumDTO.CONTENT_UPDATED_BULK:
      return "CONTENT_UPDATED_BULK";
    case ActivityEventNameEnumDTO.CONTENT_DELETED_BULK:
      return "CONTENT_DELETED_BULK";
    case ActivityEventNameEnumDTO.WORLD_PRESET_LOADED:
      return "WORLD_PRESET_LOADED";
    case ActivityEventNameEnumDTO.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActivitySearchRequest {
  context: ContextDTO | undefined;
  search: SearchQueryDTO | undefined;
}

export interface ActivitySearchResponse {
  activities: ActivityDTO[];
  totalResults: number;
  totalPages: number;
  currentPage: number;
}

export interface ActivityClearAllRequest {
  context: ContextDTO | undefined;
}

export interface ActivityClearAllResponse {
  success: boolean;
}

export interface ActivityCreateRequest {
  context: ContextDTO | undefined;
  data: ActivityDTO | undefined;
}

export interface ActivityCreateResponse {
  success: boolean;
}

export interface ActivityHeadRequest {
  context: ContextDTO | undefined;
  limit: number;
}

export interface ActivityHeadResponse {
  activities: ActivityDTO[];
}

export interface ActivityDTO {
  id: string;
  label: string;
  eventName: ActivityEventNameEnumDTO;
  relatedTargetEntity: string;
  relatedTargetId: string;
  relatedEntityName: string;
  createdAt: number;
  user: string;
  world: string;
  campaign: string;
}

function createBaseActivitySearchRequest(): ActivitySearchRequest {
  return { context: undefined, search: undefined };
}

export const ActivitySearchRequest: MessageFns<ActivitySearchRequest> = {
  encode(message: ActivitySearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      ContextDTO.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.search !== undefined) {
      SearchQueryDTO.encode(message.search, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivitySearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivitySearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.context = ContextDTO.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.search = SearchQueryDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivitySearchRequest {
    return {
      context: isSet(object.context) ? ContextDTO.fromJSON(object.context) : undefined,
      search: isSet(object.search) ? SearchQueryDTO.fromJSON(object.search) : undefined,
    };
  },

  toJSON(message: ActivitySearchRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = ContextDTO.toJSON(message.context);
    }
    if (message.search !== undefined) {
      obj.search = SearchQueryDTO.toJSON(message.search);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivitySearchRequest>, I>>(base?: I): ActivitySearchRequest {
    return ActivitySearchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivitySearchRequest>, I>>(object: I): ActivitySearchRequest {
    const message = createBaseActivitySearchRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? ContextDTO.fromPartial(object.context)
      : undefined;
    message.search = (object.search !== undefined && object.search !== null)
      ? SearchQueryDTO.fromPartial(object.search)
      : undefined;
    return message;
  },
};

function createBaseActivitySearchResponse(): ActivitySearchResponse {
  return { activities: [], totalResults: 0, totalPages: 0, currentPage: 0 };
}

export const ActivitySearchResponse: MessageFns<ActivitySearchResponse> = {
  encode(message: ActivitySearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.activities) {
      ActivityDTO.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalResults !== 0) {
      writer.uint32(16).int32(message.totalResults);
    }
    if (message.totalPages !== 0) {
      writer.uint32(24).int32(message.totalPages);
    }
    if (message.currentPage !== 0) {
      writer.uint32(32).int32(message.currentPage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivitySearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivitySearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activities.push(ActivityDTO.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalResults = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentPage = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivitySearchResponse {
    return {
      activities: globalThis.Array.isArray(object?.activities)
        ? object.activities.map((e: any) => ActivityDTO.fromJSON(e))
        : [],
      totalResults: isSet(object.totalResults) ? globalThis.Number(object.totalResults) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
      currentPage: isSet(object.currentPage) ? globalThis.Number(object.currentPage) : 0,
    };
  },

  toJSON(message: ActivitySearchResponse): unknown {
    const obj: any = {};
    if (message.activities?.length) {
      obj.activities = message.activities.map((e) => ActivityDTO.toJSON(e));
    }
    if (message.totalResults !== 0) {
      obj.totalResults = Math.round(message.totalResults);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    if (message.currentPage !== 0) {
      obj.currentPage = Math.round(message.currentPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivitySearchResponse>, I>>(base?: I): ActivitySearchResponse {
    return ActivitySearchResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivitySearchResponse>, I>>(object: I): ActivitySearchResponse {
    const message = createBaseActivitySearchResponse();
    message.activities = object.activities?.map((e) => ActivityDTO.fromPartial(e)) || [];
    message.totalResults = object.totalResults ?? 0;
    message.totalPages = object.totalPages ?? 0;
    message.currentPage = object.currentPage ?? 0;
    return message;
  },
};

function createBaseActivityClearAllRequest(): ActivityClearAllRequest {
  return { context: undefined };
}

export const ActivityClearAllRequest: MessageFns<ActivityClearAllRequest> = {
  encode(message: ActivityClearAllRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      ContextDTO.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityClearAllRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityClearAllRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.context = ContextDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityClearAllRequest {
    return { context: isSet(object.context) ? ContextDTO.fromJSON(object.context) : undefined };
  },

  toJSON(message: ActivityClearAllRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = ContextDTO.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityClearAllRequest>, I>>(base?: I): ActivityClearAllRequest {
    return ActivityClearAllRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityClearAllRequest>, I>>(object: I): ActivityClearAllRequest {
    const message = createBaseActivityClearAllRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? ContextDTO.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseActivityClearAllResponse(): ActivityClearAllResponse {
  return { success: false };
}

export const ActivityClearAllResponse: MessageFns<ActivityClearAllResponse> = {
  encode(message: ActivityClearAllResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityClearAllResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityClearAllResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityClearAllResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: ActivityClearAllResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityClearAllResponse>, I>>(base?: I): ActivityClearAllResponse {
    return ActivityClearAllResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityClearAllResponse>, I>>(object: I): ActivityClearAllResponse {
    const message = createBaseActivityClearAllResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseActivityCreateRequest(): ActivityCreateRequest {
  return { context: undefined, data: undefined };
}

export const ActivityCreateRequest: MessageFns<ActivityCreateRequest> = {
  encode(message: ActivityCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      ContextDTO.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.data !== undefined) {
      ActivityDTO.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.context = ContextDTO.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ActivityDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityCreateRequest {
    return {
      context: isSet(object.context) ? ContextDTO.fromJSON(object.context) : undefined,
      data: isSet(object.data) ? ActivityDTO.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: ActivityCreateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = ContextDTO.toJSON(message.context);
    }
    if (message.data !== undefined) {
      obj.data = ActivityDTO.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityCreateRequest>, I>>(base?: I): ActivityCreateRequest {
    return ActivityCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityCreateRequest>, I>>(object: I): ActivityCreateRequest {
    const message = createBaseActivityCreateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? ContextDTO.fromPartial(object.context)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? ActivityDTO.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseActivityCreateResponse(): ActivityCreateResponse {
  return { success: false };
}

export const ActivityCreateResponse: MessageFns<ActivityCreateResponse> = {
  encode(message: ActivityCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityCreateResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: ActivityCreateResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityCreateResponse>, I>>(base?: I): ActivityCreateResponse {
    return ActivityCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityCreateResponse>, I>>(object: I): ActivityCreateResponse {
    const message = createBaseActivityCreateResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseActivityHeadRequest(): ActivityHeadRequest {
  return { context: undefined, limit: 0 };
}

export const ActivityHeadRequest: MessageFns<ActivityHeadRequest> = {
  encode(message: ActivityHeadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      ContextDTO.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityHeadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityHeadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.context = ContextDTO.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityHeadRequest {
    return {
      context: isSet(object.context) ? ContextDTO.fromJSON(object.context) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ActivityHeadRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = ContextDTO.toJSON(message.context);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityHeadRequest>, I>>(base?: I): ActivityHeadRequest {
    return ActivityHeadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityHeadRequest>, I>>(object: I): ActivityHeadRequest {
    const message = createBaseActivityHeadRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? ContextDTO.fromPartial(object.context)
      : undefined;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseActivityHeadResponse(): ActivityHeadResponse {
  return { activities: [] };
}

export const ActivityHeadResponse: MessageFns<ActivityHeadResponse> = {
  encode(message: ActivityHeadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.activities) {
      ActivityDTO.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityHeadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityHeadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activities.push(ActivityDTO.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityHeadResponse {
    return {
      activities: globalThis.Array.isArray(object?.activities)
        ? object.activities.map((e: any) => ActivityDTO.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ActivityHeadResponse): unknown {
    const obj: any = {};
    if (message.activities?.length) {
      obj.activities = message.activities.map((e) => ActivityDTO.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityHeadResponse>, I>>(base?: I): ActivityHeadResponse {
    return ActivityHeadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityHeadResponse>, I>>(object: I): ActivityHeadResponse {
    const message = createBaseActivityHeadResponse();
    message.activities = object.activities?.map((e) => ActivityDTO.fromPartial(e)) || [];
    return message;
  },
};

function createBaseActivityDTO(): ActivityDTO {
  return {
    id: "",
    label: "",
    eventName: 0,
    relatedTargetEntity: "",
    relatedTargetId: "",
    relatedEntityName: "",
    createdAt: 0,
    user: "",
    world: "",
    campaign: "",
  };
}

export const ActivityDTO: MessageFns<ActivityDTO> = {
  encode(message: ActivityDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.eventName !== 0) {
      writer.uint32(24).int32(message.eventName);
    }
    if (message.relatedTargetEntity !== "") {
      writer.uint32(34).string(message.relatedTargetEntity);
    }
    if (message.relatedTargetId !== "") {
      writer.uint32(42).string(message.relatedTargetId);
    }
    if (message.relatedEntityName !== "") {
      writer.uint32(50).string(message.relatedEntityName);
    }
    if (message.createdAt !== 0) {
      writer.uint32(56).int64(message.createdAt);
    }
    if (message.user !== "") {
      writer.uint32(66).string(message.user);
    }
    if (message.world !== "") {
      writer.uint32(74).string(message.world);
    }
    if (message.campaign !== "") {
      writer.uint32(82).string(message.campaign);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.eventName = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.relatedTargetEntity = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.relatedTargetId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.relatedEntityName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.world = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.campaign = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityDTO {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      eventName: isSet(object.eventName) ? activityEventNameEnumDTOFromJSON(object.eventName) : 0,
      relatedTargetEntity: isSet(object.relatedTargetEntity) ? globalThis.String(object.relatedTargetEntity) : "",
      relatedTargetId: isSet(object.relatedTargetId) ? globalThis.String(object.relatedTargetId) : "",
      relatedEntityName: isSet(object.relatedEntityName) ? globalThis.String(object.relatedEntityName) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      world: isSet(object.world) ? globalThis.String(object.world) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : "",
    };
  },

  toJSON(message: ActivityDTO): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.eventName !== 0) {
      obj.eventName = activityEventNameEnumDTOToJSON(message.eventName);
    }
    if (message.relatedTargetEntity !== "") {
      obj.relatedTargetEntity = message.relatedTargetEntity;
    }
    if (message.relatedTargetId !== "") {
      obj.relatedTargetId = message.relatedTargetId;
    }
    if (message.relatedEntityName !== "") {
      obj.relatedEntityName = message.relatedEntityName;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.world !== "") {
      obj.world = message.world;
    }
    if (message.campaign !== "") {
      obj.campaign = message.campaign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityDTO>, I>>(base?: I): ActivityDTO {
    return ActivityDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityDTO>, I>>(object: I): ActivityDTO {
    const message = createBaseActivityDTO();
    message.id = object.id ?? "";
    message.label = object.label ?? "";
    message.eventName = object.eventName ?? 0;
    message.relatedTargetEntity = object.relatedTargetEntity ?? "";
    message.relatedTargetId = object.relatedTargetId ?? "";
    message.relatedEntityName = object.relatedEntityName ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.user = object.user ?? "";
    message.world = object.world ?? "";
    message.campaign = object.campaign ?? "";
    return message;
  },
};

export interface ActivityService {
  search(request: ActivitySearchRequest): Promise<ActivitySearchResponse>;
  clearAll(request: ActivityClearAllRequest): Promise<ActivityClearAllResponse>;
  create(request: ActivityCreateRequest): Promise<ActivityCreateResponse>;
  head(request: ActivityHeadRequest): Promise<ActivityHeadResponse>;
}

export const ActivityServiceServiceName = "activity.ActivityService";
export class ActivityServiceClientImpl implements ActivityService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ActivityServiceServiceName;
    this.rpc = rpc;
    this.search = this.search.bind(this);
    this.clearAll = this.clearAll.bind(this);
    this.create = this.create.bind(this);
    this.head = this.head.bind(this);
  }
  search(request: ActivitySearchRequest): Promise<ActivitySearchResponse> {
    const data = ActivitySearchRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "search", data);
    return promise.then((data) => ActivitySearchResponse.decode(new BinaryReader(data)));
  }

  clearAll(request: ActivityClearAllRequest): Promise<ActivityClearAllResponse> {
    const data = ActivityClearAllRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "clearAll", data);
    return promise.then((data) => ActivityClearAllResponse.decode(new BinaryReader(data)));
  }

  create(request: ActivityCreateRequest): Promise<ActivityCreateResponse> {
    const data = ActivityCreateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "create", data);
    return promise.then((data) => ActivityCreateResponse.decode(new BinaryReader(data)));
  }

  head(request: ActivityHeadRequest): Promise<ActivityHeadResponse> {
    const data = ActivityHeadRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "head", data);
    return promise.then((data) => ActivityHeadResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
