// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.2
//   protoc               v3.20.3
// source: content.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  AddictionDTO,
  BackgroundDTO,
  BirthsignDTO,
  CharacterDTO,
  CharacterGenInstructionDTO,
  CharacterGroupGenInstructionDTO,
  CharacterMemoryDTO,
  CharacterProfessionDTO,
  DataSourceEnumDTO,
  dataSourceEnumDTOFromJSON,
  dataSourceEnumDTOToJSON,
  DiseaseDTO,
  EffectDTO,
  EquipmentSlotDTO,
  FactDTO,
  FactionDTO,
  ItemDTO,
  ItemSetDTO,
  MemoryDTO,
  MemoryPoolDTO,
  MemoryPoolEntryDTO,
  MoodDTO,
  NeedDTO,
  PastExperienceDTO,
  PersonalityProfileDTO,
  RaceDTO,
  ReligionDTO,
  ResistanceDTO,
  SkillDTO,
  SkillSetDTO,
  StatusDTO,
  StorageSlotDTO,
  TagDTO,
  TraitDTO,
} from "./common";

export const protobufPackage = "content";

export interface CreateContentRequest {
  source: DataSourceEnumDTO;
  contentBody: ContentBodyDTO | undefined;
  entityName: string;
}

export interface CreateContentResponse {
}

export interface ContentBodyDTO {
  item?: ItemDTO | undefined;
  pastExperience?: PastExperienceDTO | undefined;
  characterMemory?: CharacterMemoryDTO | undefined;
  memory?: MemoryDTO | undefined;
  memoryPool?: MemoryPoolDTO | undefined;
  memoryPoolEntry?: MemoryPoolEntryDTO | undefined;
  skill?: SkillDTO | undefined;
  skillSet?: SkillSetDTO | undefined;
  equipmentSlot?: EquipmentSlotDTO | undefined;
  storageSlot?: StorageSlotDTO | undefined;
  trait?: TraitDTO | undefined;
  addiction?: AddictionDTO | undefined;
  background?: BackgroundDTO | undefined;
  birthsign?: BirthsignDTO | undefined;
  character?: CharacterDTO | undefined;
  characterGenInstruction?: CharacterGenInstructionDTO | undefined;
  characterGroupGenInstruction?: CharacterGroupGenInstructionDTO | undefined;
  characterProfession?: CharacterProfessionDTO | undefined;
  disease?: DiseaseDTO | undefined;
  effect?: EffectDTO | undefined;
  fact?: FactDTO | undefined;
  faction?: FactionDTO | undefined;
  itemSet?: ItemSetDTO | undefined;
  mood?: MoodDTO | undefined;
  need?: NeedDTO | undefined;
  personalityProfile?: PersonalityProfileDTO | undefined;
  race?: RaceDTO | undefined;
  religion?: ReligionDTO | undefined;
  resistance?: ResistanceDTO | undefined;
  status?: StatusDTO | undefined;
  tag?: TagDTO | undefined;
}

function createBaseCreateContentRequest(): CreateContentRequest {
  return { source: 0, contentBody: undefined, entityName: "" };
}

export const CreateContentRequest: MessageFns<CreateContentRequest> = {
  encode(message: CreateContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== 0) {
      writer.uint32(8).int32(message.source);
    }
    if (message.contentBody !== undefined) {
      ContentBodyDTO.encode(message.contentBody, writer.uint32(18).fork()).join();
    }
    if (message.entityName !== "") {
      writer.uint32(26).string(message.entityName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentBody = ContentBodyDTO.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entityName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateContentRequest {
    return {
      source: isSet(object.source) ? dataSourceEnumDTOFromJSON(object.source) : 0,
      contentBody: isSet(object.contentBody) ? ContentBodyDTO.fromJSON(object.contentBody) : undefined,
      entityName: isSet(object.entityName) ? globalThis.String(object.entityName) : "",
    };
  },

  toJSON(message: CreateContentRequest): unknown {
    const obj: any = {};
    if (message.source !== 0) {
      obj.source = dataSourceEnumDTOToJSON(message.source);
    }
    if (message.contentBody !== undefined) {
      obj.contentBody = ContentBodyDTO.toJSON(message.contentBody);
    }
    if (message.entityName !== "") {
      obj.entityName = message.entityName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateContentRequest>, I>>(base?: I): CreateContentRequest {
    return CreateContentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateContentRequest>, I>>(object: I): CreateContentRequest {
    const message = createBaseCreateContentRequest();
    message.source = object.source ?? 0;
    message.contentBody = (object.contentBody !== undefined && object.contentBody !== null)
      ? ContentBodyDTO.fromPartial(object.contentBody)
      : undefined;
    message.entityName = object.entityName ?? "";
    return message;
  },
};

function createBaseCreateContentResponse(): CreateContentResponse {
  return {};
}

export const CreateContentResponse: MessageFns<CreateContentResponse> = {
  encode(_: CreateContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateContentResponse {
    return {};
  },

  toJSON(_: CreateContentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateContentResponse>, I>>(base?: I): CreateContentResponse {
    return CreateContentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateContentResponse>, I>>(_: I): CreateContentResponse {
    const message = createBaseCreateContentResponse();
    return message;
  },
};

function createBaseContentBodyDTO(): ContentBodyDTO {
  return {
    item: undefined,
    pastExperience: undefined,
    characterMemory: undefined,
    memory: undefined,
    memoryPool: undefined,
    memoryPoolEntry: undefined,
    skill: undefined,
    skillSet: undefined,
    equipmentSlot: undefined,
    storageSlot: undefined,
    trait: undefined,
    addiction: undefined,
    background: undefined,
    birthsign: undefined,
    character: undefined,
    characterGenInstruction: undefined,
    characterGroupGenInstruction: undefined,
    characterProfession: undefined,
    disease: undefined,
    effect: undefined,
    fact: undefined,
    faction: undefined,
    itemSet: undefined,
    mood: undefined,
    need: undefined,
    personalityProfile: undefined,
    race: undefined,
    religion: undefined,
    resistance: undefined,
    status: undefined,
    tag: undefined,
  };
}

export const ContentBodyDTO: MessageFns<ContentBodyDTO> = {
  encode(message: ContentBodyDTO, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.item !== undefined) {
      ItemDTO.encode(message.item, writer.uint32(10).fork()).join();
    }
    if (message.pastExperience !== undefined) {
      PastExperienceDTO.encode(message.pastExperience, writer.uint32(18).fork()).join();
    }
    if (message.characterMemory !== undefined) {
      CharacterMemoryDTO.encode(message.characterMemory, writer.uint32(26).fork()).join();
    }
    if (message.memory !== undefined) {
      MemoryDTO.encode(message.memory, writer.uint32(34).fork()).join();
    }
    if (message.memoryPool !== undefined) {
      MemoryPoolDTO.encode(message.memoryPool, writer.uint32(42).fork()).join();
    }
    if (message.memoryPoolEntry !== undefined) {
      MemoryPoolEntryDTO.encode(message.memoryPoolEntry, writer.uint32(50).fork()).join();
    }
    if (message.skill !== undefined) {
      SkillDTO.encode(message.skill, writer.uint32(58).fork()).join();
    }
    if (message.skillSet !== undefined) {
      SkillSetDTO.encode(message.skillSet, writer.uint32(66).fork()).join();
    }
    if (message.equipmentSlot !== undefined) {
      EquipmentSlotDTO.encode(message.equipmentSlot, writer.uint32(74).fork()).join();
    }
    if (message.storageSlot !== undefined) {
      StorageSlotDTO.encode(message.storageSlot, writer.uint32(82).fork()).join();
    }
    if (message.trait !== undefined) {
      TraitDTO.encode(message.trait, writer.uint32(90).fork()).join();
    }
    if (message.addiction !== undefined) {
      AddictionDTO.encode(message.addiction, writer.uint32(98).fork()).join();
    }
    if (message.background !== undefined) {
      BackgroundDTO.encode(message.background, writer.uint32(106).fork()).join();
    }
    if (message.birthsign !== undefined) {
      BirthsignDTO.encode(message.birthsign, writer.uint32(114).fork()).join();
    }
    if (message.character !== undefined) {
      CharacterDTO.encode(message.character, writer.uint32(122).fork()).join();
    }
    if (message.characterGenInstruction !== undefined) {
      CharacterGenInstructionDTO.encode(message.characterGenInstruction, writer.uint32(130).fork()).join();
    }
    if (message.characterGroupGenInstruction !== undefined) {
      CharacterGroupGenInstructionDTO.encode(message.characterGroupGenInstruction, writer.uint32(138).fork()).join();
    }
    if (message.characterProfession !== undefined) {
      CharacterProfessionDTO.encode(message.characterProfession, writer.uint32(146).fork()).join();
    }
    if (message.disease !== undefined) {
      DiseaseDTO.encode(message.disease, writer.uint32(154).fork()).join();
    }
    if (message.effect !== undefined) {
      EffectDTO.encode(message.effect, writer.uint32(162).fork()).join();
    }
    if (message.fact !== undefined) {
      FactDTO.encode(message.fact, writer.uint32(170).fork()).join();
    }
    if (message.faction !== undefined) {
      FactionDTO.encode(message.faction, writer.uint32(178).fork()).join();
    }
    if (message.itemSet !== undefined) {
      ItemSetDTO.encode(message.itemSet, writer.uint32(186).fork()).join();
    }
    if (message.mood !== undefined) {
      MoodDTO.encode(message.mood, writer.uint32(194).fork()).join();
    }
    if (message.need !== undefined) {
      NeedDTO.encode(message.need, writer.uint32(202).fork()).join();
    }
    if (message.personalityProfile !== undefined) {
      PersonalityProfileDTO.encode(message.personalityProfile, writer.uint32(210).fork()).join();
    }
    if (message.race !== undefined) {
      RaceDTO.encode(message.race, writer.uint32(218).fork()).join();
    }
    if (message.religion !== undefined) {
      ReligionDTO.encode(message.religion, writer.uint32(226).fork()).join();
    }
    if (message.resistance !== undefined) {
      ResistanceDTO.encode(message.resistance, writer.uint32(234).fork()).join();
    }
    if (message.status !== undefined) {
      StatusDTO.encode(message.status, writer.uint32(242).fork()).join();
    }
    if (message.tag !== undefined) {
      TagDTO.encode(message.tag, writer.uint32(250).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentBodyDTO {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentBodyDTO();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.item = ItemDTO.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pastExperience = PastExperienceDTO.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.characterMemory = CharacterMemoryDTO.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.memory = MemoryDTO.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.memoryPool = MemoryPoolDTO.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.memoryPoolEntry = MemoryPoolEntryDTO.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.skill = SkillDTO.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.skillSet = SkillSetDTO.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.equipmentSlot = EquipmentSlotDTO.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.storageSlot = StorageSlotDTO.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.trait = TraitDTO.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.addiction = AddictionDTO.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.background = BackgroundDTO.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.birthsign = BirthsignDTO.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.character = CharacterDTO.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.characterGenInstruction = CharacterGenInstructionDTO.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.characterGroupGenInstruction = CharacterGroupGenInstructionDTO.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.characterProfession = CharacterProfessionDTO.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.disease = DiseaseDTO.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.effect = EffectDTO.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.fact = FactDTO.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.faction = FactionDTO.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.itemSet = ItemSetDTO.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.mood = MoodDTO.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.need = NeedDTO.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.personalityProfile = PersonalityProfileDTO.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.race = RaceDTO.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.religion = ReligionDTO.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.resistance = ResistanceDTO.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.status = StatusDTO.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.tag = TagDTO.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentBodyDTO {
    return {
      item: isSet(object.item) ? ItemDTO.fromJSON(object.item) : undefined,
      pastExperience: isSet(object.pastExperience) ? PastExperienceDTO.fromJSON(object.pastExperience) : undefined,
      characterMemory: isSet(object.characterMemory) ? CharacterMemoryDTO.fromJSON(object.characterMemory) : undefined,
      memory: isSet(object.memory) ? MemoryDTO.fromJSON(object.memory) : undefined,
      memoryPool: isSet(object.memoryPool) ? MemoryPoolDTO.fromJSON(object.memoryPool) : undefined,
      memoryPoolEntry: isSet(object.memoryPoolEntry) ? MemoryPoolEntryDTO.fromJSON(object.memoryPoolEntry) : undefined,
      skill: isSet(object.skill) ? SkillDTO.fromJSON(object.skill) : undefined,
      skillSet: isSet(object.skillSet) ? SkillSetDTO.fromJSON(object.skillSet) : undefined,
      equipmentSlot: isSet(object.equipmentSlot) ? EquipmentSlotDTO.fromJSON(object.equipmentSlot) : undefined,
      storageSlot: isSet(object.storageSlot) ? StorageSlotDTO.fromJSON(object.storageSlot) : undefined,
      trait: isSet(object.trait) ? TraitDTO.fromJSON(object.trait) : undefined,
      addiction: isSet(object.addiction) ? AddictionDTO.fromJSON(object.addiction) : undefined,
      background: isSet(object.background) ? BackgroundDTO.fromJSON(object.background) : undefined,
      birthsign: isSet(object.birthsign) ? BirthsignDTO.fromJSON(object.birthsign) : undefined,
      character: isSet(object.character) ? CharacterDTO.fromJSON(object.character) : undefined,
      characterGenInstruction: isSet(object.characterGenInstruction)
        ? CharacterGenInstructionDTO.fromJSON(object.characterGenInstruction)
        : undefined,
      characterGroupGenInstruction: isSet(object.characterGroupGenInstruction)
        ? CharacterGroupGenInstructionDTO.fromJSON(object.characterGroupGenInstruction)
        : undefined,
      characterProfession: isSet(object.characterProfession)
        ? CharacterProfessionDTO.fromJSON(object.characterProfession)
        : undefined,
      disease: isSet(object.disease) ? DiseaseDTO.fromJSON(object.disease) : undefined,
      effect: isSet(object.effect) ? EffectDTO.fromJSON(object.effect) : undefined,
      fact: isSet(object.fact) ? FactDTO.fromJSON(object.fact) : undefined,
      faction: isSet(object.faction) ? FactionDTO.fromJSON(object.faction) : undefined,
      itemSet: isSet(object.itemSet) ? ItemSetDTO.fromJSON(object.itemSet) : undefined,
      mood: isSet(object.mood) ? MoodDTO.fromJSON(object.mood) : undefined,
      need: isSet(object.need) ? NeedDTO.fromJSON(object.need) : undefined,
      personalityProfile: isSet(object.personalityProfile)
        ? PersonalityProfileDTO.fromJSON(object.personalityProfile)
        : undefined,
      race: isSet(object.race) ? RaceDTO.fromJSON(object.race) : undefined,
      religion: isSet(object.religion) ? ReligionDTO.fromJSON(object.religion) : undefined,
      resistance: isSet(object.resistance) ? ResistanceDTO.fromJSON(object.resistance) : undefined,
      status: isSet(object.status) ? StatusDTO.fromJSON(object.status) : undefined,
      tag: isSet(object.tag) ? TagDTO.fromJSON(object.tag) : undefined,
    };
  },

  toJSON(message: ContentBodyDTO): unknown {
    const obj: any = {};
    if (message.item !== undefined) {
      obj.item = ItemDTO.toJSON(message.item);
    }
    if (message.pastExperience !== undefined) {
      obj.pastExperience = PastExperienceDTO.toJSON(message.pastExperience);
    }
    if (message.characterMemory !== undefined) {
      obj.characterMemory = CharacterMemoryDTO.toJSON(message.characterMemory);
    }
    if (message.memory !== undefined) {
      obj.memory = MemoryDTO.toJSON(message.memory);
    }
    if (message.memoryPool !== undefined) {
      obj.memoryPool = MemoryPoolDTO.toJSON(message.memoryPool);
    }
    if (message.memoryPoolEntry !== undefined) {
      obj.memoryPoolEntry = MemoryPoolEntryDTO.toJSON(message.memoryPoolEntry);
    }
    if (message.skill !== undefined) {
      obj.skill = SkillDTO.toJSON(message.skill);
    }
    if (message.skillSet !== undefined) {
      obj.skillSet = SkillSetDTO.toJSON(message.skillSet);
    }
    if (message.equipmentSlot !== undefined) {
      obj.equipmentSlot = EquipmentSlotDTO.toJSON(message.equipmentSlot);
    }
    if (message.storageSlot !== undefined) {
      obj.storageSlot = StorageSlotDTO.toJSON(message.storageSlot);
    }
    if (message.trait !== undefined) {
      obj.trait = TraitDTO.toJSON(message.trait);
    }
    if (message.addiction !== undefined) {
      obj.addiction = AddictionDTO.toJSON(message.addiction);
    }
    if (message.background !== undefined) {
      obj.background = BackgroundDTO.toJSON(message.background);
    }
    if (message.birthsign !== undefined) {
      obj.birthsign = BirthsignDTO.toJSON(message.birthsign);
    }
    if (message.character !== undefined) {
      obj.character = CharacterDTO.toJSON(message.character);
    }
    if (message.characterGenInstruction !== undefined) {
      obj.characterGenInstruction = CharacterGenInstructionDTO.toJSON(message.characterGenInstruction);
    }
    if (message.characterGroupGenInstruction !== undefined) {
      obj.characterGroupGenInstruction = CharacterGroupGenInstructionDTO.toJSON(message.characterGroupGenInstruction);
    }
    if (message.characterProfession !== undefined) {
      obj.characterProfession = CharacterProfessionDTO.toJSON(message.characterProfession);
    }
    if (message.disease !== undefined) {
      obj.disease = DiseaseDTO.toJSON(message.disease);
    }
    if (message.effect !== undefined) {
      obj.effect = EffectDTO.toJSON(message.effect);
    }
    if (message.fact !== undefined) {
      obj.fact = FactDTO.toJSON(message.fact);
    }
    if (message.faction !== undefined) {
      obj.faction = FactionDTO.toJSON(message.faction);
    }
    if (message.itemSet !== undefined) {
      obj.itemSet = ItemSetDTO.toJSON(message.itemSet);
    }
    if (message.mood !== undefined) {
      obj.mood = MoodDTO.toJSON(message.mood);
    }
    if (message.need !== undefined) {
      obj.need = NeedDTO.toJSON(message.need);
    }
    if (message.personalityProfile !== undefined) {
      obj.personalityProfile = PersonalityProfileDTO.toJSON(message.personalityProfile);
    }
    if (message.race !== undefined) {
      obj.race = RaceDTO.toJSON(message.race);
    }
    if (message.religion !== undefined) {
      obj.religion = ReligionDTO.toJSON(message.religion);
    }
    if (message.resistance !== undefined) {
      obj.resistance = ResistanceDTO.toJSON(message.resistance);
    }
    if (message.status !== undefined) {
      obj.status = StatusDTO.toJSON(message.status);
    }
    if (message.tag !== undefined) {
      obj.tag = TagDTO.toJSON(message.tag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentBodyDTO>, I>>(base?: I): ContentBodyDTO {
    return ContentBodyDTO.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentBodyDTO>, I>>(object: I): ContentBodyDTO {
    const message = createBaseContentBodyDTO();
    message.item = (object.item !== undefined && object.item !== null) ? ItemDTO.fromPartial(object.item) : undefined;
    message.pastExperience = (object.pastExperience !== undefined && object.pastExperience !== null)
      ? PastExperienceDTO.fromPartial(object.pastExperience)
      : undefined;
    message.characterMemory = (object.characterMemory !== undefined && object.characterMemory !== null)
      ? CharacterMemoryDTO.fromPartial(object.characterMemory)
      : undefined;
    message.memory = (object.memory !== undefined && object.memory !== null)
      ? MemoryDTO.fromPartial(object.memory)
      : undefined;
    message.memoryPool = (object.memoryPool !== undefined && object.memoryPool !== null)
      ? MemoryPoolDTO.fromPartial(object.memoryPool)
      : undefined;
    message.memoryPoolEntry = (object.memoryPoolEntry !== undefined && object.memoryPoolEntry !== null)
      ? MemoryPoolEntryDTO.fromPartial(object.memoryPoolEntry)
      : undefined;
    message.skill = (object.skill !== undefined && object.skill !== null)
      ? SkillDTO.fromPartial(object.skill)
      : undefined;
    message.skillSet = (object.skillSet !== undefined && object.skillSet !== null)
      ? SkillSetDTO.fromPartial(object.skillSet)
      : undefined;
    message.equipmentSlot = (object.equipmentSlot !== undefined && object.equipmentSlot !== null)
      ? EquipmentSlotDTO.fromPartial(object.equipmentSlot)
      : undefined;
    message.storageSlot = (object.storageSlot !== undefined && object.storageSlot !== null)
      ? StorageSlotDTO.fromPartial(object.storageSlot)
      : undefined;
    message.trait = (object.trait !== undefined && object.trait !== null)
      ? TraitDTO.fromPartial(object.trait)
      : undefined;
    message.addiction = (object.addiction !== undefined && object.addiction !== null)
      ? AddictionDTO.fromPartial(object.addiction)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? BackgroundDTO.fromPartial(object.background)
      : undefined;
    message.birthsign = (object.birthsign !== undefined && object.birthsign !== null)
      ? BirthsignDTO.fromPartial(object.birthsign)
      : undefined;
    message.character = (object.character !== undefined && object.character !== null)
      ? CharacterDTO.fromPartial(object.character)
      : undefined;
    message.characterGenInstruction =
      (object.characterGenInstruction !== undefined && object.characterGenInstruction !== null)
        ? CharacterGenInstructionDTO.fromPartial(object.characterGenInstruction)
        : undefined;
    message.characterGroupGenInstruction =
      (object.characterGroupGenInstruction !== undefined && object.characterGroupGenInstruction !== null)
        ? CharacterGroupGenInstructionDTO.fromPartial(object.characterGroupGenInstruction)
        : undefined;
    message.characterProfession = (object.characterProfession !== undefined && object.characterProfession !== null)
      ? CharacterProfessionDTO.fromPartial(object.characterProfession)
      : undefined;
    message.disease = (object.disease !== undefined && object.disease !== null)
      ? DiseaseDTO.fromPartial(object.disease)
      : undefined;
    message.effect = (object.effect !== undefined && object.effect !== null)
      ? EffectDTO.fromPartial(object.effect)
      : undefined;
    message.fact = (object.fact !== undefined && object.fact !== null) ? FactDTO.fromPartial(object.fact) : undefined;
    message.faction = (object.faction !== undefined && object.faction !== null)
      ? FactionDTO.fromPartial(object.faction)
      : undefined;
    message.itemSet = (object.itemSet !== undefined && object.itemSet !== null)
      ? ItemSetDTO.fromPartial(object.itemSet)
      : undefined;
    message.mood = (object.mood !== undefined && object.mood !== null) ? MoodDTO.fromPartial(object.mood) : undefined;
    message.need = (object.need !== undefined && object.need !== null) ? NeedDTO.fromPartial(object.need) : undefined;
    message.personalityProfile = (object.personalityProfile !== undefined && object.personalityProfile !== null)
      ? PersonalityProfileDTO.fromPartial(object.personalityProfile)
      : undefined;
    message.race = (object.race !== undefined && object.race !== null) ? RaceDTO.fromPartial(object.race) : undefined;
    message.religion = (object.religion !== undefined && object.religion !== null)
      ? ReligionDTO.fromPartial(object.religion)
      : undefined;
    message.resistance = (object.resistance !== undefined && object.resistance !== null)
      ? ResistanceDTO.fromPartial(object.resistance)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? StatusDTO.fromPartial(object.status)
      : undefined;
    message.tag = (object.tag !== undefined && object.tag !== null) ? TagDTO.fromPartial(object.tag) : undefined;
    return message;
  },
};

export interface ContentController {
  create(request: CreateContentRequest): Promise<CreateContentResponse>;
}

export const ContentControllerServiceName = "content.ContentController";
export class ContentControllerClientImpl implements ContentController {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ContentControllerServiceName;
    this.rpc = rpc;
    this.create = this.create.bind(this);
  }
  create(request: CreateContentRequest): Promise<CreateContentResponse> {
    const data = CreateContentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "create", data);
    return promise.then((data) => CreateContentResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
