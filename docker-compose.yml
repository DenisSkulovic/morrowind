version: '3.8'

services:
  # Backend Microservices
  content-service:
    build:
      context: ./backend/content-service
      dockerfile: Dockerfile.dev
    container_name: content_service
    restart: always
    ports:
      - "50051:50051"
    environment:
      - NODE_ENV=development
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_HOST__WORLD=world-db
      - DATABASE_PORT__WORLD=5432
      - DATABASE_NAME__WORLD=${POSTGRES_DB__WORLD}
      - DATABASE_HOST__CAMPAIGN=campaign-db
      - DATABASE_PORT__CAMPAIGN=5432
      - DATABASE_NAME__CAMPAIGN=${POSTGRES_DB__CAMPAIGN}
      - DATABASE_SYNCHRONIZE=false
    volumes:
      - ./backend/content-service:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - world-db
      - campaign-db
    profiles:
      - fullstack
      - backend

  # Envoy Proxy
  envoy:
    image: envoyproxy/envoy:v1.23.0
    container_name: envoy_proxy
    restart: always
    ports:
      - "8080:8080" # HTTP endpoint for frontend
      - "9901:9901" # Admin interface (optional)
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - content-service
    profiles:
      - fullstack

  # Databases
  world-db:
    image: postgres:14
    container_name: world_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB__WORLD}
    ports:
      - "55433:5432"
    volumes:
      - world_db_data:/var/lib/postgresql/data
    profiles:
      - database
      - fullstack
      - backend

  campaign-db:
    image: postgres:14
    container_name: campaign_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB__CAMPAIGN}
    ports:
      - "55434:5432"
    volumes:
      - campaign_db_data:/var/lib/postgresql/data
    profiles:
      - database
      - fullstack
      - backend

  # # Frontends
  world-building-ui:
    build:
      context: ./frontend/world-building-ui
      dockerfile: Dockerfile.dev
    container_name: world_building_ui
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - ./frontend/world-building-ui:/usr/src/app
    depends_on:
      - content-service
      - envoy
    profiles:
      - frontend
      - fullstack

volumes:
  world_db_data:
  campaign_db_data:
