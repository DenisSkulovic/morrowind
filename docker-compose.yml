version: '3.8'

services:
  #============================================================
  # Backend AI Services
  #============================================================
  ai-service-server:
    build:
      context: ./backend/ai-service
    env_file:
      - ./ai-service-server.env
    command: python3 server.py
    ports:
      - "50051:50051"
    depends_on:
      - ai-service-redis
    profiles:
      - backend
      - fullstack

  ai-service-worker:
    build:
      context: ./backend/ai-service
    env_file:
      - ./ai-service-worker.env
    command: python3 worker.py
    ports:
      - "50052:50052"
    depends_on:
      - ai-service-redis
    profiles:
      - backend
      - fullstack

  ai-service-redis:
    image: redis:latest
    ports:
      - "6379:6379"
    profiles:
      - backend
      - fullstack

  #============================================================
  # Backend Dialogue Service
  #============================================================
  dialogue-service:
    build:
      context: ./backend/dialogue-service
    env_file:
      - ./dialogue-service.env
    command: python3 server.py
    ports:
      - "50053:50053"
    depends_on:
      - ai-service-server
      - dialogue-state-redis
    profiles:
      - backend
      - fullstack

  dialogue-state-redis:
    image: redis:latest
    ports:
      - "6380:6379"
    profiles:
      - backend
      - fullstack

  #============================================================
  # Backend Content Services
  #============================================================
  content-service-proto-generator:
    image: node:18
    container_name: content_service_proto_generator
    working_dir: /usr/src/app
    volumes:
      - ./backend/content-service:/usr/src/app
    command: sh -c "npm install && npm run proto:generate"
    profiles:
      - backend
      - fullstack
    depends_on:
      - world-db
      - campaign-db

  content-service:
    build:
      context: ./backend/content-service
      dockerfile: Dockerfile.dev
    env_file:
      - ./content-service.env
    container_name: content_service
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always
    ports:
      - "50051:50051"
    volumes:
      - ./backend/content-service:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - world-db
      - campaign-db
      - content-service-proto-generator
    profiles:
      - fullstack
      - backend

  #============================================================
  # gRPC Proxy
  #============================================================
  envoy:
    image: envoyproxy/envoy:v1.22.0
    container_name: envoy_proxy
    restart: always
    environment:
      - CONTENT_SERVICE_HOST
      - CONTENT_SERVICE_PORT
      - DIALOGUE_SERVICE_HOST
      - DIALOGUE_SERVICE_PORT
      - FRONTEND_UI_PORT
      - ENVOY_ADMIN_PORT
    env_file:
      - ./envoy/envoy.env
    ports:
      - "${FRONTEND_UI_PORT}:${FRONTEND_UI_PORT}"
      - "${ENVOY_ADMIN_PORT}:${ENVOY_ADMIN_PORT}"
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy/envoy_access.log:/var/log/envoy/envoy_access.log
    depends_on:
      - content-service
      - dialogue-service
    profiles:
      - fullstack

  #============================================================
  # Databases
  #============================================================
  world-db:
    image: postgres:14
    env_file:
      - ./world-db.env
    container_name: world_db
    restart: always
    ports:
      - "55433:5432"
    volumes:
      - world_db_data:/var/lib/postgresql/data
    profiles:
      - database
      - fullstack
      - backend

  campaign-db:
    image: postgres:14
    container_name: campaign_db
    restart: always
    env_file:
      - ./campaign-db.env
    ports:
      - "55434:5432"
    volumes:
      - campaign_db_data:/var/lib/postgresql/data
    profiles:
      - database
      - fullstack
      - backend

  #============================================================
  # Frontend Services
  #============================================================
  world-building-ui-proto-generator:
    image: node:18
    container_name: world_building_ui_proto_generator
    working_dir: /usr/src/app
    volumes:
      - ./frontend/world-building-ui:/usr/src/app
    command: sh -c "npm install && npm run proto:generate"
    profiles:
      - frontend
      - fullstack
    depends_on:
      - world-db
      - campaign-db

  world-building-ui-frontend:
    build:
      context: ./frontend/world-building-ui
      dockerfile: Dockerfile.dev
    env_file:
      - ./world-building-ui.env
    container_name: world_building_ui
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - ./frontend/world-building-ui:/usr/src/app
    depends_on:
      - world-building-ui-proto-generator
      - content-service
      - envoy
    profiles:
      - frontend
      - fullstack

#============================================================
# Persistent Storage
#============================================================
volumes:
  world_db_data:
  campaign_db_data:
