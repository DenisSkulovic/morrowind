/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: content.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace content {
    export class UpdateContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contentBody?: ContentBodyDTO;
            entityName?: string;
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contentBody" in data && data.contentBody != undefined) {
                    this.contentBody = data.contentBody;
                }
                if ("entityName" in data && data.entityName != undefined) {
                    this.entityName = data.entityName;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get contentBody() {
            return pb_1.Message.getWrapperField(this, ContentBodyDTO, 1) as ContentBodyDTO;
        }
        set contentBody(value: ContentBodyDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_contentBody() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get entityName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set entityName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
            entityName?: string;
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): UpdateContentRequest {
            const message = new UpdateContentRequest({});
            if (data.contentBody != null) {
                message.contentBody = ContentBodyDTO.fromObject(data.contentBody);
            }
            if (data.entityName != null) {
                message.entityName = data.entityName;
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
                entityName?: string;
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.contentBody != null) {
                data.contentBody = this.contentBody.toObject();
            }
            if (this.entityName != null) {
                data.entityName = this.entityName;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contentBody)
                writer.writeMessage(1, this.contentBody, () => this.contentBody.serialize(writer));
            if (this.entityName.length)
                writer.writeString(2, this.entityName);
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contentBody, () => message.contentBody = ContentBodyDTO.deserialize(reader));
                        break;
                    case 2:
                        message.entityName = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContentRequest {
            return UpdateContentRequest.deserialize(bytes);
        }
    }
    export class UpdateContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contentBody?: ContentBodyDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contentBody" in data && data.contentBody != undefined) {
                    this.contentBody = data.contentBody;
                }
            }
        }
        get contentBody() {
            return pb_1.Message.getWrapperField(this, ContentBodyDTO, 1) as ContentBodyDTO;
        }
        set contentBody(value: ContentBodyDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_contentBody() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
        }): UpdateContentResponse {
            const message = new UpdateContentResponse({});
            if (data.contentBody != null) {
                message.contentBody = ContentBodyDTO.fromObject(data.contentBody);
            }
            return message;
        }
        toObject() {
            const data: {
                contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
            } = {};
            if (this.contentBody != null) {
                data.contentBody = this.contentBody.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contentBody)
                writer.writeMessage(1, this.contentBody, () => this.contentBody.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contentBody, () => message.contentBody = ContentBodyDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContentResponse {
            return UpdateContentResponse.deserialize(bytes);
        }
    }
    export class DeleteContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entityName?: string;
            id?: string;
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entityName" in data && data.entityName != undefined) {
                    this.entityName = data.entityName;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get entityName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set entityName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            entityName?: string;
            id?: string;
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): DeleteContentRequest {
            const message = new DeleteContentRequest({});
            if (data.entityName != null) {
                message.entityName = data.entityName;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                entityName?: string;
                id?: string;
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.entityName != null) {
                data.entityName = this.entityName;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entityName.length)
                writer.writeString(1, this.entityName);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entityName = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteContentRequest {
            return DeleteContentRequest.deserialize(bytes);
        }
    }
    export class DeleteContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): DeleteContentResponse {
            const message = new DeleteContentResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteContentResponse {
            return DeleteContentResponse.deserialize(bytes);
        }
    }
    export class SearchContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entityName?: string;
            query?: dependency_1.common.SearchQueryDTO;
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entityName" in data && data.entityName != undefined) {
                    this.entityName = data.entityName;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get entityName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set entityName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SearchQueryDTO, 2) as dependency_1.common.SearchQueryDTO;
        }
        set query(value: dependency_1.common.SearchQueryDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            entityName?: string;
            query?: ReturnType<typeof dependency_1.common.SearchQueryDTO.prototype.toObject>;
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): SearchContentRequest {
            const message = new SearchContentRequest({});
            if (data.entityName != null) {
                message.entityName = data.entityName;
            }
            if (data.query != null) {
                message.query = dependency_1.common.SearchQueryDTO.fromObject(data.query);
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                entityName?: string;
                query?: ReturnType<typeof dependency_1.common.SearchQueryDTO.prototype.toObject>;
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.entityName != null) {
                data.entityName = this.entityName;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entityName.length)
                writer.writeString(1, this.entityName);
            if (this.has_query)
                writer.writeMessage(2, this.query, () => this.query.serialize(writer));
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entityName = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.query, () => message.query = dependency_1.common.SearchQueryDTO.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchContentRequest {
            return SearchContentRequest.deserialize(bytes);
        }
    }
    export class SearchContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            results?: ContentBodyDTO[];
            totalResults?: number;
            totalPages?: number;
            currentPage?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
                if ("totalResults" in data && data.totalResults != undefined) {
                    this.totalResults = data.totalResults;
                }
                if ("totalPages" in data && data.totalPages != undefined) {
                    this.totalPages = data.totalPages;
                }
                if ("currentPage" in data && data.currentPage != undefined) {
                    this.currentPage = data.currentPage;
                }
            }
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, ContentBodyDTO, 1) as ContentBodyDTO[];
        }
        set results(value: ContentBodyDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalResults() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalResults(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get totalPages() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set totalPages(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get currentPage() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set currentPage(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            results?: ReturnType<typeof ContentBodyDTO.prototype.toObject>[];
            totalResults?: number;
            totalPages?: number;
            currentPage?: number;
        }): SearchContentResponse {
            const message = new SearchContentResponse({});
            if (data.results != null) {
                message.results = data.results.map(item => ContentBodyDTO.fromObject(item));
            }
            if (data.totalResults != null) {
                message.totalResults = data.totalResults;
            }
            if (data.totalPages != null) {
                message.totalPages = data.totalPages;
            }
            if (data.currentPage != null) {
                message.currentPage = data.currentPage;
            }
            return message;
        }
        toObject() {
            const data: {
                results?: ReturnType<typeof ContentBodyDTO.prototype.toObject>[];
                totalResults?: number;
                totalPages?: number;
                currentPage?: number;
            } = {};
            if (this.results != null) {
                data.results = this.results.map((item: ContentBodyDTO) => item.toObject());
            }
            if (this.totalResults != null) {
                data.totalResults = this.totalResults;
            }
            if (this.totalPages != null) {
                data.totalPages = this.totalPages;
            }
            if (this.currentPage != null) {
                data.currentPage = this.currentPage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results.length)
                writer.writeRepeatedMessage(1, this.results, (item: ContentBodyDTO) => item.serialize(writer));
            if (this.totalResults != 0)
                writer.writeInt32(2, this.totalResults);
            if (this.totalPages != 0)
                writer.writeInt32(3, this.totalPages);
            if (this.currentPage != 0)
                writer.writeInt32(4, this.currentPage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContentBodyDTO.deserialize(reader), ContentBodyDTO));
                        break;
                    case 2:
                        message.totalResults = reader.readInt32();
                        break;
                    case 3:
                        message.totalPages = reader.readInt32();
                        break;
                    case 4:
                        message.currentPage = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchContentResponse {
            return SearchContentResponse.deserialize(bytes);
        }
    }
    export class GetContentStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            context?: dependency_1.common.ContextDTO;
            entityNames?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
                if ("entityNames" in data && data.entityNames != undefined) {
                    this.entityNames = data.entityNames;
                }
            }
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 1) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get entityNames() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set entityNames(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            entityNames?: string[];
        }): GetContentStatsRequest {
            const message = new GetContentStatsRequest({});
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            if (data.entityNames != null) {
                message.entityNames = data.entityNames;
            }
            return message;
        }
        toObject() {
            const data: {
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
                entityNames?: string[];
            } = {};
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            if (this.entityNames != null) {
                data.entityNames = this.entityNames;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_context)
                writer.writeMessage(1, this.context, () => this.context.serialize(writer));
            if (this.entityNames.length)
                writer.writeRepeatedString(2, this.entityNames);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetContentStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetContentStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetContentStatsRequest {
            return GetContentStatsRequest.deserialize(bytes);
        }
    }
    export class GetContentStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stats?: ContentStatDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stats" in data && data.stats != undefined) {
                    this.stats = data.stats;
                }
            }
        }
        get stats() {
            return pb_1.Message.getRepeatedWrapperField(this, ContentStatDTO, 1) as ContentStatDTO[];
        }
        set stats(value: ContentStatDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            stats?: ReturnType<typeof ContentStatDTO.prototype.toObject>[];
        }): GetContentStatsResponse {
            const message = new GetContentStatsResponse({});
            if (data.stats != null) {
                message.stats = data.stats.map(item => ContentStatDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                stats?: ReturnType<typeof ContentStatDTO.prototype.toObject>[];
            } = {};
            if (this.stats != null) {
                data.stats = this.stats.map((item: ContentStatDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stats.length)
                writer.writeRepeatedMessage(1, this.stats, (item: ContentStatDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetContentStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetContentStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContentStatDTO.deserialize(reader), ContentStatDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetContentStatsResponse {
            return GetContentStatsResponse.deserialize(bytes);
        }
    }
    export class ContentStatDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            type?: string;
            count?: number;
            icon?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            title?: string;
            type?: string;
            count?: number;
            icon?: string;
        }): ContentStatDTO {
            const message = new ContentStatDTO({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.icon != null) {
                message.icon = data.icon;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                type?: string;
                count?: number;
                icon?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.icon != null) {
                data.icon = this.icon;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.count != 0)
                writer.writeInt32(3, this.count);
            if (this.icon.length)
                writer.writeString(4, this.icon);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentStatDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentStatDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.count = reader.readInt32();
                        break;
                    case 4:
                        message.icon = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentStatDTO {
            return ContentStatDTO.deserialize(bytes);
        }
    }
    export class CreateBulkContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: CreateContentRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, CreateContentRequest, 1) as CreateContentRequest[];
        }
        set requests(value: CreateContentRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof CreateContentRequest.prototype.toObject>[];
        }): CreateBulkContentRequest {
            const message = new CreateBulkContentRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => CreateContentRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof CreateContentRequest.prototype.toObject>[];
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: CreateContentRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: CreateContentRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBulkContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBulkContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CreateContentRequest.deserialize(reader), CreateContentRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBulkContentRequest {
            return CreateBulkContentRequest.deserialize(bytes);
        }
    }
    export class CreateBulkContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            responses?: CreateContentResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("responses" in data && data.responses != undefined) {
                    this.responses = data.responses;
                }
            }
        }
        get responses() {
            return pb_1.Message.getRepeatedWrapperField(this, CreateContentResponse, 1) as CreateContentResponse[];
        }
        set responses(value: CreateContentResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            responses?: ReturnType<typeof CreateContentResponse.prototype.toObject>[];
        }): CreateBulkContentResponse {
            const message = new CreateBulkContentResponse({});
            if (data.responses != null) {
                message.responses = data.responses.map(item => CreateContentResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                responses?: ReturnType<typeof CreateContentResponse.prototype.toObject>[];
            } = {};
            if (this.responses != null) {
                data.responses = this.responses.map((item: CreateContentResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.responses.length)
                writer.writeRepeatedMessage(1, this.responses, (item: CreateContentResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBulkContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBulkContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CreateContentResponse.deserialize(reader), CreateContentResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBulkContentResponse {
            return CreateBulkContentResponse.deserialize(bytes);
        }
    }
    export class UpdateBulkContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: UpdateContentRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, UpdateContentRequest, 1) as UpdateContentRequest[];
        }
        set requests(value: UpdateContentRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof UpdateContentRequest.prototype.toObject>[];
        }): UpdateBulkContentRequest {
            const message = new UpdateBulkContentRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => UpdateContentRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof UpdateContentRequest.prototype.toObject>[];
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: UpdateContentRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: UpdateContentRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateBulkContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateBulkContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UpdateContentRequest.deserialize(reader), UpdateContentRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateBulkContentRequest {
            return UpdateBulkContentRequest.deserialize(bytes);
        }
    }
    export class UpdateBulkContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            responses?: UpdateContentResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("responses" in data && data.responses != undefined) {
                    this.responses = data.responses;
                }
            }
        }
        get responses() {
            return pb_1.Message.getRepeatedWrapperField(this, UpdateContentResponse, 1) as UpdateContentResponse[];
        }
        set responses(value: UpdateContentResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            responses?: ReturnType<typeof UpdateContentResponse.prototype.toObject>[];
        }): UpdateBulkContentResponse {
            const message = new UpdateBulkContentResponse({});
            if (data.responses != null) {
                message.responses = data.responses.map(item => UpdateContentResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                responses?: ReturnType<typeof UpdateContentResponse.prototype.toObject>[];
            } = {};
            if (this.responses != null) {
                data.responses = this.responses.map((item: UpdateContentResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.responses.length)
                writer.writeRepeatedMessage(1, this.responses, (item: UpdateContentResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateBulkContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateBulkContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UpdateContentResponse.deserialize(reader), UpdateContentResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateBulkContentResponse {
            return UpdateBulkContentResponse.deserialize(bytes);
        }
    }
    export class DeleteBulkContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: DeleteContentRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, DeleteContentRequest, 1) as DeleteContentRequest[];
        }
        set requests(value: DeleteContentRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof DeleteContentRequest.prototype.toObject>[];
        }): DeleteBulkContentRequest {
            const message = new DeleteBulkContentRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => DeleteContentRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof DeleteContentRequest.prototype.toObject>[];
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: DeleteContentRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: DeleteContentRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteBulkContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteBulkContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DeleteContentRequest.deserialize(reader), DeleteContentRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteBulkContentRequest {
            return DeleteBulkContentRequest.deserialize(bytes);
        }
    }
    export class DeleteBulkContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            responses?: DeleteContentResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("responses" in data && data.responses != undefined) {
                    this.responses = data.responses;
                }
            }
        }
        get responses() {
            return pb_1.Message.getRepeatedWrapperField(this, DeleteContentResponse, 1) as DeleteContentResponse[];
        }
        set responses(value: DeleteContentResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            responses?: ReturnType<typeof DeleteContentResponse.prototype.toObject>[];
        }): DeleteBulkContentResponse {
            const message = new DeleteBulkContentResponse({});
            if (data.responses != null) {
                message.responses = data.responses.map(item => DeleteContentResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                responses?: ReturnType<typeof DeleteContentResponse.prototype.toObject>[];
            } = {};
            if (this.responses != null) {
                data.responses = this.responses.map((item: DeleteContentResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.responses.length)
                writer.writeRepeatedMessage(1, this.responses, (item: DeleteContentResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteBulkContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteBulkContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DeleteContentResponse.deserialize(reader), DeleteContentResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteBulkContentResponse {
            return DeleteBulkContentResponse.deserialize(bytes);
        }
    }
    export class CreateContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: dependency_1.common.DataSourceEnumDTO;
            contentBody?: ContentBodyDTO;
            entityName?: string;
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("contentBody" in data && data.contentBody != undefined) {
                    this.contentBody = data.contentBody;
                }
                if ("entityName" in data && data.entityName != undefined) {
                    this.entityName = data.entityName;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD) as dependency_1.common.DataSourceEnumDTO;
        }
        set source(value: dependency_1.common.DataSourceEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get contentBody() {
            return pb_1.Message.getWrapperField(this, ContentBodyDTO, 2) as ContentBodyDTO;
        }
        set contentBody(value: ContentBodyDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_contentBody() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get entityName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set entityName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 4) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            source?: dependency_1.common.DataSourceEnumDTO;
            contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
            entityName?: string;
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): CreateContentRequest {
            const message = new CreateContentRequest({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.contentBody != null) {
                message.contentBody = ContentBodyDTO.fromObject(data.contentBody);
            }
            if (data.entityName != null) {
                message.entityName = data.entityName;
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: dependency_1.common.DataSourceEnumDTO;
                contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
                entityName?: string;
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.contentBody != null) {
                data.contentBody = this.contentBody.toObject();
            }
            if (this.entityName != null) {
                data.entityName = this.entityName;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source != dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD)
                writer.writeEnum(1, this.source);
            if (this.has_contentBody)
                writer.writeMessage(2, this.contentBody, () => this.contentBody.serialize(writer));
            if (this.entityName.length)
                writer.writeString(3, this.entityName);
            if (this.has_context)
                writer.writeMessage(4, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.contentBody, () => message.contentBody = ContentBodyDTO.deserialize(reader));
                        break;
                    case 3:
                        message.entityName = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateContentRequest {
            return CreateContentRequest.deserialize(bytes);
        }
    }
    export class CreateContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contentBody?: ContentBodyDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contentBody" in data && data.contentBody != undefined) {
                    this.contentBody = data.contentBody;
                }
            }
        }
        get contentBody() {
            return pb_1.Message.getWrapperField(this, ContentBodyDTO, 1) as ContentBodyDTO;
        }
        set contentBody(value: ContentBodyDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_contentBody() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
        }): CreateContentResponse {
            const message = new CreateContentResponse({});
            if (data.contentBody != null) {
                message.contentBody = ContentBodyDTO.fromObject(data.contentBody);
            }
            return message;
        }
        toObject() {
            const data: {
                contentBody?: ReturnType<typeof ContentBodyDTO.prototype.toObject>;
            } = {};
            if (this.contentBody != null) {
                data.contentBody = this.contentBody.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contentBody)
                writer.writeMessage(1, this.contentBody, () => this.contentBody.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contentBody, () => message.contentBody = ContentBodyDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateContentResponse {
            return CreateContentResponse.deserialize(bytes);
        }
    }
    export class ContentBodyDTO extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]];
        constructor(data?: any[] | ({} & (({
            Item?: dependency_1.common.ItemDTO;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: dependency_1.common.PastExperienceDTO;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: dependency_1.common.CharacterMemoryDTO;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: dependency_1.common.MemoryDTO;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: dependency_1.common.MemoryPoolDTO;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: dependency_1.common.MemoryPoolEntryDTO;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: dependency_1.common.SkillDTO;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: dependency_1.common.SkillSetDTO;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: dependency_1.common.EquipmentSlotDTO;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: dependency_1.common.StorageSlotDTO;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: dependency_1.common.TraitDTO;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: dependency_1.common.AddictionDTO;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: dependency_1.common.BackgroundDTO;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: dependency_1.common.BirthsignDTO;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: dependency_1.common.CharacterDTO;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: dependency_1.common.CharacterGenInstructionDTO;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: dependency_1.common.CharacterGroupGenInstructionDTO;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: dependency_1.common.CharacterProfessionDTO;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: dependency_1.common.DiseaseDTO;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: dependency_1.common.EffectDTO;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: dependency_1.common.FactDTO;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: dependency_1.common.FactionDTO;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: dependency_1.common.ItemSetDTO;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: dependency_1.common.MoodDTO;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: dependency_1.common.NeedDTO;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: dependency_1.common.PersonalityProfileDTO;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: dependency_1.common.RaceDTO;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: dependency_1.common.ReligionDTO;
            Resistance?: never;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: dependency_1.common.ResistanceDTO;
            Status?: never;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: dependency_1.common.StatusDTO;
            Tag?: never;
        } | {
            Item?: never;
            PastExperience?: never;
            CharacterMemory?: never;
            Memory?: never;
            MemoryPool?: never;
            MemoryPoolEntry?: never;
            Skill?: never;
            SkillSet?: never;
            EquipmentSlot?: never;
            StorageSlot?: never;
            Trait?: never;
            Addiction?: never;
            Background?: never;
            Birthsign?: never;
            Character?: never;
            CharacterGenInstruction?: never;
            CharacterGroupGenInstruction?: never;
            CharacterProfession?: never;
            Disease?: never;
            Effect?: never;
            Fact?: never;
            Faction?: never;
            ItemSet?: never;
            Mood?: never;
            Need?: never;
            PersonalityProfile?: never;
            Race?: never;
            Religion?: never;
            Resistance?: never;
            Status?: never;
            Tag?: dependency_1.common.TagDTO;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Item" in data && data.Item != undefined) {
                    this.Item = data.Item;
                }
                if ("PastExperience" in data && data.PastExperience != undefined) {
                    this.PastExperience = data.PastExperience;
                }
                if ("CharacterMemory" in data && data.CharacterMemory != undefined) {
                    this.CharacterMemory = data.CharacterMemory;
                }
                if ("Memory" in data && data.Memory != undefined) {
                    this.Memory = data.Memory;
                }
                if ("MemoryPool" in data && data.MemoryPool != undefined) {
                    this.MemoryPool = data.MemoryPool;
                }
                if ("MemoryPoolEntry" in data && data.MemoryPoolEntry != undefined) {
                    this.MemoryPoolEntry = data.MemoryPoolEntry;
                }
                if ("Skill" in data && data.Skill != undefined) {
                    this.Skill = data.Skill;
                }
                if ("SkillSet" in data && data.SkillSet != undefined) {
                    this.SkillSet = data.SkillSet;
                }
                if ("EquipmentSlot" in data && data.EquipmentSlot != undefined) {
                    this.EquipmentSlot = data.EquipmentSlot;
                }
                if ("StorageSlot" in data && data.StorageSlot != undefined) {
                    this.StorageSlot = data.StorageSlot;
                }
                if ("Trait" in data && data.Trait != undefined) {
                    this.Trait = data.Trait;
                }
                if ("Addiction" in data && data.Addiction != undefined) {
                    this.Addiction = data.Addiction;
                }
                if ("Background" in data && data.Background != undefined) {
                    this.Background = data.Background;
                }
                if ("Birthsign" in data && data.Birthsign != undefined) {
                    this.Birthsign = data.Birthsign;
                }
                if ("Character" in data && data.Character != undefined) {
                    this.Character = data.Character;
                }
                if ("CharacterGenInstruction" in data && data.CharacterGenInstruction != undefined) {
                    this.CharacterGenInstruction = data.CharacterGenInstruction;
                }
                if ("CharacterGroupGenInstruction" in data && data.CharacterGroupGenInstruction != undefined) {
                    this.CharacterGroupGenInstruction = data.CharacterGroupGenInstruction;
                }
                if ("CharacterProfession" in data && data.CharacterProfession != undefined) {
                    this.CharacterProfession = data.CharacterProfession;
                }
                if ("Disease" in data && data.Disease != undefined) {
                    this.Disease = data.Disease;
                }
                if ("Effect" in data && data.Effect != undefined) {
                    this.Effect = data.Effect;
                }
                if ("Fact" in data && data.Fact != undefined) {
                    this.Fact = data.Fact;
                }
                if ("Faction" in data && data.Faction != undefined) {
                    this.Faction = data.Faction;
                }
                if ("ItemSet" in data && data.ItemSet != undefined) {
                    this.ItemSet = data.ItemSet;
                }
                if ("Mood" in data && data.Mood != undefined) {
                    this.Mood = data.Mood;
                }
                if ("Need" in data && data.Need != undefined) {
                    this.Need = data.Need;
                }
                if ("PersonalityProfile" in data && data.PersonalityProfile != undefined) {
                    this.PersonalityProfile = data.PersonalityProfile;
                }
                if ("Race" in data && data.Race != undefined) {
                    this.Race = data.Race;
                }
                if ("Religion" in data && data.Religion != undefined) {
                    this.Religion = data.Religion;
                }
                if ("Resistance" in data && data.Resistance != undefined) {
                    this.Resistance = data.Resistance;
                }
                if ("Status" in data && data.Status != undefined) {
                    this.Status = data.Status;
                }
                if ("Tag" in data && data.Tag != undefined) {
                    this.Tag = data.Tag;
                }
            }
        }
        get Item() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ItemDTO, 1) as dependency_1.common.ItemDTO;
        }
        set Item(value: dependency_1.common.ItemDTO) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_Item() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get PastExperience() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.PastExperienceDTO, 2) as dependency_1.common.PastExperienceDTO;
        }
        set PastExperience(value: dependency_1.common.PastExperienceDTO) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_PastExperience() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get CharacterMemory() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.CharacterMemoryDTO, 3) as dependency_1.common.CharacterMemoryDTO;
        }
        set CharacterMemory(value: dependency_1.common.CharacterMemoryDTO) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_CharacterMemory() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Memory() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.MemoryDTO, 4) as dependency_1.common.MemoryDTO;
        }
        set Memory(value: dependency_1.common.MemoryDTO) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_Memory() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get MemoryPool() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.MemoryPoolDTO, 5) as dependency_1.common.MemoryPoolDTO;
        }
        set MemoryPool(value: dependency_1.common.MemoryPoolDTO) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_MemoryPool() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get MemoryPoolEntry() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.MemoryPoolEntryDTO, 6) as dependency_1.common.MemoryPoolEntryDTO;
        }
        set MemoryPoolEntry(value: dependency_1.common.MemoryPoolEntryDTO) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_MemoryPoolEntry() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get Skill() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SkillDTO, 7) as dependency_1.common.SkillDTO;
        }
        set Skill(value: dependency_1.common.SkillDTO) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_Skill() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get SkillSet() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SkillSetDTO, 8) as dependency_1.common.SkillSetDTO;
        }
        set SkillSet(value: dependency_1.common.SkillSetDTO) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_SkillSet() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get EquipmentSlot() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.EquipmentSlotDTO, 9) as dependency_1.common.EquipmentSlotDTO;
        }
        set EquipmentSlot(value: dependency_1.common.EquipmentSlotDTO) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_EquipmentSlot() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get StorageSlot() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.StorageSlotDTO, 10) as dependency_1.common.StorageSlotDTO;
        }
        set StorageSlot(value: dependency_1.common.StorageSlotDTO) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_StorageSlot() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get Trait() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.TraitDTO, 11) as dependency_1.common.TraitDTO;
        }
        set Trait(value: dependency_1.common.TraitDTO) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_Trait() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get Addiction() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AddictionDTO, 12) as dependency_1.common.AddictionDTO;
        }
        set Addiction(value: dependency_1.common.AddictionDTO) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_Addiction() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get Background() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.BackgroundDTO, 13) as dependency_1.common.BackgroundDTO;
        }
        set Background(value: dependency_1.common.BackgroundDTO) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_Background() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get Birthsign() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.BirthsignDTO, 14) as dependency_1.common.BirthsignDTO;
        }
        set Birthsign(value: dependency_1.common.BirthsignDTO) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_Birthsign() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get Character() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.CharacterDTO, 15) as dependency_1.common.CharacterDTO;
        }
        set Character(value: dependency_1.common.CharacterDTO) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_Character() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get CharacterGenInstruction() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.CharacterGenInstructionDTO, 16) as dependency_1.common.CharacterGenInstructionDTO;
        }
        set CharacterGenInstruction(value: dependency_1.common.CharacterGenInstructionDTO) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_CharacterGenInstruction() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get CharacterGroupGenInstruction() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.CharacterGroupGenInstructionDTO, 17) as dependency_1.common.CharacterGroupGenInstructionDTO;
        }
        set CharacterGroupGenInstruction(value: dependency_1.common.CharacterGroupGenInstructionDTO) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_CharacterGroupGenInstruction() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get CharacterProfession() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.CharacterProfessionDTO, 18) as dependency_1.common.CharacterProfessionDTO;
        }
        set CharacterProfession(value: dependency_1.common.CharacterProfessionDTO) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_CharacterProfession() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get Disease() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.DiseaseDTO, 19) as dependency_1.common.DiseaseDTO;
        }
        set Disease(value: dependency_1.common.DiseaseDTO) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_Disease() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get Effect() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.EffectDTO, 20) as dependency_1.common.EffectDTO;
        }
        set Effect(value: dependency_1.common.EffectDTO) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_Effect() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get Fact() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.FactDTO, 21) as dependency_1.common.FactDTO;
        }
        set Fact(value: dependency_1.common.FactDTO) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_Fact() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get Faction() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.FactionDTO, 22) as dependency_1.common.FactionDTO;
        }
        set Faction(value: dependency_1.common.FactionDTO) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_Faction() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get ItemSet() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ItemSetDTO, 23) as dependency_1.common.ItemSetDTO;
        }
        set ItemSet(value: dependency_1.common.ItemSetDTO) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_ItemSet() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get Mood() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.MoodDTO, 24) as dependency_1.common.MoodDTO;
        }
        set Mood(value: dependency_1.common.MoodDTO) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_Mood() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get Need() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.NeedDTO, 25) as dependency_1.common.NeedDTO;
        }
        set Need(value: dependency_1.common.NeedDTO) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_Need() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get PersonalityProfile() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.PersonalityProfileDTO, 26) as dependency_1.common.PersonalityProfileDTO;
        }
        set PersonalityProfile(value: dependency_1.common.PersonalityProfileDTO) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_PersonalityProfile() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get Race() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.RaceDTO, 27) as dependency_1.common.RaceDTO;
        }
        set Race(value: dependency_1.common.RaceDTO) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_Race() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get Religion() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ReligionDTO, 28) as dependency_1.common.ReligionDTO;
        }
        set Religion(value: dependency_1.common.ReligionDTO) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_Religion() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get Resistance() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ResistanceDTO, 29) as dependency_1.common.ResistanceDTO;
        }
        set Resistance(value: dependency_1.common.ResistanceDTO) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_Resistance() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get Status() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.StatusDTO, 30) as dependency_1.common.StatusDTO;
        }
        set Status(value: dependency_1.common.StatusDTO) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_Status() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get Tag() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.TagDTO, 31) as dependency_1.common.TagDTO;
        }
        set Tag(value: dependency_1.common.TagDTO) {
            pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[0], value);
        }
        get has_Tag() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get data() {
            const cases: {
                [index: number]: "none" | "Item" | "PastExperience" | "CharacterMemory" | "Memory" | "MemoryPool" | "MemoryPoolEntry" | "Skill" | "SkillSet" | "EquipmentSlot" | "StorageSlot" | "Trait" | "Addiction" | "Background" | "Birthsign" | "Character" | "CharacterGenInstruction" | "CharacterGroupGenInstruction" | "CharacterProfession" | "Disease" | "Effect" | "Fact" | "Faction" | "ItemSet" | "Mood" | "Need" | "PersonalityProfile" | "Race" | "Religion" | "Resistance" | "Status" | "Tag";
            } = {
                0: "none",
                1: "Item",
                2: "PastExperience",
                3: "CharacterMemory",
                4: "Memory",
                5: "MemoryPool",
                6: "MemoryPoolEntry",
                7: "Skill",
                8: "SkillSet",
                9: "EquipmentSlot",
                10: "StorageSlot",
                11: "Trait",
                12: "Addiction",
                13: "Background",
                14: "Birthsign",
                15: "Character",
                16: "CharacterGenInstruction",
                17: "CharacterGroupGenInstruction",
                18: "CharacterProfession",
                19: "Disease",
                20: "Effect",
                21: "Fact",
                22: "Faction",
                23: "ItemSet",
                24: "Mood",
                25: "Need",
                26: "PersonalityProfile",
                27: "Race",
                28: "Religion",
                29: "Resistance",
                30: "Status",
                31: "Tag"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])];
        }
        static fromObject(data: {
            Item?: ReturnType<typeof dependency_1.common.ItemDTO.prototype.toObject>;
            PastExperience?: ReturnType<typeof dependency_1.common.PastExperienceDTO.prototype.toObject>;
            CharacterMemory?: ReturnType<typeof dependency_1.common.CharacterMemoryDTO.prototype.toObject>;
            Memory?: ReturnType<typeof dependency_1.common.MemoryDTO.prototype.toObject>;
            MemoryPool?: ReturnType<typeof dependency_1.common.MemoryPoolDTO.prototype.toObject>;
            MemoryPoolEntry?: ReturnType<typeof dependency_1.common.MemoryPoolEntryDTO.prototype.toObject>;
            Skill?: ReturnType<typeof dependency_1.common.SkillDTO.prototype.toObject>;
            SkillSet?: ReturnType<typeof dependency_1.common.SkillSetDTO.prototype.toObject>;
            EquipmentSlot?: ReturnType<typeof dependency_1.common.EquipmentSlotDTO.prototype.toObject>;
            StorageSlot?: ReturnType<typeof dependency_1.common.StorageSlotDTO.prototype.toObject>;
            Trait?: ReturnType<typeof dependency_1.common.TraitDTO.prototype.toObject>;
            Addiction?: ReturnType<typeof dependency_1.common.AddictionDTO.prototype.toObject>;
            Background?: ReturnType<typeof dependency_1.common.BackgroundDTO.prototype.toObject>;
            Birthsign?: ReturnType<typeof dependency_1.common.BirthsignDTO.prototype.toObject>;
            Character?: ReturnType<typeof dependency_1.common.CharacterDTO.prototype.toObject>;
            CharacterGenInstruction?: ReturnType<typeof dependency_1.common.CharacterGenInstructionDTO.prototype.toObject>;
            CharacterGroupGenInstruction?: ReturnType<typeof dependency_1.common.CharacterGroupGenInstructionDTO.prototype.toObject>;
            CharacterProfession?: ReturnType<typeof dependency_1.common.CharacterProfessionDTO.prototype.toObject>;
            Disease?: ReturnType<typeof dependency_1.common.DiseaseDTO.prototype.toObject>;
            Effect?: ReturnType<typeof dependency_1.common.EffectDTO.prototype.toObject>;
            Fact?: ReturnType<typeof dependency_1.common.FactDTO.prototype.toObject>;
            Faction?: ReturnType<typeof dependency_1.common.FactionDTO.prototype.toObject>;
            ItemSet?: ReturnType<typeof dependency_1.common.ItemSetDTO.prototype.toObject>;
            Mood?: ReturnType<typeof dependency_1.common.MoodDTO.prototype.toObject>;
            Need?: ReturnType<typeof dependency_1.common.NeedDTO.prototype.toObject>;
            PersonalityProfile?: ReturnType<typeof dependency_1.common.PersonalityProfileDTO.prototype.toObject>;
            Race?: ReturnType<typeof dependency_1.common.RaceDTO.prototype.toObject>;
            Religion?: ReturnType<typeof dependency_1.common.ReligionDTO.prototype.toObject>;
            Resistance?: ReturnType<typeof dependency_1.common.ResistanceDTO.prototype.toObject>;
            Status?: ReturnType<typeof dependency_1.common.StatusDTO.prototype.toObject>;
            Tag?: ReturnType<typeof dependency_1.common.TagDTO.prototype.toObject>;
        }): ContentBodyDTO {
            const message = new ContentBodyDTO({});
            if (data.Item != null) {
                message.Item = dependency_1.common.ItemDTO.fromObject(data.Item);
            }
            if (data.PastExperience != null) {
                message.PastExperience = dependency_1.common.PastExperienceDTO.fromObject(data.PastExperience);
            }
            if (data.CharacterMemory != null) {
                message.CharacterMemory = dependency_1.common.CharacterMemoryDTO.fromObject(data.CharacterMemory);
            }
            if (data.Memory != null) {
                message.Memory = dependency_1.common.MemoryDTO.fromObject(data.Memory);
            }
            if (data.MemoryPool != null) {
                message.MemoryPool = dependency_1.common.MemoryPoolDTO.fromObject(data.MemoryPool);
            }
            if (data.MemoryPoolEntry != null) {
                message.MemoryPoolEntry = dependency_1.common.MemoryPoolEntryDTO.fromObject(data.MemoryPoolEntry);
            }
            if (data.Skill != null) {
                message.Skill = dependency_1.common.SkillDTO.fromObject(data.Skill);
            }
            if (data.SkillSet != null) {
                message.SkillSet = dependency_1.common.SkillSetDTO.fromObject(data.SkillSet);
            }
            if (data.EquipmentSlot != null) {
                message.EquipmentSlot = dependency_1.common.EquipmentSlotDTO.fromObject(data.EquipmentSlot);
            }
            if (data.StorageSlot != null) {
                message.StorageSlot = dependency_1.common.StorageSlotDTO.fromObject(data.StorageSlot);
            }
            if (data.Trait != null) {
                message.Trait = dependency_1.common.TraitDTO.fromObject(data.Trait);
            }
            if (data.Addiction != null) {
                message.Addiction = dependency_1.common.AddictionDTO.fromObject(data.Addiction);
            }
            if (data.Background != null) {
                message.Background = dependency_1.common.BackgroundDTO.fromObject(data.Background);
            }
            if (data.Birthsign != null) {
                message.Birthsign = dependency_1.common.BirthsignDTO.fromObject(data.Birthsign);
            }
            if (data.Character != null) {
                message.Character = dependency_1.common.CharacterDTO.fromObject(data.Character);
            }
            if (data.CharacterGenInstruction != null) {
                message.CharacterGenInstruction = dependency_1.common.CharacterGenInstructionDTO.fromObject(data.CharacterGenInstruction);
            }
            if (data.CharacterGroupGenInstruction != null) {
                message.CharacterGroupGenInstruction = dependency_1.common.CharacterGroupGenInstructionDTO.fromObject(data.CharacterGroupGenInstruction);
            }
            if (data.CharacterProfession != null) {
                message.CharacterProfession = dependency_1.common.CharacterProfessionDTO.fromObject(data.CharacterProfession);
            }
            if (data.Disease != null) {
                message.Disease = dependency_1.common.DiseaseDTO.fromObject(data.Disease);
            }
            if (data.Effect != null) {
                message.Effect = dependency_1.common.EffectDTO.fromObject(data.Effect);
            }
            if (data.Fact != null) {
                message.Fact = dependency_1.common.FactDTO.fromObject(data.Fact);
            }
            if (data.Faction != null) {
                message.Faction = dependency_1.common.FactionDTO.fromObject(data.Faction);
            }
            if (data.ItemSet != null) {
                message.ItemSet = dependency_1.common.ItemSetDTO.fromObject(data.ItemSet);
            }
            if (data.Mood != null) {
                message.Mood = dependency_1.common.MoodDTO.fromObject(data.Mood);
            }
            if (data.Need != null) {
                message.Need = dependency_1.common.NeedDTO.fromObject(data.Need);
            }
            if (data.PersonalityProfile != null) {
                message.PersonalityProfile = dependency_1.common.PersonalityProfileDTO.fromObject(data.PersonalityProfile);
            }
            if (data.Race != null) {
                message.Race = dependency_1.common.RaceDTO.fromObject(data.Race);
            }
            if (data.Religion != null) {
                message.Religion = dependency_1.common.ReligionDTO.fromObject(data.Religion);
            }
            if (data.Resistance != null) {
                message.Resistance = dependency_1.common.ResistanceDTO.fromObject(data.Resistance);
            }
            if (data.Status != null) {
                message.Status = dependency_1.common.StatusDTO.fromObject(data.Status);
            }
            if (data.Tag != null) {
                message.Tag = dependency_1.common.TagDTO.fromObject(data.Tag);
            }
            return message;
        }
        toObject() {
            const data: {
                Item?: ReturnType<typeof dependency_1.common.ItemDTO.prototype.toObject>;
                PastExperience?: ReturnType<typeof dependency_1.common.PastExperienceDTO.prototype.toObject>;
                CharacterMemory?: ReturnType<typeof dependency_1.common.CharacterMemoryDTO.prototype.toObject>;
                Memory?: ReturnType<typeof dependency_1.common.MemoryDTO.prototype.toObject>;
                MemoryPool?: ReturnType<typeof dependency_1.common.MemoryPoolDTO.prototype.toObject>;
                MemoryPoolEntry?: ReturnType<typeof dependency_1.common.MemoryPoolEntryDTO.prototype.toObject>;
                Skill?: ReturnType<typeof dependency_1.common.SkillDTO.prototype.toObject>;
                SkillSet?: ReturnType<typeof dependency_1.common.SkillSetDTO.prototype.toObject>;
                EquipmentSlot?: ReturnType<typeof dependency_1.common.EquipmentSlotDTO.prototype.toObject>;
                StorageSlot?: ReturnType<typeof dependency_1.common.StorageSlotDTO.prototype.toObject>;
                Trait?: ReturnType<typeof dependency_1.common.TraitDTO.prototype.toObject>;
                Addiction?: ReturnType<typeof dependency_1.common.AddictionDTO.prototype.toObject>;
                Background?: ReturnType<typeof dependency_1.common.BackgroundDTO.prototype.toObject>;
                Birthsign?: ReturnType<typeof dependency_1.common.BirthsignDTO.prototype.toObject>;
                Character?: ReturnType<typeof dependency_1.common.CharacterDTO.prototype.toObject>;
                CharacterGenInstruction?: ReturnType<typeof dependency_1.common.CharacterGenInstructionDTO.prototype.toObject>;
                CharacterGroupGenInstruction?: ReturnType<typeof dependency_1.common.CharacterGroupGenInstructionDTO.prototype.toObject>;
                CharacterProfession?: ReturnType<typeof dependency_1.common.CharacterProfessionDTO.prototype.toObject>;
                Disease?: ReturnType<typeof dependency_1.common.DiseaseDTO.prototype.toObject>;
                Effect?: ReturnType<typeof dependency_1.common.EffectDTO.prototype.toObject>;
                Fact?: ReturnType<typeof dependency_1.common.FactDTO.prototype.toObject>;
                Faction?: ReturnType<typeof dependency_1.common.FactionDTO.prototype.toObject>;
                ItemSet?: ReturnType<typeof dependency_1.common.ItemSetDTO.prototype.toObject>;
                Mood?: ReturnType<typeof dependency_1.common.MoodDTO.prototype.toObject>;
                Need?: ReturnType<typeof dependency_1.common.NeedDTO.prototype.toObject>;
                PersonalityProfile?: ReturnType<typeof dependency_1.common.PersonalityProfileDTO.prototype.toObject>;
                Race?: ReturnType<typeof dependency_1.common.RaceDTO.prototype.toObject>;
                Religion?: ReturnType<typeof dependency_1.common.ReligionDTO.prototype.toObject>;
                Resistance?: ReturnType<typeof dependency_1.common.ResistanceDTO.prototype.toObject>;
                Status?: ReturnType<typeof dependency_1.common.StatusDTO.prototype.toObject>;
                Tag?: ReturnType<typeof dependency_1.common.TagDTO.prototype.toObject>;
            } = {};
            if (this.Item != null) {
                data.Item = this.Item.toObject();
            }
            if (this.PastExperience != null) {
                data.PastExperience = this.PastExperience.toObject();
            }
            if (this.CharacterMemory != null) {
                data.CharacterMemory = this.CharacterMemory.toObject();
            }
            if (this.Memory != null) {
                data.Memory = this.Memory.toObject();
            }
            if (this.MemoryPool != null) {
                data.MemoryPool = this.MemoryPool.toObject();
            }
            if (this.MemoryPoolEntry != null) {
                data.MemoryPoolEntry = this.MemoryPoolEntry.toObject();
            }
            if (this.Skill != null) {
                data.Skill = this.Skill.toObject();
            }
            if (this.SkillSet != null) {
                data.SkillSet = this.SkillSet.toObject();
            }
            if (this.EquipmentSlot != null) {
                data.EquipmentSlot = this.EquipmentSlot.toObject();
            }
            if (this.StorageSlot != null) {
                data.StorageSlot = this.StorageSlot.toObject();
            }
            if (this.Trait != null) {
                data.Trait = this.Trait.toObject();
            }
            if (this.Addiction != null) {
                data.Addiction = this.Addiction.toObject();
            }
            if (this.Background != null) {
                data.Background = this.Background.toObject();
            }
            if (this.Birthsign != null) {
                data.Birthsign = this.Birthsign.toObject();
            }
            if (this.Character != null) {
                data.Character = this.Character.toObject();
            }
            if (this.CharacterGenInstruction != null) {
                data.CharacterGenInstruction = this.CharacterGenInstruction.toObject();
            }
            if (this.CharacterGroupGenInstruction != null) {
                data.CharacterGroupGenInstruction = this.CharacterGroupGenInstruction.toObject();
            }
            if (this.CharacterProfession != null) {
                data.CharacterProfession = this.CharacterProfession.toObject();
            }
            if (this.Disease != null) {
                data.Disease = this.Disease.toObject();
            }
            if (this.Effect != null) {
                data.Effect = this.Effect.toObject();
            }
            if (this.Fact != null) {
                data.Fact = this.Fact.toObject();
            }
            if (this.Faction != null) {
                data.Faction = this.Faction.toObject();
            }
            if (this.ItemSet != null) {
                data.ItemSet = this.ItemSet.toObject();
            }
            if (this.Mood != null) {
                data.Mood = this.Mood.toObject();
            }
            if (this.Need != null) {
                data.Need = this.Need.toObject();
            }
            if (this.PersonalityProfile != null) {
                data.PersonalityProfile = this.PersonalityProfile.toObject();
            }
            if (this.Race != null) {
                data.Race = this.Race.toObject();
            }
            if (this.Religion != null) {
                data.Religion = this.Religion.toObject();
            }
            if (this.Resistance != null) {
                data.Resistance = this.Resistance.toObject();
            }
            if (this.Status != null) {
                data.Status = this.Status.toObject();
            }
            if (this.Tag != null) {
                data.Tag = this.Tag.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Item)
                writer.writeMessage(1, this.Item, () => this.Item.serialize(writer));
            if (this.has_PastExperience)
                writer.writeMessage(2, this.PastExperience, () => this.PastExperience.serialize(writer));
            if (this.has_CharacterMemory)
                writer.writeMessage(3, this.CharacterMemory, () => this.CharacterMemory.serialize(writer));
            if (this.has_Memory)
                writer.writeMessage(4, this.Memory, () => this.Memory.serialize(writer));
            if (this.has_MemoryPool)
                writer.writeMessage(5, this.MemoryPool, () => this.MemoryPool.serialize(writer));
            if (this.has_MemoryPoolEntry)
                writer.writeMessage(6, this.MemoryPoolEntry, () => this.MemoryPoolEntry.serialize(writer));
            if (this.has_Skill)
                writer.writeMessage(7, this.Skill, () => this.Skill.serialize(writer));
            if (this.has_SkillSet)
                writer.writeMessage(8, this.SkillSet, () => this.SkillSet.serialize(writer));
            if (this.has_EquipmentSlot)
                writer.writeMessage(9, this.EquipmentSlot, () => this.EquipmentSlot.serialize(writer));
            if (this.has_StorageSlot)
                writer.writeMessage(10, this.StorageSlot, () => this.StorageSlot.serialize(writer));
            if (this.has_Trait)
                writer.writeMessage(11, this.Trait, () => this.Trait.serialize(writer));
            if (this.has_Addiction)
                writer.writeMessage(12, this.Addiction, () => this.Addiction.serialize(writer));
            if (this.has_Background)
                writer.writeMessage(13, this.Background, () => this.Background.serialize(writer));
            if (this.has_Birthsign)
                writer.writeMessage(14, this.Birthsign, () => this.Birthsign.serialize(writer));
            if (this.has_Character)
                writer.writeMessage(15, this.Character, () => this.Character.serialize(writer));
            if (this.has_CharacterGenInstruction)
                writer.writeMessage(16, this.CharacterGenInstruction, () => this.CharacterGenInstruction.serialize(writer));
            if (this.has_CharacterGroupGenInstruction)
                writer.writeMessage(17, this.CharacterGroupGenInstruction, () => this.CharacterGroupGenInstruction.serialize(writer));
            if (this.has_CharacterProfession)
                writer.writeMessage(18, this.CharacterProfession, () => this.CharacterProfession.serialize(writer));
            if (this.has_Disease)
                writer.writeMessage(19, this.Disease, () => this.Disease.serialize(writer));
            if (this.has_Effect)
                writer.writeMessage(20, this.Effect, () => this.Effect.serialize(writer));
            if (this.has_Fact)
                writer.writeMessage(21, this.Fact, () => this.Fact.serialize(writer));
            if (this.has_Faction)
                writer.writeMessage(22, this.Faction, () => this.Faction.serialize(writer));
            if (this.has_ItemSet)
                writer.writeMessage(23, this.ItemSet, () => this.ItemSet.serialize(writer));
            if (this.has_Mood)
                writer.writeMessage(24, this.Mood, () => this.Mood.serialize(writer));
            if (this.has_Need)
                writer.writeMessage(25, this.Need, () => this.Need.serialize(writer));
            if (this.has_PersonalityProfile)
                writer.writeMessage(26, this.PersonalityProfile, () => this.PersonalityProfile.serialize(writer));
            if (this.has_Race)
                writer.writeMessage(27, this.Race, () => this.Race.serialize(writer));
            if (this.has_Religion)
                writer.writeMessage(28, this.Religion, () => this.Religion.serialize(writer));
            if (this.has_Resistance)
                writer.writeMessage(29, this.Resistance, () => this.Resistance.serialize(writer));
            if (this.has_Status)
                writer.writeMessage(30, this.Status, () => this.Status.serialize(writer));
            if (this.has_Tag)
                writer.writeMessage(31, this.Tag, () => this.Tag.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentBodyDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentBodyDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Item, () => message.Item = dependency_1.common.ItemDTO.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.PastExperience, () => message.PastExperience = dependency_1.common.PastExperienceDTO.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.CharacterMemory, () => message.CharacterMemory = dependency_1.common.CharacterMemoryDTO.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.Memory, () => message.Memory = dependency_1.common.MemoryDTO.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.MemoryPool, () => message.MemoryPool = dependency_1.common.MemoryPoolDTO.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.MemoryPoolEntry, () => message.MemoryPoolEntry = dependency_1.common.MemoryPoolEntryDTO.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.Skill, () => message.Skill = dependency_1.common.SkillDTO.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.SkillSet, () => message.SkillSet = dependency_1.common.SkillSetDTO.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.EquipmentSlot, () => message.EquipmentSlot = dependency_1.common.EquipmentSlotDTO.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.StorageSlot, () => message.StorageSlot = dependency_1.common.StorageSlotDTO.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.Trait, () => message.Trait = dependency_1.common.TraitDTO.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.Addiction, () => message.Addiction = dependency_1.common.AddictionDTO.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.Background, () => message.Background = dependency_1.common.BackgroundDTO.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.Birthsign, () => message.Birthsign = dependency_1.common.BirthsignDTO.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.Character, () => message.Character = dependency_1.common.CharacterDTO.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.CharacterGenInstruction, () => message.CharacterGenInstruction = dependency_1.common.CharacterGenInstructionDTO.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.CharacterGroupGenInstruction, () => message.CharacterGroupGenInstruction = dependency_1.common.CharacterGroupGenInstructionDTO.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.CharacterProfession, () => message.CharacterProfession = dependency_1.common.CharacterProfessionDTO.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.Disease, () => message.Disease = dependency_1.common.DiseaseDTO.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.Effect, () => message.Effect = dependency_1.common.EffectDTO.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.Fact, () => message.Fact = dependency_1.common.FactDTO.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.Faction, () => message.Faction = dependency_1.common.FactionDTO.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.ItemSet, () => message.ItemSet = dependency_1.common.ItemSetDTO.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.Mood, () => message.Mood = dependency_1.common.MoodDTO.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.Need, () => message.Need = dependency_1.common.NeedDTO.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.PersonalityProfile, () => message.PersonalityProfile = dependency_1.common.PersonalityProfileDTO.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.Race, () => message.Race = dependency_1.common.RaceDTO.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.Religion, () => message.Religion = dependency_1.common.ReligionDTO.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.Resistance, () => message.Resistance = dependency_1.common.ResistanceDTO.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.Status, () => message.Status = dependency_1.common.StatusDTO.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.Tag, () => message.Tag = dependency_1.common.TagDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentBodyDTO {
            return ContentBodyDTO.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedContentServiceService {
        static definition = {
            create: {
                path: "/content.ContentService/create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateContentResponse.deserialize(new Uint8Array(bytes))
            },
            update: {
                path: "/content.ContentService/update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateContentResponse.deserialize(new Uint8Array(bytes))
            },
            delete: {
                path: "/content.ContentService/delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteContentResponse.deserialize(new Uint8Array(bytes))
            },
            search: {
                path: "/content.ContentService/search",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchContentResponse.deserialize(new Uint8Array(bytes))
            },
            createBulk: {
                path: "/content.ContentService/createBulk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateBulkContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateBulkContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateBulkContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateBulkContentResponse.deserialize(new Uint8Array(bytes))
            },
            updateBulk: {
                path: "/content.ContentService/updateBulk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateBulkContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateBulkContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateBulkContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateBulkContentResponse.deserialize(new Uint8Array(bytes))
            },
            deleteBulk: {
                path: "/content.ContentService/deleteBulk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteBulkContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteBulkContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteBulkContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteBulkContentResponse.deserialize(new Uint8Array(bytes))
            },
            getStats: {
                path: "/content.ContentService/getStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetContentStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetContentStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetContentStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetContentStatsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract create(call: grpc_1.ServerUnaryCall<CreateContentRequest, CreateContentResponse>, callback: grpc_1.sendUnaryData<CreateContentResponse>): void;
        abstract update(call: grpc_1.ServerUnaryCall<UpdateContentRequest, UpdateContentResponse>, callback: grpc_1.sendUnaryData<UpdateContentResponse>): void;
        abstract delete(call: grpc_1.ServerUnaryCall<DeleteContentRequest, DeleteContentResponse>, callback: grpc_1.sendUnaryData<DeleteContentResponse>): void;
        abstract search(call: grpc_1.ServerUnaryCall<SearchContentRequest, SearchContentResponse>, callback: grpc_1.sendUnaryData<SearchContentResponse>): void;
        abstract createBulk(call: grpc_1.ServerUnaryCall<CreateBulkContentRequest, CreateBulkContentResponse>, callback: grpc_1.sendUnaryData<CreateBulkContentResponse>): void;
        abstract updateBulk(call: grpc_1.ServerUnaryCall<UpdateBulkContentRequest, UpdateBulkContentResponse>, callback: grpc_1.sendUnaryData<UpdateBulkContentResponse>): void;
        abstract deleteBulk(call: grpc_1.ServerUnaryCall<DeleteBulkContentRequest, DeleteBulkContentResponse>, callback: grpc_1.sendUnaryData<DeleteBulkContentResponse>): void;
        abstract getStats(call: grpc_1.ServerUnaryCall<GetContentStatsRequest, GetContentStatsResponse>, callback: grpc_1.sendUnaryData<GetContentStatsResponse>): void;
    }
    export class ContentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedContentServiceService.definition, "ContentService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        create: GrpcUnaryServiceInterface<CreateContentRequest, CreateContentResponse> = (message: CreateContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateContentResponse>, callback?: grpc_1.requestCallback<CreateContentResponse>): grpc_1.ClientUnaryCall => {
            return super.create(message, metadata, options, callback);
        };
        update: GrpcUnaryServiceInterface<UpdateContentRequest, UpdateContentResponse> = (message: UpdateContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateContentResponse>, callback?: grpc_1.requestCallback<UpdateContentResponse>): grpc_1.ClientUnaryCall => {
            return super.update(message, metadata, options, callback);
        };
        delete: GrpcUnaryServiceInterface<DeleteContentRequest, DeleteContentResponse> = (message: DeleteContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteContentResponse>, callback?: grpc_1.requestCallback<DeleteContentResponse>): grpc_1.ClientUnaryCall => {
            return super.delete(message, metadata, options, callback);
        };
        search: GrpcUnaryServiceInterface<SearchContentRequest, SearchContentResponse> = (message: SearchContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchContentResponse>, callback?: grpc_1.requestCallback<SearchContentResponse>): grpc_1.ClientUnaryCall => {
            return super.search(message, metadata, options, callback);
        };
        createBulk: GrpcUnaryServiceInterface<CreateBulkContentRequest, CreateBulkContentResponse> = (message: CreateBulkContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateBulkContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateBulkContentResponse>, callback?: grpc_1.requestCallback<CreateBulkContentResponse>): grpc_1.ClientUnaryCall => {
            return super.createBulk(message, metadata, options, callback);
        };
        updateBulk: GrpcUnaryServiceInterface<UpdateBulkContentRequest, UpdateBulkContentResponse> = (message: UpdateBulkContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateBulkContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateBulkContentResponse>, callback?: grpc_1.requestCallback<UpdateBulkContentResponse>): grpc_1.ClientUnaryCall => {
            return super.updateBulk(message, metadata, options, callback);
        };
        deleteBulk: GrpcUnaryServiceInterface<DeleteBulkContentRequest, DeleteBulkContentResponse> = (message: DeleteBulkContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteBulkContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteBulkContentResponse>, callback?: grpc_1.requestCallback<DeleteBulkContentResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteBulk(message, metadata, options, callback);
        };
        getStats: GrpcUnaryServiceInterface<GetContentStatsRequest, GetContentStatsResponse> = (message: GetContentStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetContentStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetContentStatsResponse>, callback?: grpc_1.requestCallback<GetContentStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.getStats(message, metadata, options, callback);
        };
    }
}
