/**
 * @fileoverview gRPC-Web generated client stub for account
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: account.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as account_pb from './account_pb'; // proto import: "account.proto"


export class AccountServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorcreateAccountAndUser = new grpcWeb.MethodDescriptor(
    '/account.AccountService/createAccountAndUser',
    grpcWeb.MethodType.UNARY,
    account_pb.CreateAccountRequest,
    account_pb.CreateAccountResponse,
    (request: account_pb.CreateAccountRequest) => {
      return request.serializeBinary();
    },
    account_pb.CreateAccountResponse.deserializeBinary
  );

  createAccountAndUser(
    request: account_pb.CreateAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<account_pb.CreateAccountResponse>;

  createAccountAndUser(
    request: account_pb.CreateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: account_pb.CreateAccountResponse) => void): grpcWeb.ClientReadableStream<account_pb.CreateAccountResponse>;

  createAccountAndUser(
    request: account_pb.CreateAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: account_pb.CreateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/account.AccountService/createAccountAndUser',
        request,
        metadata || {},
        this.methodDescriptorcreateAccountAndUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/account.AccountService/createAccountAndUser',
    request,
    metadata || {},
    this.methodDescriptorcreateAccountAndUser);
  }

  methodDescriptorgetAccount = new grpcWeb.MethodDescriptor(
    '/account.AccountService/getAccount',
    grpcWeb.MethodType.UNARY,
    account_pb.GetAccountRequest,
    account_pb.GetAccountResponse,
    (request: account_pb.GetAccountRequest) => {
      return request.serializeBinary();
    },
    account_pb.GetAccountResponse.deserializeBinary
  );

  getAccount(
    request: account_pb.GetAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<account_pb.GetAccountResponse>;

  getAccount(
    request: account_pb.GetAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: account_pb.GetAccountResponse) => void): grpcWeb.ClientReadableStream<account_pb.GetAccountResponse>;

  getAccount(
    request: account_pb.GetAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: account_pb.GetAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/account.AccountService/getAccount',
        request,
        metadata || {},
        this.methodDescriptorgetAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/account.AccountService/getAccount',
    request,
    metadata || {},
    this.methodDescriptorgetAccount);
  }

  methodDescriptorupdateAccount = new grpcWeb.MethodDescriptor(
    '/account.AccountService/updateAccount',
    grpcWeb.MethodType.UNARY,
    account_pb.UpdateAccountRequest,
    account_pb.UpdateAccountResponse,
    (request: account_pb.UpdateAccountRequest) => {
      return request.serializeBinary();
    },
    account_pb.UpdateAccountResponse.deserializeBinary
  );

  updateAccount(
    request: account_pb.UpdateAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<account_pb.UpdateAccountResponse>;

  updateAccount(
    request: account_pb.UpdateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: account_pb.UpdateAccountResponse) => void): grpcWeb.ClientReadableStream<account_pb.UpdateAccountResponse>;

  updateAccount(
    request: account_pb.UpdateAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: account_pb.UpdateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/account.AccountService/updateAccount',
        request,
        metadata || {},
        this.methodDescriptorupdateAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/account.AccountService/updateAccount',
    request,
    metadata || {},
    this.methodDescriptorupdateAccount);
  }

  methodDescriptordeleteAccount = new grpcWeb.MethodDescriptor(
    '/account.AccountService/deleteAccount',
    grpcWeb.MethodType.UNARY,
    account_pb.DeleteAccountRequest,
    account_pb.DeleteAccountResponse,
    (request: account_pb.DeleteAccountRequest) => {
      return request.serializeBinary();
    },
    account_pb.DeleteAccountResponse.deserializeBinary
  );

  deleteAccount(
    request: account_pb.DeleteAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<account_pb.DeleteAccountResponse>;

  deleteAccount(
    request: account_pb.DeleteAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: account_pb.DeleteAccountResponse) => void): grpcWeb.ClientReadableStream<account_pb.DeleteAccountResponse>;

  deleteAccount(
    request: account_pb.DeleteAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: account_pb.DeleteAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/account.AccountService/deleteAccount',
        request,
        metadata || {},
        this.methodDescriptordeleteAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/account.AccountService/deleteAccount',
    request,
    metadata || {},
    this.methodDescriptordeleteAccount);
  }

}

