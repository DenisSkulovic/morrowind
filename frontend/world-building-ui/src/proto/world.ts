/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: world.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace world {
    export class UpdateWorldRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            world?: dependency_1.common.WorldDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
            }
        }
        get world() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO;
        }
        set world(value: dependency_1.common.WorldDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_world() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
        }): UpdateWorldRequest {
            const message = new UpdateWorldRequest({});
            if (data.world != null) {
                message.world = dependency_1.common.WorldDTO.fromObject(data.world);
            }
            return message;
        }
        toObject() {
            const data: {
                world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
            } = {};
            if (this.world != null) {
                data.world = this.world.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_world)
                writer.writeMessage(1, this.world, () => this.world.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWorldRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWorldRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.world, () => message.world = dependency_1.common.WorldDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateWorldRequest {
            return UpdateWorldRequest.deserialize(bytes);
        }
    }
    export class UpdateWorldResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            world?: dependency_1.common.WorldDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
            }
        }
        get world() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO;
        }
        set world(value: dependency_1.common.WorldDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_world() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
        }): UpdateWorldResponse {
            const message = new UpdateWorldResponse({});
            if (data.world != null) {
                message.world = dependency_1.common.WorldDTO.fromObject(data.world);
            }
            return message;
        }
        toObject() {
            const data: {
                world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
            } = {};
            if (this.world != null) {
                data.world = this.world.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_world)
                writer.writeMessage(1, this.world, () => this.world.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWorldResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWorldResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.world, () => message.world = dependency_1.common.WorldDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateWorldResponse {
            return UpdateWorldResponse.deserialize(bytes);
        }
    }
    export class CreateWorldRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            world?: dependency_1.common.WorldDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
            }
        }
        get world() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO;
        }
        set world(value: dependency_1.common.WorldDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_world() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
        }): CreateWorldRequest {
            const message = new CreateWorldRequest({});
            if (data.world != null) {
                message.world = dependency_1.common.WorldDTO.fromObject(data.world);
            }
            return message;
        }
        toObject() {
            const data: {
                world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
            } = {};
            if (this.world != null) {
                data.world = this.world.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_world)
                writer.writeMessage(1, this.world, () => this.world.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWorldRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWorldRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.world, () => message.world = dependency_1.common.WorldDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWorldRequest {
            return CreateWorldRequest.deserialize(bytes);
        }
    }
    export class CreateWorldResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            world?: dependency_1.common.WorldDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
            }
        }
        get world() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO;
        }
        set world(value: dependency_1.common.WorldDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_world() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
        }): CreateWorldResponse {
            const message = new CreateWorldResponse({});
            if (data.world != null) {
                message.world = dependency_1.common.WorldDTO.fromObject(data.world);
            }
            return message;
        }
        toObject() {
            const data: {
                world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
            } = {};
            if (this.world != null) {
                data.world = this.world.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_world)
                writer.writeMessage(1, this.world, () => this.world.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWorldResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWorldResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.world, () => message.world = dependency_1.common.WorldDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWorldResponse {
            return CreateWorldResponse.deserialize(bytes);
        }
    }
    export class GetWorldRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worldId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worldId" in data && data.worldId != undefined) {
                    this.worldId = data.worldId;
                }
            }
        }
        get worldId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set worldId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worldId?: string;
        }): GetWorldRequest {
            const message = new GetWorldRequest({});
            if (data.worldId != null) {
                message.worldId = data.worldId;
            }
            return message;
        }
        toObject() {
            const data: {
                worldId?: string;
            } = {};
            if (this.worldId != null) {
                data.worldId = this.worldId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worldId.length)
                writer.writeString(1, this.worldId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorldRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorldRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worldId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorldRequest {
            return GetWorldRequest.deserialize(bytes);
        }
    }
    export class GetWorldResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            world?: dependency_1.common.WorldDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
            }
        }
        get world() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO;
        }
        set world(value: dependency_1.common.WorldDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_world() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
        }): GetWorldResponse {
            const message = new GetWorldResponse({});
            if (data.world != null) {
                message.world = dependency_1.common.WorldDTO.fromObject(data.world);
            }
            return message;
        }
        toObject() {
            const data: {
                world?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>;
            } = {};
            if (this.world != null) {
                data.world = this.world.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_world)
                writer.writeMessage(1, this.world, () => this.world.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorldResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorldResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.world, () => message.world = dependency_1.common.WorldDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorldResponse {
            return GetWorldResponse.deserialize(bytes);
        }
    }
    export class GetWorldsForUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): GetWorldsForUserRequest {
            const message = new GetWorldsForUserRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorldsForUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorldsForUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorldsForUserRequest {
            return GetWorldsForUserRequest.deserialize(bytes);
        }
    }
    export class GetWorldsForUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worlds?: dependency_1.common.WorldDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worlds" in data && data.worlds != undefined) {
                    this.worlds = data.worlds;
                }
            }
        }
        get worlds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO[];
        }
        set worlds(value: dependency_1.common.WorldDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            worlds?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>[];
        }): GetWorldsForUserResponse {
            const message = new GetWorldsForUserResponse({});
            if (data.worlds != null) {
                message.worlds = data.worlds.map(item => dependency_1.common.WorldDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                worlds?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>[];
            } = {};
            if (this.worlds != null) {
                data.worlds = this.worlds.map((item: dependency_1.common.WorldDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worlds.length)
                writer.writeRepeatedMessage(1, this.worlds, (item: dependency_1.common.WorldDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorldsForUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorldsForUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worlds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.common.WorldDTO.deserialize(reader), dependency_1.common.WorldDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorldsForUserResponse {
            return GetWorldsForUserResponse.deserialize(bytes);
        }
    }
    export class DeleteWorldRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worldId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worldId" in data && data.worldId != undefined) {
                    this.worldId = data.worldId;
                }
            }
        }
        get worldId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set worldId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worldId?: string;
        }): DeleteWorldRequest {
            const message = new DeleteWorldRequest({});
            if (data.worldId != null) {
                message.worldId = data.worldId;
            }
            return message;
        }
        toObject() {
            const data: {
                worldId?: string;
            } = {};
            if (this.worldId != null) {
                data.worldId = this.worldId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worldId.length)
                writer.writeString(1, this.worldId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteWorldRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteWorldRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worldId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteWorldRequest {
            return DeleteWorldRequest.deserialize(bytes);
        }
    }
    export class DeleteWorldResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteWorldResponse {
            const message = new DeleteWorldResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteWorldResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteWorldResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteWorldResponse {
            return DeleteWorldResponse.deserialize(bytes);
        }
    }
    export class DropWorldContentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worldId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worldId" in data && data.worldId != undefined) {
                    this.worldId = data.worldId;
                }
            }
        }
        get worldId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set worldId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worldId?: string;
        }): DropWorldContentRequest {
            const message = new DropWorldContentRequest({});
            if (data.worldId != null) {
                message.worldId = data.worldId;
            }
            return message;
        }
        toObject() {
            const data: {
                worldId?: string;
            } = {};
            if (this.worldId != null) {
                data.worldId = this.worldId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worldId.length)
                writer.writeString(1, this.worldId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropWorldContentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropWorldContentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worldId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropWorldContentRequest {
            return DropWorldContentRequest.deserialize(bytes);
        }
    }
    export class DropWorldContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DropWorldContentResponse {
            const message = new DropWorldContentResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropWorldContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropWorldContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropWorldContentResponse {
            return DropWorldContentResponse.deserialize(bytes);
        }
    }
    export class LoadWorldPresetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset?: dependency_1.common.PresetEnumDTO;
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset" in data && data.preset != undefined) {
                    this.preset = data.preset;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get preset() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.common.PresetEnumDTO.PRESET_DEFAULT) as dependency_1.common.PresetEnumDTO;
        }
        set preset(value: dependency_1.common.PresetEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 2) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            preset?: dependency_1.common.PresetEnumDTO;
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): LoadWorldPresetRequest {
            const message = new LoadWorldPresetRequest({});
            if (data.preset != null) {
                message.preset = data.preset;
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                preset?: dependency_1.common.PresetEnumDTO;
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.preset != null) {
                data.preset = this.preset;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset != dependency_1.common.PresetEnumDTO.PRESET_DEFAULT)
                writer.writeEnum(1, this.preset);
            if (this.has_context)
                writer.writeMessage(2, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadWorldPresetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadWorldPresetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoadWorldPresetRequest {
            return LoadWorldPresetRequest.deserialize(bytes);
        }
    }
    export class LoadWorldPresetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): LoadWorldPresetResponse {
            const message = new LoadWorldPresetResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadWorldPresetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadWorldPresetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoadWorldPresetResponse {
            return LoadWorldPresetResponse.deserialize(bytes);
        }
    }
    export class SearchWorldRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entityName?: string;
            query?: dependency_1.common.SearchQueryDTO;
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entityName" in data && data.entityName != undefined) {
                    this.entityName = data.entityName;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get entityName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set entityName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.SearchQueryDTO, 2) as dependency_1.common.SearchQueryDTO;
        }
        set query(value: dependency_1.common.SearchQueryDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            entityName?: string;
            query?: ReturnType<typeof dependency_1.common.SearchQueryDTO.prototype.toObject>;
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): SearchWorldRequest {
            const message = new SearchWorldRequest({});
            if (data.entityName != null) {
                message.entityName = data.entityName;
            }
            if (data.query != null) {
                message.query = dependency_1.common.SearchQueryDTO.fromObject(data.query);
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                entityName?: string;
                query?: ReturnType<typeof dependency_1.common.SearchQueryDTO.prototype.toObject>;
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.entityName != null) {
                data.entityName = this.entityName;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entityName.length)
                writer.writeString(1, this.entityName);
            if (this.has_query)
                writer.writeMessage(2, this.query, () => this.query.serialize(writer));
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchWorldRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchWorldRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entityName = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.query, () => message.query = dependency_1.common.SearchQueryDTO.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchWorldRequest {
            return SearchWorldRequest.deserialize(bytes);
        }
    }
    export class SearchWorldResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worlds?: dependency_1.common.WorldDTO[];
            totalResults?: number;
            totalPages?: number;
            currentPage?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worlds" in data && data.worlds != undefined) {
                    this.worlds = data.worlds;
                }
                if ("totalResults" in data && data.totalResults != undefined) {
                    this.totalResults = data.totalResults;
                }
                if ("totalPages" in data && data.totalPages != undefined) {
                    this.totalPages = data.totalPages;
                }
                if ("currentPage" in data && data.currentPage != undefined) {
                    this.currentPage = data.currentPage;
                }
            }
        }
        get worlds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.WorldDTO, 1) as dependency_1.common.WorldDTO[];
        }
        set worlds(value: dependency_1.common.WorldDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalResults() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalResults(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get totalPages() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set totalPages(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get currentPage() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set currentPage(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            worlds?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>[];
            totalResults?: number;
            totalPages?: number;
            currentPage?: number;
        }): SearchWorldResponse {
            const message = new SearchWorldResponse({});
            if (data.worlds != null) {
                message.worlds = data.worlds.map(item => dependency_1.common.WorldDTO.fromObject(item));
            }
            if (data.totalResults != null) {
                message.totalResults = data.totalResults;
            }
            if (data.totalPages != null) {
                message.totalPages = data.totalPages;
            }
            if (data.currentPage != null) {
                message.currentPage = data.currentPage;
            }
            return message;
        }
        toObject() {
            const data: {
                worlds?: ReturnType<typeof dependency_1.common.WorldDTO.prototype.toObject>[];
                totalResults?: number;
                totalPages?: number;
                currentPage?: number;
            } = {};
            if (this.worlds != null) {
                data.worlds = this.worlds.map((item: dependency_1.common.WorldDTO) => item.toObject());
            }
            if (this.totalResults != null) {
                data.totalResults = this.totalResults;
            }
            if (this.totalPages != null) {
                data.totalPages = this.totalPages;
            }
            if (this.currentPage != null) {
                data.currentPage = this.currentPage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worlds.length)
                writer.writeRepeatedMessage(1, this.worlds, (item: dependency_1.common.WorldDTO) => item.serialize(writer));
            if (this.totalResults != 0)
                writer.writeInt32(2, this.totalResults);
            if (this.totalPages != 0)
                writer.writeInt32(3, this.totalPages);
            if (this.currentPage != 0)
                writer.writeInt32(4, this.currentPage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchWorldResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchWorldResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worlds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.common.WorldDTO.deserialize(reader), dependency_1.common.WorldDTO));
                        break;
                    case 2:
                        message.totalResults = reader.readInt32();
                        break;
                    case 3:
                        message.totalPages = reader.readInt32();
                        break;
                    case 4:
                        message.currentPage = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchWorldResponse {
            return SearchWorldResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWorldServiceService {
        static definition = {
            getWorld: {
                path: "/world.WorldService/getWorld",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetWorldRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetWorldRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetWorldResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetWorldResponse.deserialize(new Uint8Array(bytes))
            },
            createWorld: {
                path: "/world.WorldService/createWorld",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateWorldRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateWorldRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateWorldResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateWorldResponse.deserialize(new Uint8Array(bytes))
            },
            updateWorld: {
                path: "/world.WorldService/updateWorld",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateWorldRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateWorldRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateWorldResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateWorldResponse.deserialize(new Uint8Array(bytes))
            },
            deleteWorld: {
                path: "/world.WorldService/deleteWorld",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteWorldRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteWorldRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteWorldResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteWorldResponse.deserialize(new Uint8Array(bytes))
            },
            search: {
                path: "/world.WorldService/search",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchWorldRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchWorldRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchWorldResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchWorldResponse.deserialize(new Uint8Array(bytes))
            },
            dropWorldContent: {
                path: "/world.WorldService/dropWorldContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DropWorldContentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DropWorldContentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DropWorldContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DropWorldContentResponse.deserialize(new Uint8Array(bytes))
            },
            loadWorldPreset: {
                path: "/world.WorldService/loadWorldPreset",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoadWorldPresetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoadWorldPresetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoadWorldPresetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoadWorldPresetResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getWorld(call: grpc_1.ServerUnaryCall<GetWorldRequest, GetWorldResponse>, callback: grpc_1.sendUnaryData<GetWorldResponse>): void;
        abstract createWorld(call: grpc_1.ServerUnaryCall<CreateWorldRequest, CreateWorldResponse>, callback: grpc_1.sendUnaryData<CreateWorldResponse>): void;
        abstract updateWorld(call: grpc_1.ServerUnaryCall<UpdateWorldRequest, UpdateWorldResponse>, callback: grpc_1.sendUnaryData<UpdateWorldResponse>): void;
        abstract deleteWorld(call: grpc_1.ServerUnaryCall<DeleteWorldRequest, DeleteWorldResponse>, callback: grpc_1.sendUnaryData<DeleteWorldResponse>): void;
        abstract search(call: grpc_1.ServerUnaryCall<SearchWorldRequest, SearchWorldResponse>, callback: grpc_1.sendUnaryData<SearchWorldResponse>): void;
        abstract dropWorldContent(call: grpc_1.ServerUnaryCall<DropWorldContentRequest, DropWorldContentResponse>, callback: grpc_1.sendUnaryData<DropWorldContentResponse>): void;
        abstract loadWorldPreset(call: grpc_1.ServerUnaryCall<LoadWorldPresetRequest, LoadWorldPresetResponse>, callback: grpc_1.sendUnaryData<LoadWorldPresetResponse>): void;
    }
    export class WorldServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedWorldServiceService.definition, "WorldService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getWorld: GrpcUnaryServiceInterface<GetWorldRequest, GetWorldResponse> = (message: GetWorldRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetWorldResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetWorldResponse>, callback?: grpc_1.requestCallback<GetWorldResponse>): grpc_1.ClientUnaryCall => {
            return super.getWorld(message, metadata, options, callback);
        };
        createWorld: GrpcUnaryServiceInterface<CreateWorldRequest, CreateWorldResponse> = (message: CreateWorldRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateWorldResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateWorldResponse>, callback?: grpc_1.requestCallback<CreateWorldResponse>): grpc_1.ClientUnaryCall => {
            return super.createWorld(message, metadata, options, callback);
        };
        updateWorld: GrpcUnaryServiceInterface<UpdateWorldRequest, UpdateWorldResponse> = (message: UpdateWorldRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateWorldResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateWorldResponse>, callback?: grpc_1.requestCallback<UpdateWorldResponse>): grpc_1.ClientUnaryCall => {
            return super.updateWorld(message, metadata, options, callback);
        };
        deleteWorld: GrpcUnaryServiceInterface<DeleteWorldRequest, DeleteWorldResponse> = (message: DeleteWorldRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteWorldResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteWorldResponse>, callback?: grpc_1.requestCallback<DeleteWorldResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteWorld(message, metadata, options, callback);
        };
        search: GrpcUnaryServiceInterface<SearchWorldRequest, SearchWorldResponse> = (message: SearchWorldRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchWorldResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchWorldResponse>, callback?: grpc_1.requestCallback<SearchWorldResponse>): grpc_1.ClientUnaryCall => {
            return super.search(message, metadata, options, callback);
        };
        dropWorldContent: GrpcUnaryServiceInterface<DropWorldContentRequest, DropWorldContentResponse> = (message: DropWorldContentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DropWorldContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DropWorldContentResponse>, callback?: grpc_1.requestCallback<DropWorldContentResponse>): grpc_1.ClientUnaryCall => {
            return super.dropWorldContent(message, metadata, options, callback);
        };
        loadWorldPreset: GrpcUnaryServiceInterface<LoadWorldPresetRequest, LoadWorldPresetResponse> = (message: LoadWorldPresetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoadWorldPresetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoadWorldPresetResponse>, callback?: grpc_1.requestCallback<LoadWorldPresetResponse>): grpc_1.ClientUnaryCall => {
            return super.loadWorldPreset(message, metadata, options, callback);
        };
    }
}
