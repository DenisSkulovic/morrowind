/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: account.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace account {
    export class UpdateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: dependency_1.common.AccountDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AccountDTO, 1) as dependency_1.common.AccountDTO;
        }
        set account(value: dependency_1.common.AccountDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
        }): UpdateAccountRequest {
            const message = new UpdateAccountRequest({});
            if (data.account != null) {
                message.account = dependency_1.common.AccountDTO.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.common.AccountDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountRequest {
            return UpdateAccountRequest.deserialize(bytes);
        }
    }
    export class UpdateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: dependency_1.common.AccountDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AccountDTO, 1) as dependency_1.common.AccountDTO;
        }
        set account(value: dependency_1.common.AccountDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
        }): UpdateAccountResponse {
            const message = new UpdateAccountResponse({});
            if (data.account != null) {
                message.account = dependency_1.common.AccountDTO.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.common.AccountDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountResponse {
            return UpdateAccountResponse.deserialize(bytes);
        }
    }
    export class DeleteAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            username?: string;
        }): DeleteAccountRequest {
            const message = new DeleteAccountRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAccountRequest {
            return DeleteAccountRequest.deserialize(bytes);
        }
    }
    export class DeleteAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteAccountResponse {
            const message = new DeleteAccountResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAccountResponse {
            return DeleteAccountResponse.deserialize(bytes);
        }
    }
    export class CreateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            passwordHash?: string;
            email?: string;
            role?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("passwordHash" in data && data.passwordHash != undefined) {
                    this.passwordHash = data.passwordHash;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get passwordHash() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set passwordHash(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            username?: string;
            passwordHash?: string;
            email?: string;
            role?: string;
        }): CreateAccountRequest {
            const message = new CreateAccountRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.passwordHash != null) {
                message.passwordHash = data.passwordHash;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                passwordHash?: string;
                email?: string;
                role?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.passwordHash != null) {
                data.passwordHash = this.passwordHash;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.passwordHash.length)
                writer.writeString(2, this.passwordHash);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.role.length)
                writer.writeString(4, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.passwordHash = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAccountRequest {
            return CreateAccountRequest.deserialize(bytes);
        }
    }
    export class CreateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: dependency_1.common.AccountDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AccountDTO, 1) as dependency_1.common.AccountDTO;
        }
        set account(value: dependency_1.common.AccountDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
        }): CreateAccountResponse {
            const message = new CreateAccountResponse({});
            if (data.account != null) {
                message.account = dependency_1.common.AccountDTO.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.common.AccountDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAccountResponse {
            return CreateAccountResponse.deserialize(bytes);
        }
    }
    export class GetAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            username?: string;
        }): GetAccountRequest {
            const message = new GetAccountRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountRequest {
            return GetAccountRequest.deserialize(bytes);
        }
    }
    export class GetAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: dependency_1.common.AccountDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.AccountDTO, 1) as dependency_1.common.AccountDTO;
        }
        set account(value: dependency_1.common.AccountDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
        }): GetAccountResponse {
            const message = new GetAccountResponse({});
            if (data.account != null) {
                message.account = dependency_1.common.AccountDTO.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.common.AccountDTO.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.common.AccountDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountResponse {
            return GetAccountResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAccountServiceService {
        static definition = {
            createAccountAndUser: {
                path: "/account.AccountService/createAccountAndUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateAccountResponse.deserialize(new Uint8Array(bytes))
            },
            getAccount: {
                path: "/account.AccountService/getAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAccountResponse.deserialize(new Uint8Array(bytes))
            },
            updateAccount: {
                path: "/account.AccountService/updateAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateAccountResponse.deserialize(new Uint8Array(bytes))
            },
            deleteAccount: {
                path: "/account.AccountService/deleteAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteAccountResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createAccountAndUser(call: grpc_1.ServerUnaryCall<CreateAccountRequest, CreateAccountResponse>, callback: grpc_1.sendUnaryData<CreateAccountResponse>): void;
        abstract getAccount(call: grpc_1.ServerUnaryCall<GetAccountRequest, GetAccountResponse>, callback: grpc_1.sendUnaryData<GetAccountResponse>): void;
        abstract updateAccount(call: grpc_1.ServerUnaryCall<UpdateAccountRequest, UpdateAccountResponse>, callback: grpc_1.sendUnaryData<UpdateAccountResponse>): void;
        abstract deleteAccount(call: grpc_1.ServerUnaryCall<DeleteAccountRequest, DeleteAccountResponse>, callback: grpc_1.sendUnaryData<DeleteAccountResponse>): void;
    }
    export class AccountServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAccountServiceService.definition, "AccountService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createAccountAndUser: GrpcUnaryServiceInterface<CreateAccountRequest, CreateAccountResponse> = (message: CreateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateAccountResponse>, callback?: grpc_1.requestCallback<CreateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.createAccountAndUser(message, metadata, options, callback);
        };
        getAccount: GrpcUnaryServiceInterface<GetAccountRequest, GetAccountResponse> = (message: GetAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAccountResponse>, callback?: grpc_1.requestCallback<GetAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.getAccount(message, metadata, options, callback);
        };
        updateAccount: GrpcUnaryServiceInterface<UpdateAccountRequest, UpdateAccountResponse> = (message: UpdateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateAccountResponse>, callback?: grpc_1.requestCallback<UpdateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.updateAccount(message, metadata, options, callback);
        };
        deleteAccount: GrpcUnaryServiceInterface<DeleteAccountRequest, DeleteAccountResponse> = (message: DeleteAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteAccountResponse>, callback?: grpc_1.requestCallback<DeleteAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteAccount(message, metadata, options, callback);
        };
    }
}
