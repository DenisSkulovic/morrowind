// source: dialogue.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var entities_pb = require('./entities_pb.js');
goog.object.extend(proto, entities_pb);
goog.exportSymbol('proto.dialogue.AiCharacterStepDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterChangeDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterChangesDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterGoalsDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterInventoryDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterKnowledgeBaseDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterKnowledgeDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterProfileDTO', null, global);
goog.exportSymbol('proto.dialogue.CharacterProfilesDTO', null, global);
goog.exportSymbol('proto.dialogue.DialogueHistoryDTO', null, global);
goog.exportSymbol('proto.dialogue.DialogueHistoryTopicDTO', null, global);
goog.exportSymbol('proto.dialogue.DialogueHistoryTopicsDTO', null, global);
goog.exportSymbol('proto.dialogue.DialogueOptionDTO', null, global);
goog.exportSymbol('proto.dialogue.DialogueStepDTO', null, global);
goog.exportSymbol('proto.dialogue.DialogueStepsDTO', null, global);
goog.exportSymbol('proto.dialogue.DiceRollResultDTO', null, global);
goog.exportSymbol('proto.dialogue.DirectionSceneEntryDTO', null, global);
goog.exportSymbol('proto.dialogue.FactionKnowledgeBaseDTO', null, global);
goog.exportSymbol('proto.dialogue.FinalizeDialogueRequest', null, global);
goog.exportSymbol('proto.dialogue.FinalizeDialogueResponse', null, global);
goog.exportSymbol('proto.dialogue.GeneratePlayerDialogueOptionsRequest', null, global);
goog.exportSymbol('proto.dialogue.GeneratePlayerDialogueOptionsResponse', null, global);
goog.exportSymbol('proto.dialogue.InitializeDialogueRequest', null, global);
goog.exportSymbol('proto.dialogue.InitializeDialogueResponse', null, global);
goog.exportSymbol('proto.dialogue.InterruptDialogueRequest', null, global);
goog.exportSymbol('proto.dialogue.InterruptDialogueResponse', null, global);
goog.exportSymbol('proto.dialogue.InventoryChangeDTO', null, global);
goog.exportSymbol('proto.dialogue.InventoryChangesDTO', null, global);
goog.exportSymbol('proto.dialogue.ItemKnowledgeBaseDTO', null, global);
goog.exportSymbol('proto.dialogue.KnowledgeBaseDTO', null, global);
goog.exportSymbol('proto.dialogue.LocationContextDTO', null, global);
goog.exportSymbol('proto.dialogue.LocationKnowledgeBaseDTO', null, global);
goog.exportSymbol('proto.dialogue.PlayerCharacterStepDTO', null, global);
goog.exportSymbol('proto.dialogue.SceneContextDTO', null, global);
goog.exportSymbol('proto.dialogue.SceneEntryDTO', null, global);
goog.exportSymbol('proto.dialogue.SceneItemDTO', null, global);
goog.exportSymbol('proto.dialogue.SceneItemsDTO', null, global);
goog.exportSymbol('proto.dialogue.SceneNPCDTO', null, global);
goog.exportSymbol('proto.dialogue.SceneNPCsDTO', null, global);
goog.exportSymbol('proto.dialogue.StepOutcomeDTO', null, global);
goog.exportSymbol('proto.dialogue.TimeContextDTO', null, global);
goog.exportSymbol('proto.dialogue.WeatherContextDTO', null, global);
goog.exportSymbol('proto.dialogue.WorldContextDTO', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.InitializeDialogueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.InitializeDialogueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.InitializeDialogueRequest.displayName = 'proto.dialogue.InitializeDialogueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.InitializeDialogueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.InitializeDialogueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.InitializeDialogueResponse.displayName = 'proto.dialogue.InitializeDialogueResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterProfileDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.CharacterProfileDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterProfileDTO.displayName = 'proto.dialogue.CharacterProfileDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterGoalsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.CharacterGoalsDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.CharacterGoalsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterGoalsDTO.displayName = 'proto.dialogue.CharacterGoalsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterInventoryDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.CharacterInventoryDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.CharacterInventoryDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterInventoryDTO.displayName = 'proto.dialogue.CharacterInventoryDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterKnowledgeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.CharacterKnowledgeDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.CharacterKnowledgeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterKnowledgeDTO.displayName = 'proto.dialogue.CharacterKnowledgeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterProfilesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.CharacterProfilesDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.CharacterProfilesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterProfilesDTO.displayName = 'proto.dialogue.CharacterProfilesDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.WorldContextDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.WorldContextDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.WorldContextDTO.displayName = 'proto.dialogue.WorldContextDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.LocationContextDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.LocationContextDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.LocationContextDTO.displayName = 'proto.dialogue.LocationContextDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.TimeContextDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.TimeContextDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.TimeContextDTO.displayName = 'proto.dialogue.TimeContextDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.WeatherContextDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.WeatherContextDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.WeatherContextDTO.displayName = 'proto.dialogue.WeatherContextDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.SceneContextDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.SceneContextDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.SceneContextDTO.displayName = 'proto.dialogue.SceneContextDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DirectionSceneEntryDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.DirectionSceneEntryDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DirectionSceneEntryDTO.displayName = 'proto.dialogue.DirectionSceneEntryDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.SceneEntryDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.SceneEntryDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.SceneEntryDTO.displayName = 'proto.dialogue.SceneEntryDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.SceneNPCDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.SceneNPCDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.SceneNPCDTO.displayName = 'proto.dialogue.SceneNPCDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.SceneNPCsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.SceneNPCsDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.SceneNPCsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.SceneNPCsDTO.displayName = 'proto.dialogue.SceneNPCsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.SceneItemDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.SceneItemDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.SceneItemDTO.displayName = 'proto.dialogue.SceneItemDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.SceneItemsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.SceneItemsDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.SceneItemsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.SceneItemsDTO.displayName = 'proto.dialogue.SceneItemsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DialogueHistoryDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.DialogueHistoryDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DialogueHistoryDTO.displayName = 'proto.dialogue.DialogueHistoryDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DialogueHistoryTopicDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.DialogueHistoryTopicDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DialogueHistoryTopicDTO.displayName = 'proto.dialogue.DialogueHistoryTopicDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DialogueHistoryTopicsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.DialogueHistoryTopicsDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.DialogueHistoryTopicsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DialogueHistoryTopicsDTO.displayName = 'proto.dialogue.DialogueHistoryTopicsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DialogueStepDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.DialogueStepDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DialogueStepDTO.displayName = 'proto.dialogue.DialogueStepDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DialogueStepsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.DialogueStepsDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.DialogueStepsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DialogueStepsDTO.displayName = 'proto.dialogue.DialogueStepsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DiceRollResultDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.DiceRollResultDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DiceRollResultDTO.displayName = 'proto.dialogue.DiceRollResultDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.PlayerCharacterStepDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.PlayerCharacterStepDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.PlayerCharacterStepDTO.displayName = 'proto.dialogue.PlayerCharacterStepDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.AiCharacterStepDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.AiCharacterStepDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.AiCharacterStepDTO.displayName = 'proto.dialogue.AiCharacterStepDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.StepOutcomeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.StepOutcomeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.StepOutcomeDTO.displayName = 'proto.dialogue.StepOutcomeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterChangeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.CharacterChangeDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.CharacterChangeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterChangeDTO.displayName = 'proto.dialogue.CharacterChangeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterChangesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.CharacterChangesDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.CharacterChangesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterChangesDTO.displayName = 'proto.dialogue.CharacterChangesDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.InventoryChangeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.InventoryChangeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.InventoryChangeDTO.displayName = 'proto.dialogue.InventoryChangeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.InventoryChangesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.InventoryChangesDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.InventoryChangesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.InventoryChangesDTO.displayName = 'proto.dialogue.InventoryChangesDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.KnowledgeBaseDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.KnowledgeBaseDTO.repeatedFields_, null);
};
goog.inherits(proto.dialogue.KnowledgeBaseDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.KnowledgeBaseDTO.displayName = 'proto.dialogue.KnowledgeBaseDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.CharacterKnowledgeBaseDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.CharacterKnowledgeBaseDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.CharacterKnowledgeBaseDTO.displayName = 'proto.dialogue.CharacterKnowledgeBaseDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.FactionKnowledgeBaseDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.FactionKnowledgeBaseDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.FactionKnowledgeBaseDTO.displayName = 'proto.dialogue.FactionKnowledgeBaseDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.LocationKnowledgeBaseDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.LocationKnowledgeBaseDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.LocationKnowledgeBaseDTO.displayName = 'proto.dialogue.LocationKnowledgeBaseDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.ItemKnowledgeBaseDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.ItemKnowledgeBaseDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.ItemKnowledgeBaseDTO.displayName = 'proto.dialogue.ItemKnowledgeBaseDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.GeneratePlayerDialogueOptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.GeneratePlayerDialogueOptionsRequest.displayName = 'proto.dialogue.GeneratePlayerDialogueOptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.GeneratePlayerDialogueOptionsResponse.repeatedFields_, null);
};
goog.inherits(proto.dialogue.GeneratePlayerDialogueOptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.GeneratePlayerDialogueOptionsResponse.displayName = 'proto.dialogue.GeneratePlayerDialogueOptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.DialogueOptionDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.DialogueOptionDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.DialogueOptionDTO.displayName = 'proto.dialogue.DialogueOptionDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.InterruptDialogueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.InterruptDialogueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.InterruptDialogueRequest.displayName = 'proto.dialogue.InterruptDialogueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.InterruptDialogueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.InterruptDialogueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.InterruptDialogueResponse.displayName = 'proto.dialogue.InterruptDialogueResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.FinalizeDialogueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dialogue.FinalizeDialogueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.FinalizeDialogueRequest.displayName = 'proto.dialogue.FinalizeDialogueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dialogue.FinalizeDialogueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dialogue.FinalizeDialogueResponse.repeatedFields_, null);
};
goog.inherits(proto.dialogue.FinalizeDialogueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dialogue.FinalizeDialogueResponse.displayName = 'proto.dialogue.FinalizeDialogueResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.InitializeDialogueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.InitializeDialogueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.InitializeDialogueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InitializeDialogueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    initiatingparticipantid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playercharacterid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aiprovider: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dialogueparticipants: (f = msg.getDialogueparticipants()) && proto.dialogue.CharacterProfilesDTO.toObject(includeInstance, f),
    worldcontext: (f = msg.getWorldcontext()) && proto.dialogue.WorldContextDTO.toObject(includeInstance, f),
    dialoguehistory: (f = msg.getDialoguehistory()) && proto.dialogue.DialogueHistoryDTO.toObject(includeInstance, f),
    knowledgebase: (f = msg.getKnowledgebase()) && proto.dialogue.KnowledgeBaseDTO.toObject(includeInstance, f),
    context: (f = msg.getContext()) && entities_pb.ContextDTO.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.InitializeDialogueRequest}
 */
proto.dialogue.InitializeDialogueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.InitializeDialogueRequest;
  return proto.dialogue.InitializeDialogueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.InitializeDialogueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.InitializeDialogueRequest}
 */
proto.dialogue.InitializeDialogueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitiatingparticipantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayercharacterid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAiprovider(value);
      break;
    case 4:
      var value = new proto.dialogue.CharacterProfilesDTO;
      reader.readMessage(value,proto.dialogue.CharacterProfilesDTO.deserializeBinaryFromReader);
      msg.setDialogueparticipants(value);
      break;
    case 5:
      var value = new proto.dialogue.WorldContextDTO;
      reader.readMessage(value,proto.dialogue.WorldContextDTO.deserializeBinaryFromReader);
      msg.setWorldcontext(value);
      break;
    case 6:
      var value = new proto.dialogue.DialogueHistoryDTO;
      reader.readMessage(value,proto.dialogue.DialogueHistoryDTO.deserializeBinaryFromReader);
      msg.setDialoguehistory(value);
      break;
    case 7:
      var value = new proto.dialogue.KnowledgeBaseDTO;
      reader.readMessage(value,proto.dialogue.KnowledgeBaseDTO.deserializeBinaryFromReader);
      msg.setKnowledgebase(value);
      break;
    case 8:
      var value = new entities_pb.ContextDTO;
      reader.readMessage(value,entities_pb.ContextDTO.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.InitializeDialogueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.InitializeDialogueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.InitializeDialogueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InitializeDialogueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitiatingparticipantid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayercharacterid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAiprovider();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDialogueparticipants();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dialogue.CharacterProfilesDTO.serializeBinaryToWriter
    );
  }
  f = message.getWorldcontext();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dialogue.WorldContextDTO.serializeBinaryToWriter
    );
  }
  f = message.getDialoguehistory();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.dialogue.DialogueHistoryDTO.serializeBinaryToWriter
    );
  }
  f = message.getKnowledgebase();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.dialogue.KnowledgeBaseDTO.serializeBinaryToWriter
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      entities_pb.ContextDTO.serializeBinaryToWriter
    );
  }
};


/**
 * optional string initiatingParticipantId = 1;
 * @return {string}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getInitiatingparticipantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.setInitiatingparticipantid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerCharacterId = 2;
 * @return {string}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getPlayercharacterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.setPlayercharacterid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string aiProvider = 3;
 * @return {string}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getAiprovider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.setAiprovider = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional CharacterProfilesDTO dialogueParticipants = 4;
 * @return {?proto.dialogue.CharacterProfilesDTO}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getDialogueparticipants = function() {
  return /** @type{?proto.dialogue.CharacterProfilesDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.CharacterProfilesDTO, 4));
};


/**
 * @param {?proto.dialogue.CharacterProfilesDTO|undefined} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
*/
proto.dialogue.InitializeDialogueRequest.prototype.setDialogueparticipants = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.clearDialogueparticipants = function() {
  return this.setDialogueparticipants(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.InitializeDialogueRequest.prototype.hasDialogueparticipants = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WorldContextDTO worldContext = 5;
 * @return {?proto.dialogue.WorldContextDTO}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getWorldcontext = function() {
  return /** @type{?proto.dialogue.WorldContextDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.WorldContextDTO, 5));
};


/**
 * @param {?proto.dialogue.WorldContextDTO|undefined} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
*/
proto.dialogue.InitializeDialogueRequest.prototype.setWorldcontext = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.clearWorldcontext = function() {
  return this.setWorldcontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.InitializeDialogueRequest.prototype.hasWorldcontext = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DialogueHistoryDTO dialogueHistory = 6;
 * @return {?proto.dialogue.DialogueHistoryDTO}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getDialoguehistory = function() {
  return /** @type{?proto.dialogue.DialogueHistoryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DialogueHistoryDTO, 6));
};


/**
 * @param {?proto.dialogue.DialogueHistoryDTO|undefined} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
*/
proto.dialogue.InitializeDialogueRequest.prototype.setDialoguehistory = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.clearDialoguehistory = function() {
  return this.setDialoguehistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.InitializeDialogueRequest.prototype.hasDialoguehistory = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional KnowledgeBaseDTO knowledgeBase = 7;
 * @return {?proto.dialogue.KnowledgeBaseDTO}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getKnowledgebase = function() {
  return /** @type{?proto.dialogue.KnowledgeBaseDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.KnowledgeBaseDTO, 7));
};


/**
 * @param {?proto.dialogue.KnowledgeBaseDTO|undefined} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
*/
proto.dialogue.InitializeDialogueRequest.prototype.setKnowledgebase = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.clearKnowledgebase = function() {
  return this.setKnowledgebase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.InitializeDialogueRequest.prototype.hasKnowledgebase = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional entities.ContextDTO context = 8;
 * @return {?proto.entities.ContextDTO}
 */
proto.dialogue.InitializeDialogueRequest.prototype.getContext = function() {
  return /** @type{?proto.entities.ContextDTO} */ (
    jspb.Message.getWrapperField(this, entities_pb.ContextDTO, 8));
};


/**
 * @param {?proto.entities.ContextDTO|undefined} value
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
*/
proto.dialogue.InitializeDialogueRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.InitializeDialogueRequest} returns this
 */
proto.dialogue.InitializeDialogueRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.InitializeDialogueRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.InitializeDialogueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.InitializeDialogueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.InitializeDialogueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InitializeDialogueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogueid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.InitializeDialogueResponse}
 */
proto.dialogue.InitializeDialogueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.InitializeDialogueResponse;
  return proto.dialogue.InitializeDialogueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.InitializeDialogueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.InitializeDialogueResponse}
 */
proto.dialogue.InitializeDialogueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialogueid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.InitializeDialogueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.InitializeDialogueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.InitializeDialogueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InitializeDialogueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogueid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string dialogueId = 1;
 * @return {string}
 */
proto.dialogue.InitializeDialogueResponse.prototype.getDialogueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InitializeDialogueResponse} returns this
 */
proto.dialogue.InitializeDialogueResponse.prototype.setDialogueid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterProfileDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterProfileDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterProfileDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterProfileDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    race: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pb_class: jspb.Message.getFieldWithDefault(msg, 4, ""),
    traits: jspb.Message.getFieldWithDefault(msg, 5, ""),
    enneagram: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mood: jspb.Message.getFieldWithDefault(msg, 7, ""),
    needs: jspb.Message.getFieldWithDefault(msg, 8, ""),
    goals: (f = msg.getGoals()) && proto.dialogue.CharacterGoalsDTO.toObject(includeInstance, f),
    skillsMap: (f = msg.getSkillsMap()) ? f.toObject(includeInstance, undefined) : [],
    statsMap: (f = msg.getStatsMap()) ? f.toObject(includeInstance, undefined) : [],
    inventory: (f = msg.getInventory()) && proto.dialogue.CharacterInventoryDTO.toObject(includeInstance, f),
    knowledge: (f = msg.getKnowledge()) && proto.dialogue.CharacterKnowledgeDTO.toObject(includeInstance, f),
    dialogueattitude: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterProfileDTO}
 */
proto.dialogue.CharacterProfileDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterProfileDTO;
  return proto.dialogue.CharacterProfileDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterProfileDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterProfileDTO}
 */
proto.dialogue.CharacterProfileDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClass(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraits(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnneagram(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMood(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNeeds(value);
      break;
    case 9:
      var value = new proto.dialogue.CharacterGoalsDTO;
      reader.readMessage(value,proto.dialogue.CharacterGoalsDTO.deserializeBinaryFromReader);
      msg.setGoals(value);
      break;
    case 10:
      var value = msg.getSkillsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 11:
      var value = msg.getStatsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = new proto.dialogue.CharacterInventoryDTO;
      reader.readMessage(value,proto.dialogue.CharacterInventoryDTO.deserializeBinaryFromReader);
      msg.setInventory(value);
      break;
    case 13:
      var value = new proto.dialogue.CharacterKnowledgeDTO;
      reader.readMessage(value,proto.dialogue.CharacterKnowledgeDTO.deserializeBinaryFromReader);
      msg.setKnowledge(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialogueattitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterProfileDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterProfileDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterProfileDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterProfileDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClass();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTraits();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnneagram();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMood();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNeeds();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGoals();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.dialogue.CharacterGoalsDTO.serializeBinaryToWriter
    );
  }
  f = message.getSkillsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getStatsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getInventory();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.dialogue.CharacterInventoryDTO.serializeBinaryToWriter
    );
  }
  f = message.getKnowledge();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.dialogue.CharacterKnowledgeDTO.serializeBinaryToWriter
    );
  }
  f = message.getDialogueattitude();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string race = 3;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getRace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setRace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string class = 4;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setClass = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string traits = 5;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getTraits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setTraits = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string enneagram = 6;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getEnneagram = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setEnneagram = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mood = 7;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getMood = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setMood = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string needs = 8;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getNeeds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setNeeds = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional CharacterGoalsDTO goals = 9;
 * @return {?proto.dialogue.CharacterGoalsDTO}
 */
proto.dialogue.CharacterProfileDTO.prototype.getGoals = function() {
  return /** @type{?proto.dialogue.CharacterGoalsDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.CharacterGoalsDTO, 9));
};


/**
 * @param {?proto.dialogue.CharacterGoalsDTO|undefined} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
*/
proto.dialogue.CharacterProfileDTO.prototype.setGoals = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.clearGoals = function() {
  return this.setGoals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.CharacterProfileDTO.prototype.hasGoals = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * map<string, int32> skills = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.dialogue.CharacterProfileDTO.prototype.getSkillsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.clearSkillsMap = function() {
  this.getSkillsMap().clear();
  return this;};


/**
 * map<string, string> stats = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.dialogue.CharacterProfileDTO.prototype.getStatsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.clearStatsMap = function() {
  this.getStatsMap().clear();
  return this;};


/**
 * optional CharacterInventoryDTO inventory = 12;
 * @return {?proto.dialogue.CharacterInventoryDTO}
 */
proto.dialogue.CharacterProfileDTO.prototype.getInventory = function() {
  return /** @type{?proto.dialogue.CharacterInventoryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.CharacterInventoryDTO, 12));
};


/**
 * @param {?proto.dialogue.CharacterInventoryDTO|undefined} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
*/
proto.dialogue.CharacterProfileDTO.prototype.setInventory = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.clearInventory = function() {
  return this.setInventory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.CharacterProfileDTO.prototype.hasInventory = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CharacterKnowledgeDTO knowledge = 13;
 * @return {?proto.dialogue.CharacterKnowledgeDTO}
 */
proto.dialogue.CharacterProfileDTO.prototype.getKnowledge = function() {
  return /** @type{?proto.dialogue.CharacterKnowledgeDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.CharacterKnowledgeDTO, 13));
};


/**
 * @param {?proto.dialogue.CharacterKnowledgeDTO|undefined} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
*/
proto.dialogue.CharacterProfileDTO.prototype.setKnowledge = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.clearKnowledge = function() {
  return this.setKnowledge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.CharacterProfileDTO.prototype.hasKnowledge = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string dialogueAttitude = 14;
 * @return {string}
 */
proto.dialogue.CharacterProfileDTO.prototype.getDialogueattitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterProfileDTO} returns this
 */
proto.dialogue.CharacterProfileDTO.prototype.setDialogueattitude = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.CharacterGoalsDTO.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterGoalsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterGoalsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterGoalsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterGoalsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    satisfiedList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    unsatisfiedList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterGoalsDTO}
 */
proto.dialogue.CharacterGoalsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterGoalsDTO;
  return proto.dialogue.CharacterGoalsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterGoalsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterGoalsDTO}
 */
proto.dialogue.CharacterGoalsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSatisfied(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUnsatisfied(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterGoalsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterGoalsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterGoalsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterGoalsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSatisfiedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUnsatisfiedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string satisfied = 1;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterGoalsDTO.prototype.getSatisfiedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterGoalsDTO} returns this
 */
proto.dialogue.CharacterGoalsDTO.prototype.setSatisfiedList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterGoalsDTO} returns this
 */
proto.dialogue.CharacterGoalsDTO.prototype.addSatisfied = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterGoalsDTO} returns this
 */
proto.dialogue.CharacterGoalsDTO.prototype.clearSatisfiedList = function() {
  return this.setSatisfiedList([]);
};


/**
 * repeated string unsatisfied = 2;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterGoalsDTO.prototype.getUnsatisfiedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterGoalsDTO} returns this
 */
proto.dialogue.CharacterGoalsDTO.prototype.setUnsatisfiedList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterGoalsDTO} returns this
 */
proto.dialogue.CharacterGoalsDTO.prototype.addUnsatisfied = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterGoalsDTO} returns this
 */
proto.dialogue.CharacterGoalsDTO.prototype.clearUnsatisfiedList = function() {
  return this.setUnsatisfiedList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.CharacterInventoryDTO.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterInventoryDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterInventoryDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterInventoryDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterInventoryDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    equippedList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    storedList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterInventoryDTO}
 */
proto.dialogue.CharacterInventoryDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterInventoryDTO;
  return proto.dialogue.CharacterInventoryDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterInventoryDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterInventoryDTO}
 */
proto.dialogue.CharacterInventoryDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addEquipped(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStored(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterInventoryDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterInventoryDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterInventoryDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterInventoryDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquippedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getStoredList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string equipped = 1;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterInventoryDTO.prototype.getEquippedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterInventoryDTO} returns this
 */
proto.dialogue.CharacterInventoryDTO.prototype.setEquippedList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterInventoryDTO} returns this
 */
proto.dialogue.CharacterInventoryDTO.prototype.addEquipped = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterInventoryDTO} returns this
 */
proto.dialogue.CharacterInventoryDTO.prototype.clearEquippedList = function() {
  return this.setEquippedList([]);
};


/**
 * repeated string stored = 2;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterInventoryDTO.prototype.getStoredList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterInventoryDTO} returns this
 */
proto.dialogue.CharacterInventoryDTO.prototype.setStoredList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterInventoryDTO} returns this
 */
proto.dialogue.CharacterInventoryDTO.prototype.addStored = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterInventoryDTO} returns this
 */
proto.dialogue.CharacterInventoryDTO.prototype.clearStoredList = function() {
  return this.setStoredList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.CharacterKnowledgeDTO.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterKnowledgeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterKnowledgeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterKnowledgeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    locationsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    factionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    familiarCharactersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterKnowledgeDTO}
 */
proto.dialogue.CharacterKnowledgeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterKnowledgeDTO;
  return proto.dialogue.CharacterKnowledgeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterKnowledgeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterKnowledgeDTO}
 */
proto.dialogue.CharacterKnowledgeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocations(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFactions(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFamiliarCharacters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterKnowledgeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterKnowledgeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterKnowledgeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFactionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFamiliarCharactersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string locations = 1;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.getLocationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.setLocationsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.addLocations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.clearLocationsList = function() {
  return this.setLocationsList([]);
};


/**
 * repeated string factions = 2;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.getFactionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.setFactionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.addFactions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.clearFactionsList = function() {
  return this.setFactionsList([]);
};


/**
 * repeated string familiar_characters = 3;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.getFamiliarCharactersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.setFamiliarCharactersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.addFamiliarCharacters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterKnowledgeDTO} returns this
 */
proto.dialogue.CharacterKnowledgeDTO.prototype.clearFamiliarCharactersList = function() {
  return this.setFamiliarCharactersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.CharacterProfilesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterProfilesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterProfilesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterProfilesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterProfilesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.CharacterProfileDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterProfilesDTO}
 */
proto.dialogue.CharacterProfilesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterProfilesDTO;
  return proto.dialogue.CharacterProfilesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterProfilesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterProfilesDTO}
 */
proto.dialogue.CharacterProfilesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.CharacterProfileDTO;
      reader.readMessage(value,proto.dialogue.CharacterProfileDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterProfilesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterProfilesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterProfilesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterProfilesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.CharacterProfileDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CharacterProfileDTO arr = 1;
 * @return {!Array<!proto.dialogue.CharacterProfileDTO>}
 */
proto.dialogue.CharacterProfilesDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.CharacterProfileDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.CharacterProfileDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.CharacterProfileDTO>} value
 * @return {!proto.dialogue.CharacterProfilesDTO} returns this
*/
proto.dialogue.CharacterProfilesDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.CharacterProfileDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterProfileDTO}
 */
proto.dialogue.CharacterProfilesDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.CharacterProfileDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterProfilesDTO} returns this
 */
proto.dialogue.CharacterProfilesDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.WorldContextDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.WorldContextDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.WorldContextDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.WorldContextDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.dialogue.LocationContextDTO.toObject(includeInstance, f),
    time: (f = msg.getTime()) && proto.dialogue.TimeContextDTO.toObject(includeInstance, f),
    weather: (f = msg.getWeather()) && proto.dialogue.WeatherContextDTO.toObject(includeInstance, f),
    scene: (f = msg.getScene()) && proto.dialogue.SceneContextDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.WorldContextDTO}
 */
proto.dialogue.WorldContextDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.WorldContextDTO;
  return proto.dialogue.WorldContextDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.WorldContextDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.WorldContextDTO}
 */
proto.dialogue.WorldContextDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.LocationContextDTO;
      reader.readMessage(value,proto.dialogue.LocationContextDTO.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.dialogue.TimeContextDTO;
      reader.readMessage(value,proto.dialogue.TimeContextDTO.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.dialogue.WeatherContextDTO;
      reader.readMessage(value,proto.dialogue.WeatherContextDTO.deserializeBinaryFromReader);
      msg.setWeather(value);
      break;
    case 4:
      var value = new proto.dialogue.SceneContextDTO;
      reader.readMessage(value,proto.dialogue.SceneContextDTO.deserializeBinaryFromReader);
      msg.setScene(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.WorldContextDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.WorldContextDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.WorldContextDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.WorldContextDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dialogue.LocationContextDTO.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dialogue.TimeContextDTO.serializeBinaryToWriter
    );
  }
  f = message.getWeather();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dialogue.WeatherContextDTO.serializeBinaryToWriter
    );
  }
  f = message.getScene();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dialogue.SceneContextDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional LocationContextDTO location = 1;
 * @return {?proto.dialogue.LocationContextDTO}
 */
proto.dialogue.WorldContextDTO.prototype.getLocation = function() {
  return /** @type{?proto.dialogue.LocationContextDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.LocationContextDTO, 1));
};


/**
 * @param {?proto.dialogue.LocationContextDTO|undefined} value
 * @return {!proto.dialogue.WorldContextDTO} returns this
*/
proto.dialogue.WorldContextDTO.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.WorldContextDTO} returns this
 */
proto.dialogue.WorldContextDTO.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.WorldContextDTO.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeContextDTO time = 2;
 * @return {?proto.dialogue.TimeContextDTO}
 */
proto.dialogue.WorldContextDTO.prototype.getTime = function() {
  return /** @type{?proto.dialogue.TimeContextDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.TimeContextDTO, 2));
};


/**
 * @param {?proto.dialogue.TimeContextDTO|undefined} value
 * @return {!proto.dialogue.WorldContextDTO} returns this
*/
proto.dialogue.WorldContextDTO.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.WorldContextDTO} returns this
 */
proto.dialogue.WorldContextDTO.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.WorldContextDTO.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WeatherContextDTO weather = 3;
 * @return {?proto.dialogue.WeatherContextDTO}
 */
proto.dialogue.WorldContextDTO.prototype.getWeather = function() {
  return /** @type{?proto.dialogue.WeatherContextDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.WeatherContextDTO, 3));
};


/**
 * @param {?proto.dialogue.WeatherContextDTO|undefined} value
 * @return {!proto.dialogue.WorldContextDTO} returns this
*/
proto.dialogue.WorldContextDTO.prototype.setWeather = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.WorldContextDTO} returns this
 */
proto.dialogue.WorldContextDTO.prototype.clearWeather = function() {
  return this.setWeather(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.WorldContextDTO.prototype.hasWeather = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SceneContextDTO scene = 4;
 * @return {?proto.dialogue.SceneContextDTO}
 */
proto.dialogue.WorldContextDTO.prototype.getScene = function() {
  return /** @type{?proto.dialogue.SceneContextDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.SceneContextDTO, 4));
};


/**
 * @param {?proto.dialogue.SceneContextDTO|undefined} value
 * @return {!proto.dialogue.WorldContextDTO} returns this
*/
proto.dialogue.WorldContextDTO.prototype.setScene = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.WorldContextDTO} returns this
 */
proto.dialogue.WorldContextDTO.prototype.clearScene = function() {
  return this.setScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.WorldContextDTO.prototype.hasScene = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string clazz = 5;
 * @return {string}
 */
proto.dialogue.WorldContextDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WorldContextDTO} returns this
 */
proto.dialogue.WorldContextDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.LocationContextDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.LocationContextDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.LocationContextDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.LocationContextDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    biome: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.LocationContextDTO}
 */
proto.dialogue.LocationContextDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.LocationContextDTO;
  return proto.dialogue.LocationContextDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.LocationContextDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.LocationContextDTO}
 */
proto.dialogue.LocationContextDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiome(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.LocationContextDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.LocationContextDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.LocationContextDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.LocationContextDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBiome();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.LocationContextDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationContextDTO} returns this
 */
proto.dialogue.LocationContextDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dialogue.LocationContextDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationContextDTO} returns this
 */
proto.dialogue.LocationContextDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.dialogue.LocationContextDTO.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationContextDTO} returns this
 */
proto.dialogue.LocationContextDTO.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string biome = 4;
 * @return {string}
 */
proto.dialogue.LocationContextDTO.prototype.getBiome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationContextDTO} returns this
 */
proto.dialogue.LocationContextDTO.prototype.setBiome = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string clazz = 5;
 * @return {string}
 */
proto.dialogue.LocationContextDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationContextDTO} returns this
 */
proto.dialogue.LocationContextDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.TimeContextDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.TimeContextDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.TimeContextDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.TimeContextDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeofday: jspb.Message.getFieldWithDefault(msg, 1, ""),
    day: jspb.Message.getFieldWithDefault(msg, 2, 0),
    month: jspb.Message.getFieldWithDefault(msg, 3, ""),
    year: jspb.Message.getFieldWithDefault(msg, 4, 0),
    season: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.TimeContextDTO}
 */
proto.dialogue.TimeContextDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.TimeContextDTO;
  return proto.dialogue.TimeContextDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.TimeContextDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.TimeContextDTO}
 */
proto.dialogue.TimeContextDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeofday(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeason(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.TimeContextDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.TimeContextDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.TimeContextDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.TimeContextDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeofday();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMonth();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSeason();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string timeOfDay = 1;
 * @return {string}
 */
proto.dialogue.TimeContextDTO.prototype.getTimeofday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.TimeContextDTO} returns this
 */
proto.dialogue.TimeContextDTO.prototype.setTimeofday = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 day = 2;
 * @return {number}
 */
proto.dialogue.TimeContextDTO.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dialogue.TimeContextDTO} returns this
 */
proto.dialogue.TimeContextDTO.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string month = 3;
 * @return {string}
 */
proto.dialogue.TimeContextDTO.prototype.getMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.TimeContextDTO} returns this
 */
proto.dialogue.TimeContextDTO.prototype.setMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 year = 4;
 * @return {number}
 */
proto.dialogue.TimeContextDTO.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dialogue.TimeContextDTO} returns this
 */
proto.dialogue.TimeContextDTO.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string season = 5;
 * @return {string}
 */
proto.dialogue.TimeContextDTO.prototype.getSeason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.TimeContextDTO} returns this
 */
proto.dialogue.TimeContextDTO.prototype.setSeason = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string clazz = 6;
 * @return {string}
 */
proto.dialogue.TimeContextDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.TimeContextDTO} returns this
 */
proto.dialogue.TimeContextDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.WeatherContextDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.WeatherContextDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.WeatherContextDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.WeatherContextDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    weather: jspb.Message.getFieldWithDefault(msg, 1, ""),
    temperature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wind: jspb.Message.getFieldWithDefault(msg, 3, ""),
    precipitation: jspb.Message.getFieldWithDefault(msg, 4, ""),
    visibility: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.WeatherContextDTO}
 */
proto.dialogue.WeatherContextDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.WeatherContextDTO;
  return proto.dialogue.WeatherContextDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.WeatherContextDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.WeatherContextDTO}
 */
proto.dialogue.WeatherContextDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeather(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemperature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWind(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrecipitation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisibility(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.WeatherContextDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.WeatherContextDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.WeatherContextDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.WeatherContextDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeather();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTemperature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrecipitation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVisibility();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string weather = 1;
 * @return {string}
 */
proto.dialogue.WeatherContextDTO.prototype.getWeather = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WeatherContextDTO} returns this
 */
proto.dialogue.WeatherContextDTO.prototype.setWeather = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string temperature = 2;
 * @return {string}
 */
proto.dialogue.WeatherContextDTO.prototype.getTemperature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WeatherContextDTO} returns this
 */
proto.dialogue.WeatherContextDTO.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string wind = 3;
 * @return {string}
 */
proto.dialogue.WeatherContextDTO.prototype.getWind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WeatherContextDTO} returns this
 */
proto.dialogue.WeatherContextDTO.prototype.setWind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string precipitation = 4;
 * @return {string}
 */
proto.dialogue.WeatherContextDTO.prototype.getPrecipitation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WeatherContextDTO} returns this
 */
proto.dialogue.WeatherContextDTO.prototype.setPrecipitation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string visibility = 5;
 * @return {string}
 */
proto.dialogue.WeatherContextDTO.prototype.getVisibility = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WeatherContextDTO} returns this
 */
proto.dialogue.WeatherContextDTO.prototype.setVisibility = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string clazz = 6;
 * @return {string}
 */
proto.dialogue.WeatherContextDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.WeatherContextDTO} returns this
 */
proto.dialogue.WeatherContextDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.SceneContextDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.SceneContextDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.SceneContextDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneContextDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    north: (f = msg.getNorth()) && proto.dialogue.DirectionSceneEntryDTO.toObject(includeInstance, f),
    northeast: (f = msg.getNortheast()) && proto.dialogue.DirectionSceneEntryDTO.toObject(includeInstance, f),
    east: (f = msg.getEast()) && proto.dialogue.DirectionSceneEntryDTO.toObject(includeInstance, f),
    southeast: (f = msg.getSoutheast()) && proto.dialogue.DirectionSceneEntryDTO.toObject(includeInstance, f),
    south: (f = msg.getSouth()) && proto.dialogue.DirectionSceneEntryDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.SceneContextDTO}
 */
proto.dialogue.SceneContextDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.SceneContextDTO;
  return proto.dialogue.SceneContextDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.SceneContextDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.SceneContextDTO}
 */
proto.dialogue.SceneContextDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.DirectionSceneEntryDTO;
      reader.readMessage(value,proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader);
      msg.setNorth(value);
      break;
    case 2:
      var value = new proto.dialogue.DirectionSceneEntryDTO;
      reader.readMessage(value,proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader);
      msg.setNortheast(value);
      break;
    case 3:
      var value = new proto.dialogue.DirectionSceneEntryDTO;
      reader.readMessage(value,proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader);
      msg.setEast(value);
      break;
    case 4:
      var value = new proto.dialogue.DirectionSceneEntryDTO;
      reader.readMessage(value,proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader);
      msg.setSoutheast(value);
      break;
    case 5:
      var value = new proto.dialogue.DirectionSceneEntryDTO;
      reader.readMessage(value,proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader);
      msg.setSouth(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.SceneContextDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.SceneContextDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.SceneContextDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneContextDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNorth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getNortheast();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getEast();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getSoutheast();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getSouth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional DirectionSceneEntryDTO north = 1;
 * @return {?proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.SceneContextDTO.prototype.getNorth = function() {
  return /** @type{?proto.dialogue.DirectionSceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DirectionSceneEntryDTO, 1));
};


/**
 * @param {?proto.dialogue.DirectionSceneEntryDTO|undefined} value
 * @return {!proto.dialogue.SceneContextDTO} returns this
*/
proto.dialogue.SceneContextDTO.prototype.setNorth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneContextDTO} returns this
 */
proto.dialogue.SceneContextDTO.prototype.clearNorth = function() {
  return this.setNorth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneContextDTO.prototype.hasNorth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DirectionSceneEntryDTO northEast = 2;
 * @return {?proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.SceneContextDTO.prototype.getNortheast = function() {
  return /** @type{?proto.dialogue.DirectionSceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DirectionSceneEntryDTO, 2));
};


/**
 * @param {?proto.dialogue.DirectionSceneEntryDTO|undefined} value
 * @return {!proto.dialogue.SceneContextDTO} returns this
*/
proto.dialogue.SceneContextDTO.prototype.setNortheast = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneContextDTO} returns this
 */
proto.dialogue.SceneContextDTO.prototype.clearNortheast = function() {
  return this.setNortheast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneContextDTO.prototype.hasNortheast = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DirectionSceneEntryDTO east = 3;
 * @return {?proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.SceneContextDTO.prototype.getEast = function() {
  return /** @type{?proto.dialogue.DirectionSceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DirectionSceneEntryDTO, 3));
};


/**
 * @param {?proto.dialogue.DirectionSceneEntryDTO|undefined} value
 * @return {!proto.dialogue.SceneContextDTO} returns this
*/
proto.dialogue.SceneContextDTO.prototype.setEast = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneContextDTO} returns this
 */
proto.dialogue.SceneContextDTO.prototype.clearEast = function() {
  return this.setEast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneContextDTO.prototype.hasEast = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DirectionSceneEntryDTO southEast = 4;
 * @return {?proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.SceneContextDTO.prototype.getSoutheast = function() {
  return /** @type{?proto.dialogue.DirectionSceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DirectionSceneEntryDTO, 4));
};


/**
 * @param {?proto.dialogue.DirectionSceneEntryDTO|undefined} value
 * @return {!proto.dialogue.SceneContextDTO} returns this
*/
proto.dialogue.SceneContextDTO.prototype.setSoutheast = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneContextDTO} returns this
 */
proto.dialogue.SceneContextDTO.prototype.clearSoutheast = function() {
  return this.setSoutheast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneContextDTO.prototype.hasSoutheast = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DirectionSceneEntryDTO south = 5;
 * @return {?proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.SceneContextDTO.prototype.getSouth = function() {
  return /** @type{?proto.dialogue.DirectionSceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DirectionSceneEntryDTO, 5));
};


/**
 * @param {?proto.dialogue.DirectionSceneEntryDTO|undefined} value
 * @return {!proto.dialogue.SceneContextDTO} returns this
*/
proto.dialogue.SceneContextDTO.prototype.setSouth = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneContextDTO} returns this
 */
proto.dialogue.SceneContextDTO.prototype.clearSouth = function() {
  return this.setSouth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneContextDTO.prototype.hasSouth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string clazz = 6;
 * @return {string}
 */
proto.dialogue.SceneContextDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneContextDTO} returns this
 */
proto.dialogue.SceneContextDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DirectionSceneEntryDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DirectionSceneEntryDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DirectionSceneEntryDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    near: (f = msg.getNear()) && proto.dialogue.SceneEntryDTO.toObject(includeInstance, f),
    mid: (f = msg.getMid()) && proto.dialogue.SceneEntryDTO.toObject(includeInstance, f),
    far: (f = msg.getFar()) && proto.dialogue.SceneEntryDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.DirectionSceneEntryDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DirectionSceneEntryDTO;
  return proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DirectionSceneEntryDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DirectionSceneEntryDTO}
 */
proto.dialogue.DirectionSceneEntryDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.SceneEntryDTO;
      reader.readMessage(value,proto.dialogue.SceneEntryDTO.deserializeBinaryFromReader);
      msg.setNear(value);
      break;
    case 2:
      var value = new proto.dialogue.SceneEntryDTO;
      reader.readMessage(value,proto.dialogue.SceneEntryDTO.deserializeBinaryFromReader);
      msg.setMid(value);
      break;
    case 3:
      var value = new proto.dialogue.SceneEntryDTO;
      reader.readMessage(value,proto.dialogue.SceneEntryDTO.deserializeBinaryFromReader);
      msg.setFar(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DirectionSceneEntryDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DirectionSceneEntryDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNear();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dialogue.SceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getMid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dialogue.SceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getFar();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dialogue.SceneEntryDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SceneEntryDTO near = 1;
 * @return {?proto.dialogue.SceneEntryDTO}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.getNear = function() {
  return /** @type{?proto.dialogue.SceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.SceneEntryDTO, 1));
};


/**
 * @param {?proto.dialogue.SceneEntryDTO|undefined} value
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
*/
proto.dialogue.DirectionSceneEntryDTO.prototype.setNear = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.clearNear = function() {
  return this.setNear(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.hasNear = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SceneEntryDTO mid = 2;
 * @return {?proto.dialogue.SceneEntryDTO}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.getMid = function() {
  return /** @type{?proto.dialogue.SceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.SceneEntryDTO, 2));
};


/**
 * @param {?proto.dialogue.SceneEntryDTO|undefined} value
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
*/
proto.dialogue.DirectionSceneEntryDTO.prototype.setMid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.clearMid = function() {
  return this.setMid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.hasMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SceneEntryDTO far = 3;
 * @return {?proto.dialogue.SceneEntryDTO}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.getFar = function() {
  return /** @type{?proto.dialogue.SceneEntryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.SceneEntryDTO, 3));
};


/**
 * @param {?proto.dialogue.SceneEntryDTO|undefined} value
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
*/
proto.dialogue.DirectionSceneEntryDTO.prototype.setFar = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.clearFar = function() {
  return this.setFar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.hasFar = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DirectionSceneEntryDTO} returns this
 */
proto.dialogue.DirectionSceneEntryDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.SceneEntryDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.SceneEntryDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.SceneEntryDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneEntryDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    biome: jspb.Message.getFieldWithDefault(msg, 1, ""),
    npcs: (f = msg.getNpcs()) && proto.dialogue.SceneNPCsDTO.toObject(includeInstance, f),
    items: (f = msg.getItems()) && proto.dialogue.SceneItemsDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.SceneEntryDTO}
 */
proto.dialogue.SceneEntryDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.SceneEntryDTO;
  return proto.dialogue.SceneEntryDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.SceneEntryDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.SceneEntryDTO}
 */
proto.dialogue.SceneEntryDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiome(value);
      break;
    case 2:
      var value = new proto.dialogue.SceneNPCsDTO;
      reader.readMessage(value,proto.dialogue.SceneNPCsDTO.deserializeBinaryFromReader);
      msg.setNpcs(value);
      break;
    case 3:
      var value = new proto.dialogue.SceneItemsDTO;
      reader.readMessage(value,proto.dialogue.SceneItemsDTO.deserializeBinaryFromReader);
      msg.setItems(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.SceneEntryDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.SceneEntryDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.SceneEntryDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneEntryDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBiome();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNpcs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dialogue.SceneNPCsDTO.serializeBinaryToWriter
    );
  }
  f = message.getItems();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dialogue.SceneItemsDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string biome = 1;
 * @return {string}
 */
proto.dialogue.SceneEntryDTO.prototype.getBiome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneEntryDTO} returns this
 */
proto.dialogue.SceneEntryDTO.prototype.setBiome = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SceneNPCsDTO NPCs = 2;
 * @return {?proto.dialogue.SceneNPCsDTO}
 */
proto.dialogue.SceneEntryDTO.prototype.getNpcs = function() {
  return /** @type{?proto.dialogue.SceneNPCsDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.SceneNPCsDTO, 2));
};


/**
 * @param {?proto.dialogue.SceneNPCsDTO|undefined} value
 * @return {!proto.dialogue.SceneEntryDTO} returns this
*/
proto.dialogue.SceneEntryDTO.prototype.setNpcs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneEntryDTO} returns this
 */
proto.dialogue.SceneEntryDTO.prototype.clearNpcs = function() {
  return this.setNpcs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneEntryDTO.prototype.hasNpcs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SceneItemsDTO items = 3;
 * @return {?proto.dialogue.SceneItemsDTO}
 */
proto.dialogue.SceneEntryDTO.prototype.getItems = function() {
  return /** @type{?proto.dialogue.SceneItemsDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.SceneItemsDTO, 3));
};


/**
 * @param {?proto.dialogue.SceneItemsDTO|undefined} value
 * @return {!proto.dialogue.SceneEntryDTO} returns this
*/
proto.dialogue.SceneEntryDTO.prototype.setItems = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.SceneEntryDTO} returns this
 */
proto.dialogue.SceneEntryDTO.prototype.clearItems = function() {
  return this.setItems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.SceneEntryDTO.prototype.hasItems = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.SceneEntryDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneEntryDTO} returns this
 */
proto.dialogue.SceneEntryDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.SceneNPCDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.SceneNPCDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.SceneNPCDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneNPCDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.SceneNPCDTO}
 */
proto.dialogue.SceneNPCDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.SceneNPCDTO;
  return proto.dialogue.SceneNPCDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.SceneNPCDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.SceneNPCDTO}
 */
proto.dialogue.SceneNPCDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.SceneNPCDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.SceneNPCDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.SceneNPCDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneNPCDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActivity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.SceneNPCDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneNPCDTO} returns this
 */
proto.dialogue.SceneNPCDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string activity = 2;
 * @return {string}
 */
proto.dialogue.SceneNPCDTO.prototype.getActivity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneNPCDTO} returns this
 */
proto.dialogue.SceneNPCDTO.prototype.setActivity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clazz = 3;
 * @return {string}
 */
proto.dialogue.SceneNPCDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneNPCDTO} returns this
 */
proto.dialogue.SceneNPCDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.SceneNPCsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.SceneNPCsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.SceneNPCsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.SceneNPCsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneNPCsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.SceneNPCDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.SceneNPCsDTO}
 */
proto.dialogue.SceneNPCsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.SceneNPCsDTO;
  return proto.dialogue.SceneNPCsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.SceneNPCsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.SceneNPCsDTO}
 */
proto.dialogue.SceneNPCsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.SceneNPCDTO;
      reader.readMessage(value,proto.dialogue.SceneNPCDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.SceneNPCsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.SceneNPCsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.SceneNPCsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneNPCsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.SceneNPCDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SceneNPCDTO arr = 1;
 * @return {!Array<!proto.dialogue.SceneNPCDTO>}
 */
proto.dialogue.SceneNPCsDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.SceneNPCDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.SceneNPCDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.SceneNPCDTO>} value
 * @return {!proto.dialogue.SceneNPCsDTO} returns this
*/
proto.dialogue.SceneNPCsDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.SceneNPCDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.SceneNPCDTO}
 */
proto.dialogue.SceneNPCsDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.SceneNPCDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.SceneNPCsDTO} returns this
 */
proto.dialogue.SceneNPCsDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.SceneItemDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.SceneItemDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.SceneItemDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneItemDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.SceneItemDTO}
 */
proto.dialogue.SceneItemDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.SceneItemDTO;
  return proto.dialogue.SceneItemDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.SceneItemDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.SceneItemDTO}
 */
proto.dialogue.SceneItemDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.SceneItemDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.SceneItemDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.SceneItemDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneItemDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.SceneItemDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneItemDTO} returns this
 */
proto.dialogue.SceneItemDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clazz = 2;
 * @return {string}
 */
proto.dialogue.SceneItemDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.SceneItemDTO} returns this
 */
proto.dialogue.SceneItemDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.SceneItemsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.SceneItemsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.SceneItemsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.SceneItemsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneItemsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.SceneItemDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.SceneItemsDTO}
 */
proto.dialogue.SceneItemsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.SceneItemsDTO;
  return proto.dialogue.SceneItemsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.SceneItemsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.SceneItemsDTO}
 */
proto.dialogue.SceneItemsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.SceneItemDTO;
      reader.readMessage(value,proto.dialogue.SceneItemDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.SceneItemsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.SceneItemsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.SceneItemsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.SceneItemsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.SceneItemDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SceneItemDTO arr = 1;
 * @return {!Array<!proto.dialogue.SceneItemDTO>}
 */
proto.dialogue.SceneItemsDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.SceneItemDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.SceneItemDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.SceneItemDTO>} value
 * @return {!proto.dialogue.SceneItemsDTO} returns this
*/
proto.dialogue.SceneItemsDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.SceneItemDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.SceneItemDTO}
 */
proto.dialogue.SceneItemsDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.SceneItemDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.SceneItemsDTO} returns this
 */
proto.dialogue.SceneItemsDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DialogueHistoryDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DialogueHistoryDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DialogueHistoryDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueHistoryDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicsnewesttooldest: (f = msg.getTopicsnewesttooldest()) && proto.dialogue.DialogueHistoryTopicsDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DialogueHistoryDTO}
 */
proto.dialogue.DialogueHistoryDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DialogueHistoryDTO;
  return proto.dialogue.DialogueHistoryDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DialogueHistoryDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DialogueHistoryDTO}
 */
proto.dialogue.DialogueHistoryDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.DialogueHistoryTopicsDTO;
      reader.readMessage(value,proto.dialogue.DialogueHistoryTopicsDTO.deserializeBinaryFromReader);
      msg.setTopicsnewesttooldest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DialogueHistoryDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DialogueHistoryDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DialogueHistoryDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueHistoryDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicsnewesttooldest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dialogue.DialogueHistoryTopicsDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DialogueHistoryTopicsDTO topicsNewestToOldest = 1;
 * @return {?proto.dialogue.DialogueHistoryTopicsDTO}
 */
proto.dialogue.DialogueHistoryDTO.prototype.getTopicsnewesttooldest = function() {
  return /** @type{?proto.dialogue.DialogueHistoryTopicsDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DialogueHistoryTopicsDTO, 1));
};


/**
 * @param {?proto.dialogue.DialogueHistoryTopicsDTO|undefined} value
 * @return {!proto.dialogue.DialogueHistoryDTO} returns this
*/
proto.dialogue.DialogueHistoryDTO.prototype.setTopicsnewesttooldest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DialogueHistoryDTO} returns this
 */
proto.dialogue.DialogueHistoryDTO.prototype.clearTopicsnewesttooldest = function() {
  return this.setTopicsnewesttooldest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DialogueHistoryDTO.prototype.hasTopicsnewesttooldest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string clazz = 2;
 * @return {string}
 */
proto.dialogue.DialogueHistoryDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueHistoryDTO} returns this
 */
proto.dialogue.DialogueHistoryDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DialogueHistoryTopicDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DialogueHistoryTopicDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueHistoryTopicDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stepsnewesttooldest: (f = msg.getStepsnewesttooldest()) && proto.dialogue.DialogueStepsDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DialogueHistoryTopicDTO}
 */
proto.dialogue.DialogueHistoryTopicDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DialogueHistoryTopicDTO;
  return proto.dialogue.DialogueHistoryTopicDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DialogueHistoryTopicDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DialogueHistoryTopicDTO}
 */
proto.dialogue.DialogueHistoryTopicDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicname(value);
      break;
    case 2:
      var value = new proto.dialogue.DialogueStepsDTO;
      reader.readMessage(value,proto.dialogue.DialogueStepsDTO.deserializeBinaryFromReader);
      msg.setStepsnewesttooldest(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DialogueHistoryTopicDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DialogueHistoryTopicDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueHistoryTopicDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStepsnewesttooldest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dialogue.DialogueStepsDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string topicName = 1;
 * @return {string}
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.getTopicname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueHistoryTopicDTO} returns this
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.setTopicname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DialogueStepsDTO stepsNewestToOldest = 2;
 * @return {?proto.dialogue.DialogueStepsDTO}
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.getStepsnewesttooldest = function() {
  return /** @type{?proto.dialogue.DialogueStepsDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DialogueStepsDTO, 2));
};


/**
 * @param {?proto.dialogue.DialogueStepsDTO|undefined} value
 * @return {!proto.dialogue.DialogueHistoryTopicDTO} returns this
*/
proto.dialogue.DialogueHistoryTopicDTO.prototype.setStepsnewesttooldest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DialogueHistoryTopicDTO} returns this
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.clearStepsnewesttooldest = function() {
  return this.setStepsnewesttooldest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.hasStepsnewesttooldest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string clazz = 3;
 * @return {string}
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueHistoryTopicDTO} returns this
 */
proto.dialogue.DialogueHistoryTopicDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.DialogueHistoryTopicsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DialogueHistoryTopicsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DialogueHistoryTopicsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DialogueHistoryTopicsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueHistoryTopicsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.DialogueHistoryTopicDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DialogueHistoryTopicsDTO}
 */
proto.dialogue.DialogueHistoryTopicsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DialogueHistoryTopicsDTO;
  return proto.dialogue.DialogueHistoryTopicsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DialogueHistoryTopicsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DialogueHistoryTopicsDTO}
 */
proto.dialogue.DialogueHistoryTopicsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.DialogueHistoryTopicDTO;
      reader.readMessage(value,proto.dialogue.DialogueHistoryTopicDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DialogueHistoryTopicsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DialogueHistoryTopicsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DialogueHistoryTopicsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueHistoryTopicsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.DialogueHistoryTopicDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DialogueHistoryTopicDTO arr = 1;
 * @return {!Array<!proto.dialogue.DialogueHistoryTopicDTO>}
 */
proto.dialogue.DialogueHistoryTopicsDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.DialogueHistoryTopicDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.DialogueHistoryTopicDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.DialogueHistoryTopicDTO>} value
 * @return {!proto.dialogue.DialogueHistoryTopicsDTO} returns this
*/
proto.dialogue.DialogueHistoryTopicsDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.DialogueHistoryTopicDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.DialogueHistoryTopicDTO}
 */
proto.dialogue.DialogueHistoryTopicsDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.DialogueHistoryTopicDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.DialogueHistoryTopicsDTO} returns this
 */
proto.dialogue.DialogueHistoryTopicsDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DialogueStepDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DialogueStepDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DialogueStepDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueStepDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerstep: (f = msg.getPlayerstep()) && proto.dialogue.PlayerCharacterStepDTO.toObject(includeInstance, f),
    aistep: (f = msg.getAistep()) && proto.dialogue.AiCharacterStepDTO.toObject(includeInstance, f),
    narration: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outcome: (f = msg.getOutcome()) && proto.dialogue.StepOutcomeDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DialogueStepDTO}
 */
proto.dialogue.DialogueStepDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DialogueStepDTO;
  return proto.dialogue.DialogueStepDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DialogueStepDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DialogueStepDTO}
 */
proto.dialogue.DialogueStepDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.PlayerCharacterStepDTO;
      reader.readMessage(value,proto.dialogue.PlayerCharacterStepDTO.deserializeBinaryFromReader);
      msg.setPlayerstep(value);
      break;
    case 2:
      var value = new proto.dialogue.AiCharacterStepDTO;
      reader.readMessage(value,proto.dialogue.AiCharacterStepDTO.deserializeBinaryFromReader);
      msg.setAistep(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNarration(value);
      break;
    case 4:
      var value = new proto.dialogue.StepOutcomeDTO;
      reader.readMessage(value,proto.dialogue.StepOutcomeDTO.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DialogueStepDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DialogueStepDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DialogueStepDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueStepDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerstep();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dialogue.PlayerCharacterStepDTO.serializeBinaryToWriter
    );
  }
  f = message.getAistep();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dialogue.AiCharacterStepDTO.serializeBinaryToWriter
    );
  }
  f = message.getNarration();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dialogue.StepOutcomeDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional PlayerCharacterStepDTO playerStep = 1;
 * @return {?proto.dialogue.PlayerCharacterStepDTO}
 */
proto.dialogue.DialogueStepDTO.prototype.getPlayerstep = function() {
  return /** @type{?proto.dialogue.PlayerCharacterStepDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.PlayerCharacterStepDTO, 1));
};


/**
 * @param {?proto.dialogue.PlayerCharacterStepDTO|undefined} value
 * @return {!proto.dialogue.DialogueStepDTO} returns this
*/
proto.dialogue.DialogueStepDTO.prototype.setPlayerstep = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DialogueStepDTO} returns this
 */
proto.dialogue.DialogueStepDTO.prototype.clearPlayerstep = function() {
  return this.setPlayerstep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DialogueStepDTO.prototype.hasPlayerstep = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AiCharacterStepDTO aiStep = 2;
 * @return {?proto.dialogue.AiCharacterStepDTO}
 */
proto.dialogue.DialogueStepDTO.prototype.getAistep = function() {
  return /** @type{?proto.dialogue.AiCharacterStepDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.AiCharacterStepDTO, 2));
};


/**
 * @param {?proto.dialogue.AiCharacterStepDTO|undefined} value
 * @return {!proto.dialogue.DialogueStepDTO} returns this
*/
proto.dialogue.DialogueStepDTO.prototype.setAistep = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DialogueStepDTO} returns this
 */
proto.dialogue.DialogueStepDTO.prototype.clearAistep = function() {
  return this.setAistep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DialogueStepDTO.prototype.hasAistep = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string narration = 3;
 * @return {string}
 */
proto.dialogue.DialogueStepDTO.prototype.getNarration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueStepDTO} returns this
 */
proto.dialogue.DialogueStepDTO.prototype.setNarration = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional StepOutcomeDTO outcome = 4;
 * @return {?proto.dialogue.StepOutcomeDTO}
 */
proto.dialogue.DialogueStepDTO.prototype.getOutcome = function() {
  return /** @type{?proto.dialogue.StepOutcomeDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.StepOutcomeDTO, 4));
};


/**
 * @param {?proto.dialogue.StepOutcomeDTO|undefined} value
 * @return {!proto.dialogue.DialogueStepDTO} returns this
*/
proto.dialogue.DialogueStepDTO.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.DialogueStepDTO} returns this
 */
proto.dialogue.DialogueStepDTO.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.DialogueStepDTO.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string clazz = 5;
 * @return {string}
 */
proto.dialogue.DialogueStepDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueStepDTO} returns this
 */
proto.dialogue.DialogueStepDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.DialogueStepsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DialogueStepsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DialogueStepsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DialogueStepsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueStepsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.DialogueStepDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DialogueStepsDTO}
 */
proto.dialogue.DialogueStepsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DialogueStepsDTO;
  return proto.dialogue.DialogueStepsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DialogueStepsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DialogueStepsDTO}
 */
proto.dialogue.DialogueStepsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.DialogueStepDTO;
      reader.readMessage(value,proto.dialogue.DialogueStepDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DialogueStepsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DialogueStepsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DialogueStepsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueStepsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.DialogueStepDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DialogueStepDTO arr = 1;
 * @return {!Array<!proto.dialogue.DialogueStepDTO>}
 */
proto.dialogue.DialogueStepsDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.DialogueStepDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.DialogueStepDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.DialogueStepDTO>} value
 * @return {!proto.dialogue.DialogueStepsDTO} returns this
*/
proto.dialogue.DialogueStepsDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.DialogueStepDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.DialogueStepDTO}
 */
proto.dialogue.DialogueStepsDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.DialogueStepDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.DialogueStepsDTO} returns this
 */
proto.dialogue.DialogueStepsDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DiceRollResultDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DiceRollResultDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DiceRollResultDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DiceRollResultDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    roll: jspb.Message.getFieldWithDefault(msg, 1, 0),
    outcome: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scaletype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    usedscaleconfig: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DiceRollResultDTO}
 */
proto.dialogue.DiceRollResultDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DiceRollResultDTO;
  return proto.dialogue.DiceRollResultDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DiceRollResultDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DiceRollResultDTO}
 */
proto.dialogue.DiceRollResultDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoll(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutcome(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScaletype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsedscaleconfig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DiceRollResultDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DiceRollResultDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DiceRollResultDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DiceRollResultDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoll();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOutcome();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScaletype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsedscaleconfig();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 roll = 1;
 * @return {number}
 */
proto.dialogue.DiceRollResultDTO.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dialogue.DiceRollResultDTO} returns this
 */
proto.dialogue.DiceRollResultDTO.prototype.setRoll = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string outcome = 2;
 * @return {string}
 */
proto.dialogue.DiceRollResultDTO.prototype.getOutcome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DiceRollResultDTO} returns this
 */
proto.dialogue.DiceRollResultDTO.prototype.setOutcome = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string scaleType = 3;
 * @return {string}
 */
proto.dialogue.DiceRollResultDTO.prototype.getScaletype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DiceRollResultDTO} returns this
 */
proto.dialogue.DiceRollResultDTO.prototype.setScaletype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string usedScaleConfig = 4;
 * @return {string}
 */
proto.dialogue.DiceRollResultDTO.prototype.getUsedscaleconfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DiceRollResultDTO} returns this
 */
proto.dialogue.DiceRollResultDTO.prototype.setUsedscaleconfig = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string clazz = 5;
 * @return {string}
 */
proto.dialogue.DiceRollResultDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DiceRollResultDTO} returns this
 */
proto.dialogue.DiceRollResultDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.PlayerCharacterStepDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.PlayerCharacterStepDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.PlayerCharacterStepDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selecteddialogueoption: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dicerollresult: (f = msg.getDicerollresult()) && proto.dialogue.DiceRollResultDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.PlayerCharacterStepDTO}
 */
proto.dialogue.PlayerCharacterStepDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.PlayerCharacterStepDTO;
  return proto.dialogue.PlayerCharacterStepDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.PlayerCharacterStepDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.PlayerCharacterStepDTO}
 */
proto.dialogue.PlayerCharacterStepDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelecteddialogueoption(value);
      break;
    case 3:
      var value = new proto.dialogue.DiceRollResultDTO;
      reader.readMessage(value,proto.dialogue.DiceRollResultDTO.deserializeBinaryFromReader);
      msg.setDicerollresult(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.PlayerCharacterStepDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.PlayerCharacterStepDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.PlayerCharacterStepDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelecteddialogueoption();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDicerollresult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dialogue.DiceRollResultDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string characterId = 1;
 * @return {string}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.getCharacterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.PlayerCharacterStepDTO} returns this
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.setCharacterid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string selectedDialogueOption = 2;
 * @return {string}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.getSelecteddialogueoption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.PlayerCharacterStepDTO} returns this
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.setSelecteddialogueoption = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DiceRollResultDTO diceRollResult = 3;
 * @return {?proto.dialogue.DiceRollResultDTO}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.getDicerollresult = function() {
  return /** @type{?proto.dialogue.DiceRollResultDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DiceRollResultDTO, 3));
};


/**
 * @param {?proto.dialogue.DiceRollResultDTO|undefined} value
 * @return {!proto.dialogue.PlayerCharacterStepDTO} returns this
*/
proto.dialogue.PlayerCharacterStepDTO.prototype.setDicerollresult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.PlayerCharacterStepDTO} returns this
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.clearDicerollresult = function() {
  return this.setDicerollresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.hasDicerollresult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.PlayerCharacterStepDTO} returns this
 */
proto.dialogue.PlayerCharacterStepDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.AiCharacterStepDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.AiCharacterStepDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.AiCharacterStepDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.AiCharacterStepDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selecteddialogueoption: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dicerollresult: (f = msg.getDicerollresult()) && proto.dialogue.DiceRollResultDTO.toObject(includeInstance, f),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.AiCharacterStepDTO}
 */
proto.dialogue.AiCharacterStepDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.AiCharacterStepDTO;
  return proto.dialogue.AiCharacterStepDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.AiCharacterStepDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.AiCharacterStepDTO}
 */
proto.dialogue.AiCharacterStepDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelecteddialogueoption(value);
      break;
    case 3:
      var value = new proto.dialogue.DiceRollResultDTO;
      reader.readMessage(value,proto.dialogue.DiceRollResultDTO.deserializeBinaryFromReader);
      msg.setDicerollresult(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.AiCharacterStepDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.AiCharacterStepDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.AiCharacterStepDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.AiCharacterStepDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelecteddialogueoption();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDicerollresult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dialogue.DiceRollResultDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string characterId = 1;
 * @return {string}
 */
proto.dialogue.AiCharacterStepDTO.prototype.getCharacterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.AiCharacterStepDTO} returns this
 */
proto.dialogue.AiCharacterStepDTO.prototype.setCharacterid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string selectedDialogueOption = 2;
 * @return {string}
 */
proto.dialogue.AiCharacterStepDTO.prototype.getSelecteddialogueoption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.AiCharacterStepDTO} returns this
 */
proto.dialogue.AiCharacterStepDTO.prototype.setSelecteddialogueoption = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DiceRollResultDTO diceRollResult = 3;
 * @return {?proto.dialogue.DiceRollResultDTO}
 */
proto.dialogue.AiCharacterStepDTO.prototype.getDicerollresult = function() {
  return /** @type{?proto.dialogue.DiceRollResultDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DiceRollResultDTO, 3));
};


/**
 * @param {?proto.dialogue.DiceRollResultDTO|undefined} value
 * @return {!proto.dialogue.AiCharacterStepDTO} returns this
*/
proto.dialogue.AiCharacterStepDTO.prototype.setDicerollresult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.AiCharacterStepDTO} returns this
 */
proto.dialogue.AiCharacterStepDTO.prototype.clearDicerollresult = function() {
  return this.setDicerollresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.AiCharacterStepDTO.prototype.hasDicerollresult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.AiCharacterStepDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.AiCharacterStepDTO} returns this
 */
proto.dialogue.AiCharacterStepDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.StepOutcomeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.StepOutcomeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.StepOutcomeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.StepOutcomeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterchangesMap: (f = msg.getCharacterchangesMap()) ? f.toObject(includeInstance, proto.dialogue.CharacterChangesDTO.toObject) : [],
    newtopicname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stepoutcome: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.StepOutcomeDTO}
 */
proto.dialogue.StepOutcomeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.StepOutcomeDTO;
  return proto.dialogue.StepOutcomeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.StepOutcomeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.StepOutcomeDTO}
 */
proto.dialogue.StepOutcomeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCharacterchangesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.dialogue.CharacterChangesDTO.deserializeBinaryFromReader, "", new proto.dialogue.CharacterChangesDTO());
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtopicname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStepoutcome(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.StepOutcomeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.StepOutcomeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.StepOutcomeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.StepOutcomeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterchangesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.dialogue.CharacterChangesDTO.serializeBinaryToWriter);
  }
  f = message.getNewtopicname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStepoutcome();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * map<string, CharacterChangesDTO> characterChanges = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.dialogue.CharacterChangesDTO>}
 */
proto.dialogue.StepOutcomeDTO.prototype.getCharacterchangesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.dialogue.CharacterChangesDTO>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.dialogue.CharacterChangesDTO));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dialogue.StepOutcomeDTO} returns this
 */
proto.dialogue.StepOutcomeDTO.prototype.clearCharacterchangesMap = function() {
  this.getCharacterchangesMap().clear();
  return this;};


/**
 * optional string newTopicName = 2;
 * @return {string}
 */
proto.dialogue.StepOutcomeDTO.prototype.getNewtopicname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.StepOutcomeDTO} returns this
 */
proto.dialogue.StepOutcomeDTO.prototype.setNewtopicname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stepOutcome = 3;
 * @return {string}
 */
proto.dialogue.StepOutcomeDTO.prototype.getStepoutcome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.StepOutcomeDTO} returns this
 */
proto.dialogue.StepOutcomeDTO.prototype.setStepoutcome = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.StepOutcomeDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.StepOutcomeDTO} returns this
 */
proto.dialogue.StepOutcomeDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.CharacterChangeDTO.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterChangeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterChangeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterChangeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterChangeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    markunfulfilledgoalsasfulfilledList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    addunfulfilledgoalsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    removeunfulfilledgoalsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    changedialogueattitudeto: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addorremoveormodifyitemininventory: (f = msg.getAddorremoveormodifyitemininventory()) && proto.dialogue.InventoryChangesDTO.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterChangeDTO}
 */
proto.dialogue.CharacterChangeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterChangeDTO;
  return proto.dialogue.CharacterChangeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterChangeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterChangeDTO}
 */
proto.dialogue.CharacterChangeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMarkunfulfilledgoalsasfulfilled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddunfulfilledgoals(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemoveunfulfilledgoals(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangedialogueattitudeto(value);
      break;
    case 5:
      var value = new proto.dialogue.InventoryChangesDTO;
      reader.readMessage(value,proto.dialogue.InventoryChangesDTO.deserializeBinaryFromReader);
      msg.setAddorremoveormodifyitemininventory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterChangeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterChangeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterChangeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterChangeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarkunfulfilledgoalsasfulfilledList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAddunfulfilledgoalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRemoveunfulfilledgoalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getChangedialogueattitudeto();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddorremoveormodifyitemininventory();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dialogue.InventoryChangesDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string markUnfulfilledGoalsAsFulfilled = 1;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterChangeDTO.prototype.getMarkunfulfilledgoalsasfulfilledList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.setMarkunfulfilledgoalsasfulfilledList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.addMarkunfulfilledgoalsasfulfilled = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.clearMarkunfulfilledgoalsasfulfilledList = function() {
  return this.setMarkunfulfilledgoalsasfulfilledList([]);
};


/**
 * repeated string addUnfulfilledGoals = 2;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterChangeDTO.prototype.getAddunfulfilledgoalsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.setAddunfulfilledgoalsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.addAddunfulfilledgoals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.clearAddunfulfilledgoalsList = function() {
  return this.setAddunfulfilledgoalsList([]);
};


/**
 * repeated string removeUnfulfilledGoals = 3;
 * @return {!Array<string>}
 */
proto.dialogue.CharacterChangeDTO.prototype.getRemoveunfulfilledgoalsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.setRemoveunfulfilledgoalsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.addRemoveunfulfilledgoals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.clearRemoveunfulfilledgoalsList = function() {
  return this.setRemoveunfulfilledgoalsList([]);
};


/**
 * optional string changeDialogueAttitudeTo = 4;
 * @return {string}
 */
proto.dialogue.CharacterChangeDTO.prototype.getChangedialogueattitudeto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.setChangedialogueattitudeto = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional InventoryChangesDTO addOrRemoveOrModifyItemInInventory = 5;
 * @return {?proto.dialogue.InventoryChangesDTO}
 */
proto.dialogue.CharacterChangeDTO.prototype.getAddorremoveormodifyitemininventory = function() {
  return /** @type{?proto.dialogue.InventoryChangesDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.InventoryChangesDTO, 5));
};


/**
 * @param {?proto.dialogue.InventoryChangesDTO|undefined} value
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
*/
proto.dialogue.CharacterChangeDTO.prototype.setAddorremoveormodifyitemininventory = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.CharacterChangeDTO} returns this
 */
proto.dialogue.CharacterChangeDTO.prototype.clearAddorremoveormodifyitemininventory = function() {
  return this.setAddorremoveormodifyitemininventory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.CharacterChangeDTO.prototype.hasAddorremoveormodifyitemininventory = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.CharacterChangesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterChangesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterChangesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterChangesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterChangesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.CharacterChangeDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterChangesDTO}
 */
proto.dialogue.CharacterChangesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterChangesDTO;
  return proto.dialogue.CharacterChangesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterChangesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterChangesDTO}
 */
proto.dialogue.CharacterChangesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.CharacterChangeDTO;
      reader.readMessage(value,proto.dialogue.CharacterChangeDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterChangesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterChangesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterChangesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterChangesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.CharacterChangeDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CharacterChangeDTO arr = 1;
 * @return {!Array<!proto.dialogue.CharacterChangeDTO>}
 */
proto.dialogue.CharacterChangesDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.CharacterChangeDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.CharacterChangeDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.CharacterChangeDTO>} value
 * @return {!proto.dialogue.CharacterChangesDTO} returns this
*/
proto.dialogue.CharacterChangesDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.CharacterChangeDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterChangeDTO}
 */
proto.dialogue.CharacterChangesDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.CharacterChangeDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.CharacterChangesDTO} returns this
 */
proto.dialogue.CharacterChangesDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.InventoryChangeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.InventoryChangeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.InventoryChangeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InventoryChangeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantitydeltachange: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.InventoryChangeDTO}
 */
proto.dialogue.InventoryChangeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.InventoryChangeDTO;
  return proto.dialogue.InventoryChangeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.InventoryChangeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.InventoryChangeDTO}
 */
proto.dialogue.InventoryChangeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantitydeltachange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.InventoryChangeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.InventoryChangeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.InventoryChangeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InventoryChangeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantitydeltachange();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string itemId = 1;
 * @return {string}
 */
proto.dialogue.InventoryChangeDTO.prototype.getItemid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InventoryChangeDTO} returns this
 */
proto.dialogue.InventoryChangeDTO.prototype.setItemid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 quantityDeltaChange = 2;
 * @return {number}
 */
proto.dialogue.InventoryChangeDTO.prototype.getQuantitydeltachange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dialogue.InventoryChangeDTO} returns this
 */
proto.dialogue.InventoryChangeDTO.prototype.setQuantitydeltachange = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.InventoryChangesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.InventoryChangesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.InventoryChangesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.InventoryChangesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InventoryChangesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrList: jspb.Message.toObjectList(msg.getArrList(),
    proto.dialogue.InventoryChangeDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.InventoryChangesDTO}
 */
proto.dialogue.InventoryChangesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.InventoryChangesDTO;
  return proto.dialogue.InventoryChangesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.InventoryChangesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.InventoryChangesDTO}
 */
proto.dialogue.InventoryChangesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.InventoryChangeDTO;
      reader.readMessage(value,proto.dialogue.InventoryChangeDTO.deserializeBinaryFromReader);
      msg.addArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.InventoryChangesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.InventoryChangesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.InventoryChangesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InventoryChangesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.InventoryChangeDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InventoryChangeDTO arr = 1;
 * @return {!Array<!proto.dialogue.InventoryChangeDTO>}
 */
proto.dialogue.InventoryChangesDTO.prototype.getArrList = function() {
  return /** @type{!Array<!proto.dialogue.InventoryChangeDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.InventoryChangeDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.InventoryChangeDTO>} value
 * @return {!proto.dialogue.InventoryChangesDTO} returns this
*/
proto.dialogue.InventoryChangesDTO.prototype.setArrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.InventoryChangeDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.InventoryChangeDTO}
 */
proto.dialogue.InventoryChangesDTO.prototype.addArr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.InventoryChangeDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.InventoryChangesDTO} returns this
 */
proto.dialogue.InventoryChangesDTO.prototype.clearArrList = function() {
  return this.setArrList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.KnowledgeBaseDTO.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.KnowledgeBaseDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.KnowledgeBaseDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.KnowledgeBaseDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    charactersList: jspb.Message.toObjectList(msg.getCharactersList(),
    proto.dialogue.CharacterKnowledgeBaseDTO.toObject, includeInstance),
    factionsList: jspb.Message.toObjectList(msg.getFactionsList(),
    proto.dialogue.FactionKnowledgeBaseDTO.toObject, includeInstance),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.dialogue.LocationKnowledgeBaseDTO.toObject, includeInstance),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.dialogue.ItemKnowledgeBaseDTO.toObject, includeInstance),
    clazz: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.KnowledgeBaseDTO}
 */
proto.dialogue.KnowledgeBaseDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.KnowledgeBaseDTO;
  return proto.dialogue.KnowledgeBaseDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.KnowledgeBaseDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.KnowledgeBaseDTO}
 */
proto.dialogue.KnowledgeBaseDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.CharacterKnowledgeBaseDTO;
      reader.readMessage(value,proto.dialogue.CharacterKnowledgeBaseDTO.deserializeBinaryFromReader);
      msg.addCharacters(value);
      break;
    case 2:
      var value = new proto.dialogue.FactionKnowledgeBaseDTO;
      reader.readMessage(value,proto.dialogue.FactionKnowledgeBaseDTO.deserializeBinaryFromReader);
      msg.addFactions(value);
      break;
    case 3:
      var value = new proto.dialogue.LocationKnowledgeBaseDTO;
      reader.readMessage(value,proto.dialogue.LocationKnowledgeBaseDTO.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    case 4:
      var value = new proto.dialogue.ItemKnowledgeBaseDTO;
      reader.readMessage(value,proto.dialogue.ItemKnowledgeBaseDTO.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.KnowledgeBaseDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.KnowledgeBaseDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.KnowledgeBaseDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharactersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.CharacterKnowledgeBaseDTO.serializeBinaryToWriter
    );
  }
  f = message.getFactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dialogue.FactionKnowledgeBaseDTO.serializeBinaryToWriter
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dialogue.LocationKnowledgeBaseDTO.serializeBinaryToWriter
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dialogue.ItemKnowledgeBaseDTO.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated CharacterKnowledgeBaseDTO characters = 1;
 * @return {!Array<!proto.dialogue.CharacterKnowledgeBaseDTO>}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.getCharactersList = function() {
  return /** @type{!Array<!proto.dialogue.CharacterKnowledgeBaseDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.CharacterKnowledgeBaseDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.CharacterKnowledgeBaseDTO>} value
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
*/
proto.dialogue.KnowledgeBaseDTO.prototype.setCharactersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.CharacterKnowledgeBaseDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.addCharacters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.CharacterKnowledgeBaseDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
 */
proto.dialogue.KnowledgeBaseDTO.prototype.clearCharactersList = function() {
  return this.setCharactersList([]);
};


/**
 * repeated FactionKnowledgeBaseDTO factions = 2;
 * @return {!Array<!proto.dialogue.FactionKnowledgeBaseDTO>}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.getFactionsList = function() {
  return /** @type{!Array<!proto.dialogue.FactionKnowledgeBaseDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.FactionKnowledgeBaseDTO, 2));
};


/**
 * @param {!Array<!proto.dialogue.FactionKnowledgeBaseDTO>} value
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
*/
proto.dialogue.KnowledgeBaseDTO.prototype.setFactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.dialogue.FactionKnowledgeBaseDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.addFactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.dialogue.FactionKnowledgeBaseDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
 */
proto.dialogue.KnowledgeBaseDTO.prototype.clearFactionsList = function() {
  return this.setFactionsList([]);
};


/**
 * repeated LocationKnowledgeBaseDTO locations = 3;
 * @return {!Array<!proto.dialogue.LocationKnowledgeBaseDTO>}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.getLocationsList = function() {
  return /** @type{!Array<!proto.dialogue.LocationKnowledgeBaseDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.LocationKnowledgeBaseDTO, 3));
};


/**
 * @param {!Array<!proto.dialogue.LocationKnowledgeBaseDTO>} value
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
*/
proto.dialogue.KnowledgeBaseDTO.prototype.setLocationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.dialogue.LocationKnowledgeBaseDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dialogue.LocationKnowledgeBaseDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
 */
proto.dialogue.KnowledgeBaseDTO.prototype.clearLocationsList = function() {
  return this.setLocationsList([]);
};


/**
 * repeated ItemKnowledgeBaseDTO items = 4;
 * @return {!Array<!proto.dialogue.ItemKnowledgeBaseDTO>}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.dialogue.ItemKnowledgeBaseDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.ItemKnowledgeBaseDTO, 4));
};


/**
 * @param {!Array<!proto.dialogue.ItemKnowledgeBaseDTO>} value
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
*/
proto.dialogue.KnowledgeBaseDTO.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.dialogue.ItemKnowledgeBaseDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dialogue.ItemKnowledgeBaseDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
 */
proto.dialogue.KnowledgeBaseDTO.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional string clazz = 5;
 * @return {string}
 */
proto.dialogue.KnowledgeBaseDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.KnowledgeBaseDTO} returns this
 */
proto.dialogue.KnowledgeBaseDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.CharacterKnowledgeBaseDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.CharacterKnowledgeBaseDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterKnowledgeBaseDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    locationid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    factionid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.CharacterKnowledgeBaseDTO;
  return proto.dialogue.CharacterKnowledgeBaseDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.CharacterKnowledgeBaseDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFactionid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.CharacterKnowledgeBaseDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.CharacterKnowledgeBaseDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.CharacterKnowledgeBaseDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocationid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFactionid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO} returns this
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO} returns this
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO} returns this
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string locationId = 4;
 * @return {string}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.getLocationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO} returns this
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.setLocationid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string factionId = 5;
 * @return {string}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.getFactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO} returns this
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.setFactionid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string clazz = 6;
 * @return {string}
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.CharacterKnowledgeBaseDTO} returns this
 */
proto.dialogue.CharacterKnowledgeBaseDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.FactionKnowledgeBaseDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.FactionKnowledgeBaseDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.FactionKnowledgeBaseDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO}
 */
proto.dialogue.FactionKnowledgeBaseDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.FactionKnowledgeBaseDTO;
  return proto.dialogue.FactionKnowledgeBaseDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.FactionKnowledgeBaseDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO}
 */
proto.dialogue.FactionKnowledgeBaseDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.FactionKnowledgeBaseDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.FactionKnowledgeBaseDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.FactionKnowledgeBaseDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO} returns this
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO} returns this
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO} returns this
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FactionKnowledgeBaseDTO} returns this
 */
proto.dialogue.FactionKnowledgeBaseDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.LocationKnowledgeBaseDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.LocationKnowledgeBaseDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.LocationKnowledgeBaseDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentlocationchain: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO}
 */
proto.dialogue.LocationKnowledgeBaseDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.LocationKnowledgeBaseDTO;
  return proto.dialogue.LocationKnowledgeBaseDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.LocationKnowledgeBaseDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO}
 */
proto.dialogue.LocationKnowledgeBaseDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentlocationchain(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.LocationKnowledgeBaseDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.LocationKnowledgeBaseDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.LocationKnowledgeBaseDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentlocationchain();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO} returns this
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO} returns this
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO} returns this
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string parentLocationChain = 4;
 * @return {string}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.getParentlocationchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO} returns this
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.setParentlocationchain = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string clazz = 5;
 * @return {string}
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.LocationKnowledgeBaseDTO} returns this
 */
proto.dialogue.LocationKnowledgeBaseDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.ItemKnowledgeBaseDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.ItemKnowledgeBaseDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.ItemKnowledgeBaseDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO}
 */
proto.dialogue.ItemKnowledgeBaseDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.ItemKnowledgeBaseDTO;
  return proto.dialogue.ItemKnowledgeBaseDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.ItemKnowledgeBaseDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO}
 */
proto.dialogue.ItemKnowledgeBaseDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.ItemKnowledgeBaseDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.ItemKnowledgeBaseDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.ItemKnowledgeBaseDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO} returns this
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO} returns this
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO} returns this
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.ItemKnowledgeBaseDTO} returns this
 */
proto.dialogue.ItemKnowledgeBaseDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.GeneratePlayerDialogueOptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogueid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    directionsquantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    variations: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scaletype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsRequest}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.GeneratePlayerDialogueOptionsRequest;
  return proto.dialogue.GeneratePlayerDialogueOptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsRequest}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialogueid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirectionsquantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVariations(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScaletype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.GeneratePlayerDialogueOptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogueid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDirectionsquantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVariations();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getScaletype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string dialogueId = 1;
 * @return {string}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.getDialogueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} returns this
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.setDialogueid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 directionsQuantity = 2;
 * @return {number}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.getDirectionsquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} returns this
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.setDirectionsquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 variations = 3;
 * @return {number}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.getVariations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} returns this
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.setVariations = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string scaleType = 4;
 * @return {string}
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.getScaletype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsRequest} returns this
 */
proto.dialogue.GeneratePlayerDialogueOptionsRequest.prototype.setScaletype = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.GeneratePlayerDialogueOptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.GeneratePlayerDialogueOptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogueoptionsList: jspb.Message.toObjectList(msg.getDialogueoptionsList(),
    proto.dialogue.DialogueOptionDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsResponse}
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.GeneratePlayerDialogueOptionsResponse;
  return proto.dialogue.GeneratePlayerDialogueOptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.GeneratePlayerDialogueOptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsResponse}
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dialogue.DialogueOptionDTO;
      reader.readMessage(value,proto.dialogue.DialogueOptionDTO.deserializeBinaryFromReader);
      msg.addDialogueoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.GeneratePlayerDialogueOptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.GeneratePlayerDialogueOptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogueoptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dialogue.DialogueOptionDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DialogueOptionDTO dialogueOptions = 1;
 * @return {!Array<!proto.dialogue.DialogueOptionDTO>}
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.prototype.getDialogueoptionsList = function() {
  return /** @type{!Array<!proto.dialogue.DialogueOptionDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.DialogueOptionDTO, 1));
};


/**
 * @param {!Array<!proto.dialogue.DialogueOptionDTO>} value
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsResponse} returns this
*/
proto.dialogue.GeneratePlayerDialogueOptionsResponse.prototype.setDialogueoptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dialogue.DialogueOptionDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.DialogueOptionDTO}
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.prototype.addDialogueoptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dialogue.DialogueOptionDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.GeneratePlayerDialogueOptionsResponse} returns this
 */
proto.dialogue.GeneratePlayerDialogueOptionsResponse.prototype.clearDialogueoptionsList = function() {
  return this.setDialogueoptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.DialogueOptionDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.DialogueOptionDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.DialogueOptionDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueOptionDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    explanation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dialoguedirection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    riskimpact: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clazz: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.DialogueOptionDTO}
 */
proto.dialogue.DialogueOptionDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.DialogueOptionDTO;
  return proto.dialogue.DialogueOptionDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.DialogueOptionDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.DialogueOptionDTO}
 */
proto.dialogue.DialogueOptionDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExplanation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialoguedirection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRiskimpact(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.DialogueOptionDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.DialogueOptionDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.DialogueOptionDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.DialogueOptionDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExplanation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDialoguedirection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRiskimpact();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClazz();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string explanation = 1;
 * @return {string}
 */
proto.dialogue.DialogueOptionDTO.prototype.getExplanation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueOptionDTO} returns this
 */
proto.dialogue.DialogueOptionDTO.prototype.setExplanation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dialogueDirection = 2;
 * @return {string}
 */
proto.dialogue.DialogueOptionDTO.prototype.getDialoguedirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueOptionDTO} returns this
 */
proto.dialogue.DialogueOptionDTO.prototype.setDialoguedirection = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string riskImpact = 3;
 * @return {string}
 */
proto.dialogue.DialogueOptionDTO.prototype.getRiskimpact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueOptionDTO} returns this
 */
proto.dialogue.DialogueOptionDTO.prototype.setRiskimpact = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string clazz = 4;
 * @return {string}
 */
proto.dialogue.DialogueOptionDTO.prototype.getClazz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.DialogueOptionDTO} returns this
 */
proto.dialogue.DialogueOptionDTO.prototype.setClazz = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.InterruptDialogueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.InterruptDialogueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.InterruptDialogueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InterruptDialogueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    aiprovider: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.InterruptDialogueRequest}
 */
proto.dialogue.InterruptDialogueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.InterruptDialogueRequest;
  return proto.dialogue.InterruptDialogueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.InterruptDialogueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.InterruptDialogueRequest}
 */
proto.dialogue.InterruptDialogueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAiprovider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.InterruptDialogueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.InterruptDialogueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.InterruptDialogueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InterruptDialogueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAiprovider();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string requestId = 1;
 * @return {string}
 */
proto.dialogue.InterruptDialogueRequest.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InterruptDialogueRequest} returns this
 */
proto.dialogue.InterruptDialogueRequest.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string aiProvider = 2;
 * @return {string}
 */
proto.dialogue.InterruptDialogueRequest.prototype.getAiprovider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InterruptDialogueRequest} returns this
 */
proto.dialogue.InterruptDialogueRequest.prototype.setAiprovider = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.InterruptDialogueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.InterruptDialogueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.InterruptDialogueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InterruptDialogueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.InterruptDialogueResponse}
 */
proto.dialogue.InterruptDialogueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.InterruptDialogueResponse;
  return proto.dialogue.InterruptDialogueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.InterruptDialogueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.InterruptDialogueResponse}
 */
proto.dialogue.InterruptDialogueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.InterruptDialogueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.InterruptDialogueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.InterruptDialogueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.InterruptDialogueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string requestId = 1;
 * @return {string}
 */
proto.dialogue.InterruptDialogueResponse.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.InterruptDialogueResponse} returns this
 */
proto.dialogue.InterruptDialogueResponse.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.FinalizeDialogueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.FinalizeDialogueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.FinalizeDialogueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.FinalizeDialogueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogueid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: (f = msg.getContext()) && entities_pb.ContextDTO.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.FinalizeDialogueRequest}
 */
proto.dialogue.FinalizeDialogueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.FinalizeDialogueRequest;
  return proto.dialogue.FinalizeDialogueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.FinalizeDialogueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.FinalizeDialogueRequest}
 */
proto.dialogue.FinalizeDialogueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialogueid(value);
      break;
    case 2:
      var value = new entities_pb.ContextDTO;
      reader.readMessage(value,entities_pb.ContextDTO.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.FinalizeDialogueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.FinalizeDialogueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.FinalizeDialogueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.FinalizeDialogueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogueid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      entities_pb.ContextDTO.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dialogueId = 1;
 * @return {string}
 */
proto.dialogue.FinalizeDialogueRequest.prototype.getDialogueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FinalizeDialogueRequest} returns this
 */
proto.dialogue.FinalizeDialogueRequest.prototype.setDialogueid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional entities.ContextDTO context = 2;
 * @return {?proto.entities.ContextDTO}
 */
proto.dialogue.FinalizeDialogueRequest.prototype.getContext = function() {
  return /** @type{?proto.entities.ContextDTO} */ (
    jspb.Message.getWrapperField(this, entities_pb.ContextDTO, 2));
};


/**
 * @param {?proto.entities.ContextDTO|undefined} value
 * @return {!proto.dialogue.FinalizeDialogueRequest} returns this
*/
proto.dialogue.FinalizeDialogueRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.FinalizeDialogueRequest} returns this
 */
proto.dialogue.FinalizeDialogueRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.FinalizeDialogueRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dialogue.FinalizeDialogueResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dialogue.FinalizeDialogueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dialogue.FinalizeDialogueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.FinalizeDialogueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogueid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    summary: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dialogueparticipantsList: jspb.Message.toObjectList(msg.getDialogueparticipantsList(),
    proto.dialogue.CharacterProfileDTO.toObject, includeInstance),
    worldcontext: (f = msg.getWorldcontext()) && proto.dialogue.WorldContextDTO.toObject(includeInstance, f),
    dialoguehistory: (f = msg.getDialoguehistory()) && proto.dialogue.DialogueHistoryDTO.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dialogue.FinalizeDialogueResponse}
 */
proto.dialogue.FinalizeDialogueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dialogue.FinalizeDialogueResponse;
  return proto.dialogue.FinalizeDialogueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dialogue.FinalizeDialogueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dialogue.FinalizeDialogueResponse}
 */
proto.dialogue.FinalizeDialogueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialogueid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 3:
      var value = new proto.dialogue.CharacterProfileDTO;
      reader.readMessage(value,proto.dialogue.CharacterProfileDTO.deserializeBinaryFromReader);
      msg.addDialogueparticipants(value);
      break;
    case 4:
      var value = new proto.dialogue.WorldContextDTO;
      reader.readMessage(value,proto.dialogue.WorldContextDTO.deserializeBinaryFromReader);
      msg.setWorldcontext(value);
      break;
    case 5:
      var value = new proto.dialogue.DialogueHistoryDTO;
      reader.readMessage(value,proto.dialogue.DialogueHistoryDTO.deserializeBinaryFromReader);
      msg.setDialoguehistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dialogue.FinalizeDialogueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dialogue.FinalizeDialogueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dialogue.FinalizeDialogueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogueid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDialogueparticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dialogue.CharacterProfileDTO.serializeBinaryToWriter
    );
  }
  f = message.getWorldcontext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dialogue.WorldContextDTO.serializeBinaryToWriter
    );
  }
  f = message.getDialoguehistory();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dialogue.DialogueHistoryDTO.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dialogueId = 1;
 * @return {string}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.getDialogueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
 */
proto.dialogue.FinalizeDialogueResponse.prototype.setDialogueid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string summary = 2;
 * @return {string}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
 */
proto.dialogue.FinalizeDialogueResponse.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated CharacterProfileDTO dialogueParticipants = 3;
 * @return {!Array<!proto.dialogue.CharacterProfileDTO>}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.getDialogueparticipantsList = function() {
  return /** @type{!Array<!proto.dialogue.CharacterProfileDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dialogue.CharacterProfileDTO, 3));
};


/**
 * @param {!Array<!proto.dialogue.CharacterProfileDTO>} value
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
*/
proto.dialogue.FinalizeDialogueResponse.prototype.setDialogueparticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.dialogue.CharacterProfileDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dialogue.CharacterProfileDTO}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.addDialogueparticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dialogue.CharacterProfileDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
 */
proto.dialogue.FinalizeDialogueResponse.prototype.clearDialogueparticipantsList = function() {
  return this.setDialogueparticipantsList([]);
};


/**
 * optional WorldContextDTO worldContext = 4;
 * @return {?proto.dialogue.WorldContextDTO}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.getWorldcontext = function() {
  return /** @type{?proto.dialogue.WorldContextDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.WorldContextDTO, 4));
};


/**
 * @param {?proto.dialogue.WorldContextDTO|undefined} value
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
*/
proto.dialogue.FinalizeDialogueResponse.prototype.setWorldcontext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
 */
proto.dialogue.FinalizeDialogueResponse.prototype.clearWorldcontext = function() {
  return this.setWorldcontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.hasWorldcontext = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DialogueHistoryDTO dialogueHistory = 5;
 * @return {?proto.dialogue.DialogueHistoryDTO}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.getDialoguehistory = function() {
  return /** @type{?proto.dialogue.DialogueHistoryDTO} */ (
    jspb.Message.getWrapperField(this, proto.dialogue.DialogueHistoryDTO, 5));
};


/**
 * @param {?proto.dialogue.DialogueHistoryDTO|undefined} value
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
*/
proto.dialogue.FinalizeDialogueResponse.prototype.setDialoguehistory = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dialogue.FinalizeDialogueResponse} returns this
 */
proto.dialogue.FinalizeDialogueResponse.prototype.clearDialoguehistory = function() {
  return this.setDialoguehistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dialogue.FinalizeDialogueResponse.prototype.hasDialoguehistory = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.dialogue);
