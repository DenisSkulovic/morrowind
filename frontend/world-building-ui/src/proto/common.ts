/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace common {
    export enum EffectTypeEnumDTO {
        EFFECT_TYPE_DAMAGE = 0,
        EFFECT_TYPE_HEALING = 1,
        EFFECT_TYPE_BUFF = 2,
        EFFECT_TYPE_DEBUFF = 3,
        EFFECT_TYPE_RESISTANCE = 4,
        EFFECT_TYPE_STEALING = 5,
        EFFECT_TYPE_NEUTRAL = 6
    }
    export enum EffectTargetEnumDTO {
        EFFECT_TARGET_HEALTH = 0,
        EFFECT_TARGET_STAMINA = 1,
        EFFECT_TARGET_MANA = 2
    }
    export enum EffectModeEnumDTO {
        EFFECT_MODE_INSTANT = 0,
        EFFECT_MODE_GRADUAL = 1,
        EFFECT_MODE_PERSISTENT = 2
    }
    export enum EffectElementEnumDTO {
        EFFECT_ELEMENT_FIRE = 0,
        EFFECT_ELEMENT_FROST = 1,
        EFFECT_ELEMENT_POISON = 2,
        EFFECT_ELEMENT_SHOCK = 3
    }
    export enum NeedTypeEnumDTO {
        NEED_TYPE_DYNAMIC = 0,
        NEED_TYPE_THRESHOLD = 1,
        NEED_TYPE_EXTERNAL = 2
    }
    export enum NeedLayerEnumDTO {
        NEED_LAYER_PHYSIOLOGICAL = 0,
        NEED_LAYER_SAFETY = 1,
        NEED_LAYER_BELONGING_AND_LOVE = 2,
        NEED_LAYER_ESTEEM = 3,
        NEED_LAYER_COGNITIVE = 4,
        NEED_LAYER_AESTHETIC = 5,
        NEED_LAYER_SELF_ACTUALIZATION = 6,
        NEED_LAYER_TRANSCENDENCE = 7
    }
    export enum MemoryTypeEnumDTO {
        MEMORY_TYPE_GLOBAL = 0,
        MEMORY_TYPE_REGIONAL = 1,
        MEMORY_TYPE_EVENT_RELATED = 2,
        MEMORY_TYPE_HISTORIC = 3,
        MEMORY_TYPE_PERSONAL = 4
    }
    export enum ConditionEnumDTO {
        CONDITION_OR = 0,
        CONDITION_ANY = 1,
        CONDITION_AND = 2
    }
    export enum PresetEnumDTO {
        PRESET_DEFAULT = 0,
        PRESET_MORROWIND = 1
    }
    export enum TagSubtypeEnumDTO {
        TAG_SUBTYPE_MATERIAL = 0,
        TAG_SUBTYPE_CULTURE = 1,
        TAG_SUBTYPE_RELATION = 2,
        TAG_SUBTYPE_FACTION = 3,
        TAG_SUBTYPE_RELIGION = 4,
        TAG_SUBTYPE_WEAPON_QUALITY = 5,
        TAG_SUBTYPE_ARMOR_QUALITY = 6,
        TAG_SUBTYPE_WEAPON_TYPE = 7,
        TAG_SUBTYPE_STATUS = 8,
        TAG_SUBTYPE_QUEST = 9
    }
    export enum FactStatusEnumDTO {
        FACT_STATUS_ACCESSIBLE = 0,
        FACT_STATUS_INACCESSIBLE = 1
    }
    export enum SkillCategoryEnumDTO {
        SKILL_CATEGORY_CRAFTING = 0,
        SKILL_CATEGORY_MAGIC = 1,
        SKILL_CATEGORY_COMBAT = 2,
        SKILL_CATEGORY_STEALTH = 3,
        SKILL_CATEGORY_SOCIAL = 4
    }
    export enum DataSourceEnumDTO {
        DATA_SOURCE_WORLD = 0,
        DATA_SOURCE_CAMPAIGN = 1
    }
    export enum GenderEnumDTO {
        GENDER_MALE = 0,
        GENDER_FEMALE = 1
    }
    export enum ItemActionEnumDTO {
        ITEM_ACTION_ATTACK = 0,
        ITEM_ACTION_BLOCK = 1,
        ITEM_ACTION_USE = 2
    }
    export enum TraitTypeEnumDTO {
        TRAIT_CONGENITAL = 0,
        TRAIT_COPING = 1,
        TRAIT_EDUCATION = 2,
        TRAIT_FAITH = 3,
        TRAIT_HEALTH = 4,
        TRAIT_INFAMY = 5,
        TRAIT_LEVELED = 6,
        TRAIT_LIFESTYLE = 7,
        TRAIT_PERSONALITY = 8,
        TRAIT_PHYSICAL = 9
    }
    export enum PastExperienceTypeEnumDTO {
        PAST_EXPERIENCE_CHILD = 0,
        PAST_EXPERIENCE_ADULT = 1
    }
    export enum DiseaseSeverityEnumDTO {
        DISEASE_SEVERITY_MILD = 0,
        DISEASE_SEVERITY_MODERATE = 1,
        DISEASE_SEVERITY_SEVERE = 2
    }
    export class ContextDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            worldId?: string;
            campaignId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("worldId" in data && data.worldId != undefined) {
                    this.worldId = data.worldId;
                }
                if ("campaignId" in data && data.campaignId != undefined) {
                    this.campaignId = data.campaignId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get worldId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worldId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get campaignId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set campaignId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            userId?: string;
            worldId?: string;
            campaignId?: string;
        }): ContextDTO {
            const message = new ContextDTO({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.worldId != null) {
                message.worldId = data.worldId;
            }
            if (data.campaignId != null) {
                message.campaignId = data.campaignId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                worldId?: string;
                campaignId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.worldId != null) {
                data.worldId = this.worldId;
            }
            if (this.campaignId != null) {
                data.campaignId = this.campaignId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.worldId.length)
                writer.writeString(2, this.worldId);
            if (this.campaignId.length)
                writer.writeString(3, this.campaignId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContextDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContextDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.worldId = reader.readString();
                        break;
                    case 3:
                        message.campaignId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContextDTO {
            return ContextDTO.deserialize(bytes);
        }
    }
    export class BackgroundDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            faction?: GenerationInstructionsDTO;
            disease?: GenerationInstructionsDTO;
            addiction?: GenerationInstructionsDTO;
            profession?: GenerationInstructionsDTO;
            race?: GenerationInstructionsDTO;
            religion?: GenerationInstructionsDTO;
            personality?: GenerationInstructionsDTO;
            items?: GenerationInstructionsDTO;
            pastExpChild?: GenerationInstructionsDTO;
            pastExpAdult?: GenerationInstructionsDTO;
            memoryPools?: GenerationInstructionsDTO;
            skillSets?: GenerationInstructionsDTO;
            skillAdjustments?: Map<string, number>;
            user?: string;
            campaign?: string;
            world?: string;
            targetEntity?: string;
            gender?: GenerationInstructionDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("faction" in data && data.faction != undefined) {
                    this.faction = data.faction;
                }
                if ("disease" in data && data.disease != undefined) {
                    this.disease = data.disease;
                }
                if ("addiction" in data && data.addiction != undefined) {
                    this.addiction = data.addiction;
                }
                if ("profession" in data && data.profession != undefined) {
                    this.profession = data.profession;
                }
                if ("race" in data && data.race != undefined) {
                    this.race = data.race;
                }
                if ("religion" in data && data.religion != undefined) {
                    this.religion = data.religion;
                }
                if ("personality" in data && data.personality != undefined) {
                    this.personality = data.personality;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("pastExpChild" in data && data.pastExpChild != undefined) {
                    this.pastExpChild = data.pastExpChild;
                }
                if ("pastExpAdult" in data && data.pastExpAdult != undefined) {
                    this.pastExpAdult = data.pastExpAdult;
                }
                if ("memoryPools" in data && data.memoryPools != undefined) {
                    this.memoryPools = data.memoryPools;
                }
                if ("skillSets" in data && data.skillSets != undefined) {
                    this.skillSets = data.skillSets;
                }
                if ("skillAdjustments" in data && data.skillAdjustments != undefined) {
                    this.skillAdjustments = data.skillAdjustments;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
            }
            if (!this.skillAdjustments)
                this.skillAdjustments = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get faction() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 3) as GenerationInstructionsDTO;
        }
        set faction(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_faction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get disease() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 4) as GenerationInstructionsDTO;
        }
        set disease(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_disease() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get addiction() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 5) as GenerationInstructionsDTO;
        }
        set addiction(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_addiction() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get profession() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 6) as GenerationInstructionsDTO;
        }
        set profession(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_profession() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get race() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 7) as GenerationInstructionsDTO;
        }
        set race(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_race() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get religion() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 8) as GenerationInstructionsDTO;
        }
        set religion(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_religion() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get personality() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 9) as GenerationInstructionsDTO;
        }
        set personality(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_personality() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get items() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 10) as GenerationInstructionsDTO;
        }
        set items(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get pastExpChild() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 11) as GenerationInstructionsDTO;
        }
        set pastExpChild(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_pastExpChild() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get pastExpAdult() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 12) as GenerationInstructionsDTO;
        }
        set pastExpAdult(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_pastExpAdult() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get memoryPools() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 13) as GenerationInstructionsDTO;
        }
        set memoryPools(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_memoryPools() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get skillSets() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 14) as GenerationInstructionsDTO;
        }
        set skillSets(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_skillSets() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get skillAdjustments() {
            return pb_1.Message.getField(this, 15) as any as Map<string, number>;
        }
        set skillAdjustments(value: Map<string, number>) {
            pb_1.Message.setField(this, 15, value as any);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get gender() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionDTO, 20) as GenerationInstructionDTO;
        }
        set gender(value: GenerationInstructionDTO) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get has_gender() {
            return pb_1.Message.getField(this, 20) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            faction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            disease?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            addiction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            profession?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            race?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            religion?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            personality?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            items?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            pastExpChild?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            pastExpAdult?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            memoryPools?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            skillSets?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            skillAdjustments?: {
                [key: string]: number;
            };
            user?: string;
            campaign?: string;
            world?: string;
            targetEntity?: string;
            gender?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>;
        }): BackgroundDTO {
            const message = new BackgroundDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.faction != null) {
                message.faction = GenerationInstructionsDTO.fromObject(data.faction);
            }
            if (data.disease != null) {
                message.disease = GenerationInstructionsDTO.fromObject(data.disease);
            }
            if (data.addiction != null) {
                message.addiction = GenerationInstructionsDTO.fromObject(data.addiction);
            }
            if (data.profession != null) {
                message.profession = GenerationInstructionsDTO.fromObject(data.profession);
            }
            if (data.race != null) {
                message.race = GenerationInstructionsDTO.fromObject(data.race);
            }
            if (data.religion != null) {
                message.religion = GenerationInstructionsDTO.fromObject(data.religion);
            }
            if (data.personality != null) {
                message.personality = GenerationInstructionsDTO.fromObject(data.personality);
            }
            if (data.items != null) {
                message.items = GenerationInstructionsDTO.fromObject(data.items);
            }
            if (data.pastExpChild != null) {
                message.pastExpChild = GenerationInstructionsDTO.fromObject(data.pastExpChild);
            }
            if (data.pastExpAdult != null) {
                message.pastExpAdult = GenerationInstructionsDTO.fromObject(data.pastExpAdult);
            }
            if (data.memoryPools != null) {
                message.memoryPools = GenerationInstructionsDTO.fromObject(data.memoryPools);
            }
            if (data.skillSets != null) {
                message.skillSets = GenerationInstructionsDTO.fromObject(data.skillSets);
            }
            if (typeof data.skillAdjustments == "object") {
                message.skillAdjustments = new Map(Object.entries(data.skillAdjustments));
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            if (data.gender != null) {
                message.gender = GenerationInstructionDTO.fromObject(data.gender);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                faction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                disease?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                addiction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                profession?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                race?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                religion?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                personality?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                items?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                pastExpChild?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                pastExpAdult?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                memoryPools?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                skillSets?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                skillAdjustments?: {
                    [key: string]: number;
                };
                user?: string;
                campaign?: string;
                world?: string;
                targetEntity?: string;
                gender?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.faction != null) {
                data.faction = this.faction.toObject();
            }
            if (this.disease != null) {
                data.disease = this.disease.toObject();
            }
            if (this.addiction != null) {
                data.addiction = this.addiction.toObject();
            }
            if (this.profession != null) {
                data.profession = this.profession.toObject();
            }
            if (this.race != null) {
                data.race = this.race.toObject();
            }
            if (this.religion != null) {
                data.religion = this.religion.toObject();
            }
            if (this.personality != null) {
                data.personality = this.personality.toObject();
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            if (this.pastExpChild != null) {
                data.pastExpChild = this.pastExpChild.toObject();
            }
            if (this.pastExpAdult != null) {
                data.pastExpAdult = this.pastExpAdult.toObject();
            }
            if (this.memoryPools != null) {
                data.memoryPools = this.memoryPools.toObject();
            }
            if (this.skillSets != null) {
                data.skillSets = this.skillSets.toObject();
            }
            if (this.skillAdjustments != null) {
                data.skillAdjustments = (Object.fromEntries)(this.skillAdjustments);
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            if (this.gender != null) {
                data.gender = this.gender.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_faction)
                writer.writeMessage(3, this.faction, () => this.faction.serialize(writer));
            if (this.has_disease)
                writer.writeMessage(4, this.disease, () => this.disease.serialize(writer));
            if (this.has_addiction)
                writer.writeMessage(5, this.addiction, () => this.addiction.serialize(writer));
            if (this.has_profession)
                writer.writeMessage(6, this.profession, () => this.profession.serialize(writer));
            if (this.has_race)
                writer.writeMessage(7, this.race, () => this.race.serialize(writer));
            if (this.has_religion)
                writer.writeMessage(8, this.religion, () => this.religion.serialize(writer));
            if (this.has_personality)
                writer.writeMessage(9, this.personality, () => this.personality.serialize(writer));
            if (this.has_items)
                writer.writeMessage(10, this.items, () => this.items.serialize(writer));
            if (this.has_pastExpChild)
                writer.writeMessage(11, this.pastExpChild, () => this.pastExpChild.serialize(writer));
            if (this.has_pastExpAdult)
                writer.writeMessage(12, this.pastExpAdult, () => this.pastExpAdult.serialize(writer));
            if (this.has_memoryPools)
                writer.writeMessage(13, this.memoryPools, () => this.memoryPools.serialize(writer));
            if (this.has_skillSets)
                writer.writeMessage(14, this.skillSets, () => this.skillSets.serialize(writer));
            for (const [key, value] of this.skillAdjustments) {
                writer.writeMessage(15, this.skillAdjustments, () => {
                    writer.writeString(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (this.user.length)
                writer.writeString(16, this.user);
            if (this.campaign.length)
                writer.writeString(17, this.campaign);
            if (this.world.length)
                writer.writeString(18, this.world);
            if (this.targetEntity.length)
                writer.writeString(19, this.targetEntity);
            if (this.has_gender)
                writer.writeMessage(20, this.gender, () => this.gender.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackgroundDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackgroundDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.faction, () => message.faction = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.disease, () => message.disease = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.addiction, () => message.addiction = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.profession, () => message.profession = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.race, () => message.race = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.religion, () => message.religion = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.personality, () => message.personality = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.items, () => message.items = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.pastExpChild, () => message.pastExpChild = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.pastExpAdult, () => message.pastExpAdult = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.memoryPools, () => message.memoryPools = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.skillSets, () => message.skillSets = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skillAdjustments as any, reader, reader.readString, reader.readInt32));
                        break;
                    case 16:
                        message.user = reader.readString();
                        break;
                    case 17:
                        message.campaign = reader.readString();
                        break;
                    case 18:
                        message.world = reader.readString();
                        break;
                    case 19:
                        message.targetEntity = reader.readString();
                        break;
                    case 20:
                        reader.readMessage(message.gender, () => message.gender = GenerationInstructionDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BackgroundDTO {
            return BackgroundDTO.deserialize(bytes);
        }
    }
    export class BackgroundsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: BackgroundDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, BackgroundDTO, 1) as BackgroundDTO[];
        }
        set arr(value: BackgroundDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof BackgroundDTO.prototype.toObject>[];
        }): BackgroundsDTO {
            const message = new BackgroundsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => BackgroundDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof BackgroundDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: BackgroundDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: BackgroundDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackgroundsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackgroundsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BackgroundDTO.deserialize(reader), BackgroundDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BackgroundsDTO {
            return BackgroundsDTO.deserialize(bytes);
        }
    }
    export class Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metadata?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get metadata() {
            return pb_1.Message.getField(this, 1) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            metadata?: {
                [key: string]: string;
            };
        }): Metadata {
            const message = new Metadata({});
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.metadata) {
                writer.writeMessage(1, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metadata {
            return Metadata.deserialize(bytes);
        }
    }
    export class EffectDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            type?: EffectTypeEnumDTO;
            target?: EffectTargetEnumDTO;
            mode?: EffectModeEnumDTO;
            element?: EffectElementEnumDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("element" in data && data.element != undefined) {
                    this.element = data.element;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 9, EffectTypeEnumDTO.EFFECT_TYPE_DAMAGE) as EffectTypeEnumDTO;
        }
        set type(value: EffectTypeEnumDTO) {
            pb_1.Message.setField(this, 9, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 10, EffectTargetEnumDTO.EFFECT_TARGET_HEALTH) as EffectTargetEnumDTO;
        }
        set target(value: EffectTargetEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 11, EffectModeEnumDTO.EFFECT_MODE_INSTANT) as EffectModeEnumDTO;
        }
        set mode(value: EffectModeEnumDTO) {
            pb_1.Message.setField(this, 11, value);
        }
        get element() {
            return pb_1.Message.getFieldWithDefault(this, 12, EffectElementEnumDTO.EFFECT_ELEMENT_FIRE) as EffectElementEnumDTO;
        }
        set element(value: EffectElementEnumDTO) {
            pb_1.Message.setField(this, 12, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            type?: EffectTypeEnumDTO;
            target?: EffectTargetEnumDTO;
            mode?: EffectModeEnumDTO;
            element?: EffectElementEnumDTO;
            targetEntity?: string;
        }): EffectDTO {
            const message = new EffectDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.element != null) {
                message.element = data.element;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                type?: EffectTypeEnumDTO;
                target?: EffectTargetEnumDTO;
                mode?: EffectModeEnumDTO;
                element?: EffectElementEnumDTO;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.element != null) {
                data.element = this.element;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.type != EffectTypeEnumDTO.EFFECT_TYPE_DAMAGE)
                writer.writeEnum(9, this.type);
            if (this.target != EffectTargetEnumDTO.EFFECT_TARGET_HEALTH)
                writer.writeEnum(10, this.target);
            if (this.mode != EffectModeEnumDTO.EFFECT_MODE_INSTANT)
                writer.writeEnum(11, this.mode);
            if (this.element != EffectElementEnumDTO.EFFECT_ELEMENT_FIRE)
                writer.writeEnum(12, this.element);
            if (this.targetEntity.length)
                writer.writeString(13, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EffectDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EffectDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.type = reader.readEnum();
                        break;
                    case 10:
                        message.target = reader.readEnum();
                        break;
                    case 11:
                        message.mode = reader.readEnum();
                        break;
                    case 12:
                        message.element = reader.readEnum();
                        break;
                    case 13:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EffectDTO {
            return EffectDTO.deserialize(bytes);
        }
    }
    export class EffectsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: EffectDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, EffectDTO, 1) as EffectDTO[];
        }
        set arr(value: EffectDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof EffectDTO.prototype.toObject>[];
        }): EffectsDTO {
            const message = new EffectsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => EffectDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof EffectDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: EffectDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: EffectDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EffectsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EffectsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EffectDTO.deserialize(reader), EffectDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EffectsDTO {
            return EffectsDTO.deserialize(bytes);
        }
    }
    export class ResistanceDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            effectType?: EffectTypeEnumDTO;
            targetEffect?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("effectType" in data && data.effectType != undefined) {
                    this.effectType = data.effectType;
                }
                if ("targetEffect" in data && data.targetEffect != undefined) {
                    this.targetEffect = data.targetEffect;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get effectType() {
            return pb_1.Message.getFieldWithDefault(this, 8, EffectTypeEnumDTO.EFFECT_TYPE_DAMAGE) as EffectTypeEnumDTO;
        }
        set effectType(value: EffectTypeEnumDTO) {
            pb_1.Message.setField(this, 8, value);
        }
        get targetEffect() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEffect(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            effectType?: EffectTypeEnumDTO;
            targetEffect?: string;
            targetEntity?: string;
        }): ResistanceDTO {
            const message = new ResistanceDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.effectType != null) {
                message.effectType = data.effectType;
            }
            if (data.targetEffect != null) {
                message.targetEffect = data.targetEffect;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                effectType?: EffectTypeEnumDTO;
                targetEffect?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.effectType != null) {
                data.effectType = this.effectType;
            }
            if (this.targetEffect != null) {
                data.targetEffect = this.targetEffect;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.effectType != EffectTypeEnumDTO.EFFECT_TYPE_DAMAGE)
                writer.writeEnum(8, this.effectType);
            if (this.targetEffect.length)
                writer.writeString(9, this.targetEffect);
            if (this.targetEntity.length)
                writer.writeString(10, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResistanceDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResistanceDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.effectType = reader.readEnum();
                        break;
                    case 9:
                        message.targetEffect = reader.readString();
                        break;
                    case 10:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResistanceDTO {
            return ResistanceDTO.deserialize(bytes);
        }
    }
    export class ResistancesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ResistanceDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ResistanceDTO, 1) as ResistanceDTO[];
        }
        set arr(value: ResistanceDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ResistanceDTO.prototype.toObject>[];
        }): ResistancesDTO {
            const message = new ResistancesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ResistanceDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ResistanceDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ResistanceDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ResistanceDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResistancesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResistancesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ResistanceDTO.deserialize(reader), ResistanceDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResistancesDTO {
            return ResistancesDTO.deserialize(bytes);
        }
    }
    export class StatusDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            type?: EffectTypeEnumDTO;
            effects?: string[];
            duration?: number;
            description?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("effects" in data && data.effects != undefined) {
                    this.effects = data.effects;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 8, EffectTypeEnumDTO.EFFECT_TYPE_DAMAGE) as EffectTypeEnumDTO;
        }
        set type(value: EffectTypeEnumDTO) {
            pb_1.Message.setField(this, 8, value);
        }
        get effects() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set effects(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            type?: EffectTypeEnumDTO;
            effects?: string[];
            duration?: number;
            description?: string;
            targetEntity?: string;
        }): StatusDTO {
            const message = new StatusDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.effects != null) {
                message.effects = data.effects;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                type?: EffectTypeEnumDTO;
                effects?: string[];
                duration?: number;
                description?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.effects != null) {
                data.effects = this.effects;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.type != EffectTypeEnumDTO.EFFECT_TYPE_DAMAGE)
                writer.writeEnum(8, this.type);
            if (this.effects.length)
                writer.writeRepeatedString(9, this.effects);
            if (this.duration != 0)
                writer.writeInt32(10, this.duration);
            if (this.description.length)
                writer.writeString(11, this.description);
            if (this.targetEntity.length)
                writer.writeString(12, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.type = reader.readEnum();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.duration = reader.readInt32();
                        break;
                    case 11:
                        message.description = reader.readString();
                        break;
                    case 12:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusDTO {
            return StatusDTO.deserialize(bytes);
        }
    }
    export class StatusesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: StatusDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, StatusDTO, 1) as StatusDTO[];
        }
        set arr(value: StatusDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof StatusDTO.prototype.toObject>[];
        }): StatusesDTO {
            const message = new StatusesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => StatusDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof StatusDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: StatusDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: StatusDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StatusDTO.deserialize(reader), StatusDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusesDTO {
            return StatusesDTO.deserialize(bytes);
        }
    }
    export class ItemSetDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            set?: GenerationInstructionDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("set" in data && data.set != undefined) {
                    this.set = data.set;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 3) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get set() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionDTO, 7) as GenerationInstructionDTO;
        }
        set set(value: GenerationInstructionDTO) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_set() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            set?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>;
            targetEntity?: string;
        }): ItemSetDTO {
            const message = new ItemSetDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.set != null) {
                message.set = GenerationInstructionDTO.fromObject(data.set);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                set?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.set != null) {
                data.set = this.set.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.has_metadata)
                writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(4, this.user);
            if (this.campaign.length)
                writer.writeString(5, this.campaign);
            if (this.world.length)
                writer.writeString(6, this.world);
            if (this.has_set)
                writer.writeMessage(7, this.set, () => this.set.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(8, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemSetDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemSetDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    case 5:
                        message.campaign = reader.readString();
                        break;
                    case 6:
                        message.world = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.set, () => message.set = GenerationInstructionDTO.deserialize(reader));
                        break;
                    case 8:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemSetDTO {
            return ItemSetDTO.deserialize(bytes);
        }
    }
    export class ItemSetsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ItemSetDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ItemSetDTO, 1) as ItemSetDTO[];
        }
        set arr(value: ItemSetDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ItemSetDTO.prototype.toObject>[];
        }): ItemSetsDTO {
            const message = new ItemSetsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ItemSetDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ItemSetDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ItemSetDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ItemSetDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemSetsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemSetsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ItemSetDTO.deserialize(reader), ItemSetDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemSetsDTO {
            return ItemSetsDTO.deserialize(bytes);
        }
    }
    export class ItemDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blueprintId?: string;
            metadata?: Metadata;
            targetEntity?: string;
            id?: string;
            name?: string;
            description?: string;
            size?: number[];
            quantity?: number;
            maxQuantity?: number;
            baseValue?: number;
            actions?: ItemActionsDTO;
            requirements?: ItemRequirementsDTO;
            stackable?: boolean;
            repairable?: boolean;
            drinkable?: boolean;
            edible?: boolean;
            gridPosition?: GridPositionDTO;
            durability?: number;
            maxDurability?: number;
            damagePierce?: string;
            armorClass?: number;
            stealthDisadvantage?: boolean;
            damageSlash?: string;
            damageBlunt?: string;
            range?: number;
            twoHanded?: boolean;
            nutrition?: number;
            spoilage?: number;
            thirstQuenched?: number;
            type?: string;
            storageSlot?: string[];
            storageSlots?: StorageSlotsDTO;
            equipmentSlot?: string[];
            user?: string;
            campaign?: string;
            world?: string;
            trainedSkill?: string;
            storageSlotDefinition?: StorageSlotDefinitionsDTO;
            weight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 31, 33], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("maxQuantity" in data && data.maxQuantity != undefined) {
                    this.maxQuantity = data.maxQuantity;
                }
                if ("baseValue" in data && data.baseValue != undefined) {
                    this.baseValue = data.baseValue;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
                if ("requirements" in data && data.requirements != undefined) {
                    this.requirements = data.requirements;
                }
                if ("stackable" in data && data.stackable != undefined) {
                    this.stackable = data.stackable;
                }
                if ("repairable" in data && data.repairable != undefined) {
                    this.repairable = data.repairable;
                }
                if ("drinkable" in data && data.drinkable != undefined) {
                    this.drinkable = data.drinkable;
                }
                if ("edible" in data && data.edible != undefined) {
                    this.edible = data.edible;
                }
                if ("gridPosition" in data && data.gridPosition != undefined) {
                    this.gridPosition = data.gridPosition;
                }
                if ("durability" in data && data.durability != undefined) {
                    this.durability = data.durability;
                }
                if ("maxDurability" in data && data.maxDurability != undefined) {
                    this.maxDurability = data.maxDurability;
                }
                if ("damagePierce" in data && data.damagePierce != undefined) {
                    this.damagePierce = data.damagePierce;
                }
                if ("armorClass" in data && data.armorClass != undefined) {
                    this.armorClass = data.armorClass;
                }
                if ("stealthDisadvantage" in data && data.stealthDisadvantage != undefined) {
                    this.stealthDisadvantage = data.stealthDisadvantage;
                }
                if ("damageSlash" in data && data.damageSlash != undefined) {
                    this.damageSlash = data.damageSlash;
                }
                if ("damageBlunt" in data && data.damageBlunt != undefined) {
                    this.damageBlunt = data.damageBlunt;
                }
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
                if ("twoHanded" in data && data.twoHanded != undefined) {
                    this.twoHanded = data.twoHanded;
                }
                if ("nutrition" in data && data.nutrition != undefined) {
                    this.nutrition = data.nutrition;
                }
                if ("spoilage" in data && data.spoilage != undefined) {
                    this.spoilage = data.spoilage;
                }
                if ("thirstQuenched" in data && data.thirstQuenched != undefined) {
                    this.thirstQuenched = data.thirstQuenched;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("storageSlot" in data && data.storageSlot != undefined) {
                    this.storageSlot = data.storageSlot;
                }
                if ("storageSlots" in data && data.storageSlots != undefined) {
                    this.storageSlots = data.storageSlots;
                }
                if ("equipmentSlot" in data && data.equipmentSlot != undefined) {
                    this.equipmentSlot = data.equipmentSlot;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("trainedSkill" in data && data.trainedSkill != undefined) {
                    this.trainedSkill = data.trainedSkill;
                }
                if ("storageSlotDefinition" in data && data.storageSlotDefinition != undefined) {
                    this.storageSlotDefinition = data.storageSlotDefinition;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
            }
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 2) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set size(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get maxQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set maxQuantity(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get baseValue() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set baseValue(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get actions() {
            return pb_1.Message.getWrapperField(this, ItemActionsDTO, 11) as ItemActionsDTO;
        }
        set actions(value: ItemActionsDTO) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_actions() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get requirements() {
            return pb_1.Message.getWrapperField(this, ItemRequirementsDTO, 12) as ItemRequirementsDTO;
        }
        set requirements(value: ItemRequirementsDTO) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_requirements() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get stackable() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set stackable(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get repairable() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set repairable(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get drinkable() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set drinkable(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get edible() {
            return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
        }
        set edible(value: boolean) {
            pb_1.Message.setField(this, 16, value);
        }
        get gridPosition() {
            return pb_1.Message.getWrapperField(this, GridPositionDTO, 17) as GridPositionDTO;
        }
        set gridPosition(value: GridPositionDTO) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_gridPosition() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get durability() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set durability(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get maxDurability() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set maxDurability(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get damagePierce() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set damagePierce(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get armorClass() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set armorClass(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get stealthDisadvantage() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set stealthDisadvantage(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get damageSlash() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set damageSlash(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get damageBlunt() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set damageBlunt(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get range() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set range(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get twoHanded() {
            return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
        }
        set twoHanded(value: boolean) {
            pb_1.Message.setField(this, 26, value);
        }
        get nutrition() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set nutrition(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get spoilage() {
            return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
        }
        set spoilage(value: number) {
            pb_1.Message.setField(this, 28, value);
        }
        get thirstQuenched() {
            return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
        }
        set thirstQuenched(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 30, value);
        }
        get storageSlot() {
            return pb_1.Message.getFieldWithDefault(this, 31, []) as string[];
        }
        set storageSlot(value: string[]) {
            pb_1.Message.setField(this, 31, value);
        }
        get storageSlots() {
            return pb_1.Message.getWrapperField(this, StorageSlotsDTO, 32) as StorageSlotsDTO;
        }
        set storageSlots(value: StorageSlotsDTO) {
            pb_1.Message.setWrapperField(this, 32, value);
        }
        get has_storageSlots() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get equipmentSlot() {
            return pb_1.Message.getFieldWithDefault(this, 33, []) as string[];
        }
        set equipmentSlot(value: string[]) {
            pb_1.Message.setField(this, 33, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 34, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 34, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 35, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 35, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 36, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 36, value);
        }
        get trainedSkill() {
            return pb_1.Message.getFieldWithDefault(this, 37, "") as string;
        }
        set trainedSkill(value: string) {
            pb_1.Message.setField(this, 37, value);
        }
        get storageSlotDefinition() {
            return pb_1.Message.getWrapperField(this, StorageSlotDefinitionsDTO, 38) as StorageSlotDefinitionsDTO;
        }
        set storageSlotDefinition(value: StorageSlotDefinitionsDTO) {
            pb_1.Message.setWrapperField(this, 38, value);
        }
        get has_storageSlotDefinition() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 39, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 39, value);
        }
        static fromObject(data: {
            blueprintId?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            targetEntity?: string;
            id?: string;
            name?: string;
            description?: string;
            size?: number[];
            quantity?: number;
            maxQuantity?: number;
            baseValue?: number;
            actions?: ReturnType<typeof ItemActionsDTO.prototype.toObject>;
            requirements?: ReturnType<typeof ItemRequirementsDTO.prototype.toObject>;
            stackable?: boolean;
            repairable?: boolean;
            drinkable?: boolean;
            edible?: boolean;
            gridPosition?: ReturnType<typeof GridPositionDTO.prototype.toObject>;
            durability?: number;
            maxDurability?: number;
            damagePierce?: string;
            armorClass?: number;
            stealthDisadvantage?: boolean;
            damageSlash?: string;
            damageBlunt?: string;
            range?: number;
            twoHanded?: boolean;
            nutrition?: number;
            spoilage?: number;
            thirstQuenched?: number;
            type?: string;
            storageSlot?: string[];
            storageSlots?: ReturnType<typeof StorageSlotsDTO.prototype.toObject>;
            equipmentSlot?: string[];
            user?: string;
            campaign?: string;
            world?: string;
            trainedSkill?: string;
            storageSlotDefinition?: ReturnType<typeof StorageSlotDefinitionsDTO.prototype.toObject>;
            weight?: number;
        }): ItemDTO {
            const message = new ItemDTO({});
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.maxQuantity != null) {
                message.maxQuantity = data.maxQuantity;
            }
            if (data.baseValue != null) {
                message.baseValue = data.baseValue;
            }
            if (data.actions != null) {
                message.actions = ItemActionsDTO.fromObject(data.actions);
            }
            if (data.requirements != null) {
                message.requirements = ItemRequirementsDTO.fromObject(data.requirements);
            }
            if (data.stackable != null) {
                message.stackable = data.stackable;
            }
            if (data.repairable != null) {
                message.repairable = data.repairable;
            }
            if (data.drinkable != null) {
                message.drinkable = data.drinkable;
            }
            if (data.edible != null) {
                message.edible = data.edible;
            }
            if (data.gridPosition != null) {
                message.gridPosition = GridPositionDTO.fromObject(data.gridPosition);
            }
            if (data.durability != null) {
                message.durability = data.durability;
            }
            if (data.maxDurability != null) {
                message.maxDurability = data.maxDurability;
            }
            if (data.damagePierce != null) {
                message.damagePierce = data.damagePierce;
            }
            if (data.armorClass != null) {
                message.armorClass = data.armorClass;
            }
            if (data.stealthDisadvantage != null) {
                message.stealthDisadvantage = data.stealthDisadvantage;
            }
            if (data.damageSlash != null) {
                message.damageSlash = data.damageSlash;
            }
            if (data.damageBlunt != null) {
                message.damageBlunt = data.damageBlunt;
            }
            if (data.range != null) {
                message.range = data.range;
            }
            if (data.twoHanded != null) {
                message.twoHanded = data.twoHanded;
            }
            if (data.nutrition != null) {
                message.nutrition = data.nutrition;
            }
            if (data.spoilage != null) {
                message.spoilage = data.spoilage;
            }
            if (data.thirstQuenched != null) {
                message.thirstQuenched = data.thirstQuenched;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.storageSlot != null) {
                message.storageSlot = data.storageSlot;
            }
            if (data.storageSlots != null) {
                message.storageSlots = StorageSlotsDTO.fromObject(data.storageSlots);
            }
            if (data.equipmentSlot != null) {
                message.equipmentSlot = data.equipmentSlot;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.trainedSkill != null) {
                message.trainedSkill = data.trainedSkill;
            }
            if (data.storageSlotDefinition != null) {
                message.storageSlotDefinition = StorageSlotDefinitionsDTO.fromObject(data.storageSlotDefinition);
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            return message;
        }
        toObject() {
            const data: {
                blueprintId?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                targetEntity?: string;
                id?: string;
                name?: string;
                description?: string;
                size?: number[];
                quantity?: number;
                maxQuantity?: number;
                baseValue?: number;
                actions?: ReturnType<typeof ItemActionsDTO.prototype.toObject>;
                requirements?: ReturnType<typeof ItemRequirementsDTO.prototype.toObject>;
                stackable?: boolean;
                repairable?: boolean;
                drinkable?: boolean;
                edible?: boolean;
                gridPosition?: ReturnType<typeof GridPositionDTO.prototype.toObject>;
                durability?: number;
                maxDurability?: number;
                damagePierce?: string;
                armorClass?: number;
                stealthDisadvantage?: boolean;
                damageSlash?: string;
                damageBlunt?: string;
                range?: number;
                twoHanded?: boolean;
                nutrition?: number;
                spoilage?: number;
                thirstQuenched?: number;
                type?: string;
                storageSlot?: string[];
                storageSlots?: ReturnType<typeof StorageSlotsDTO.prototype.toObject>;
                equipmentSlot?: string[];
                user?: string;
                campaign?: string;
                world?: string;
                trainedSkill?: string;
                storageSlotDefinition?: ReturnType<typeof StorageSlotDefinitionsDTO.prototype.toObject>;
                weight?: number;
            } = {};
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.maxQuantity != null) {
                data.maxQuantity = this.maxQuantity;
            }
            if (this.baseValue != null) {
                data.baseValue = this.baseValue;
            }
            if (this.actions != null) {
                data.actions = this.actions.toObject();
            }
            if (this.requirements != null) {
                data.requirements = this.requirements.toObject();
            }
            if (this.stackable != null) {
                data.stackable = this.stackable;
            }
            if (this.repairable != null) {
                data.repairable = this.repairable;
            }
            if (this.drinkable != null) {
                data.drinkable = this.drinkable;
            }
            if (this.edible != null) {
                data.edible = this.edible;
            }
            if (this.gridPosition != null) {
                data.gridPosition = this.gridPosition.toObject();
            }
            if (this.durability != null) {
                data.durability = this.durability;
            }
            if (this.maxDurability != null) {
                data.maxDurability = this.maxDurability;
            }
            if (this.damagePierce != null) {
                data.damagePierce = this.damagePierce;
            }
            if (this.armorClass != null) {
                data.armorClass = this.armorClass;
            }
            if (this.stealthDisadvantage != null) {
                data.stealthDisadvantage = this.stealthDisadvantage;
            }
            if (this.damageSlash != null) {
                data.damageSlash = this.damageSlash;
            }
            if (this.damageBlunt != null) {
                data.damageBlunt = this.damageBlunt;
            }
            if (this.range != null) {
                data.range = this.range;
            }
            if (this.twoHanded != null) {
                data.twoHanded = this.twoHanded;
            }
            if (this.nutrition != null) {
                data.nutrition = this.nutrition;
            }
            if (this.spoilage != null) {
                data.spoilage = this.spoilage;
            }
            if (this.thirstQuenched != null) {
                data.thirstQuenched = this.thirstQuenched;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.storageSlot != null) {
                data.storageSlot = this.storageSlot;
            }
            if (this.storageSlots != null) {
                data.storageSlots = this.storageSlots.toObject();
            }
            if (this.equipmentSlot != null) {
                data.equipmentSlot = this.equipmentSlot;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.trainedSkill != null) {
                data.trainedSkill = this.trainedSkill;
            }
            if (this.storageSlotDefinition != null) {
                data.storageSlotDefinition = this.storageSlotDefinition.toObject();
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blueprintId.length)
                writer.writeString(1, this.blueprintId);
            if (this.has_metadata)
                writer.writeMessage(2, this.metadata, () => this.metadata.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(3, this.targetEntity);
            if (this.id.length)
                writer.writeString(4, this.id);
            if (this.name.length)
                writer.writeString(5, this.name);
            if (this.description.length)
                writer.writeString(6, this.description);
            if (this.size.length)
                writer.writePackedInt32(7, this.size);
            if (this.quantity != 0)
                writer.writeInt32(8, this.quantity);
            if (this.maxQuantity != 0)
                writer.writeInt32(9, this.maxQuantity);
            if (this.baseValue != 0)
                writer.writeInt32(10, this.baseValue);
            if (this.has_actions)
                writer.writeMessage(11, this.actions, () => this.actions.serialize(writer));
            if (this.has_requirements)
                writer.writeMessage(12, this.requirements, () => this.requirements.serialize(writer));
            if (this.stackable != false)
                writer.writeBool(13, this.stackable);
            if (this.repairable != false)
                writer.writeBool(14, this.repairable);
            if (this.drinkable != false)
                writer.writeBool(15, this.drinkable);
            if (this.edible != false)
                writer.writeBool(16, this.edible);
            if (this.has_gridPosition)
                writer.writeMessage(17, this.gridPosition, () => this.gridPosition.serialize(writer));
            if (this.durability != 0)
                writer.writeInt32(18, this.durability);
            if (this.maxDurability != 0)
                writer.writeInt32(19, this.maxDurability);
            if (this.damagePierce.length)
                writer.writeString(20, this.damagePierce);
            if (this.armorClass != 0)
                writer.writeInt32(21, this.armorClass);
            if (this.stealthDisadvantage != false)
                writer.writeBool(22, this.stealthDisadvantage);
            if (this.damageSlash.length)
                writer.writeString(23, this.damageSlash);
            if (this.damageBlunt.length)
                writer.writeString(24, this.damageBlunt);
            if (this.range != 0)
                writer.writeInt32(25, this.range);
            if (this.twoHanded != false)
                writer.writeBool(26, this.twoHanded);
            if (this.nutrition != 0)
                writer.writeInt32(27, this.nutrition);
            if (this.spoilage != 0)
                writer.writeInt32(28, this.spoilage);
            if (this.thirstQuenched != 0)
                writer.writeInt32(29, this.thirstQuenched);
            if (this.type.length)
                writer.writeString(30, this.type);
            if (this.storageSlot.length)
                writer.writeRepeatedString(31, this.storageSlot);
            if (this.has_storageSlots)
                writer.writeMessage(32, this.storageSlots, () => this.storageSlots.serialize(writer));
            if (this.equipmentSlot.length)
                writer.writeRepeatedString(33, this.equipmentSlot);
            if (this.user.length)
                writer.writeString(34, this.user);
            if (this.campaign.length)
                writer.writeString(35, this.campaign);
            if (this.world.length)
                writer.writeString(36, this.world);
            if (this.trainedSkill.length)
                writer.writeString(37, this.trainedSkill);
            if (this.has_storageSlotDefinition)
                writer.writeMessage(38, this.storageSlotDefinition, () => this.storageSlotDefinition.serialize(writer));
            if (this.weight != 0)
                writer.writeFloat(39, this.weight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blueprintId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 3:
                        message.targetEntity = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        message.name = reader.readString();
                        break;
                    case 6:
                        message.description = reader.readString();
                        break;
                    case 7:
                        message.size = reader.readPackedInt32();
                        break;
                    case 8:
                        message.quantity = reader.readInt32();
                        break;
                    case 9:
                        message.maxQuantity = reader.readInt32();
                        break;
                    case 10:
                        message.baseValue = reader.readInt32();
                        break;
                    case 11:
                        reader.readMessage(message.actions, () => message.actions = ItemActionsDTO.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.requirements, () => message.requirements = ItemRequirementsDTO.deserialize(reader));
                        break;
                    case 13:
                        message.stackable = reader.readBool();
                        break;
                    case 14:
                        message.repairable = reader.readBool();
                        break;
                    case 15:
                        message.drinkable = reader.readBool();
                        break;
                    case 16:
                        message.edible = reader.readBool();
                        break;
                    case 17:
                        reader.readMessage(message.gridPosition, () => message.gridPosition = GridPositionDTO.deserialize(reader));
                        break;
                    case 18:
                        message.durability = reader.readInt32();
                        break;
                    case 19:
                        message.maxDurability = reader.readInt32();
                        break;
                    case 20:
                        message.damagePierce = reader.readString();
                        break;
                    case 21:
                        message.armorClass = reader.readInt32();
                        break;
                    case 22:
                        message.stealthDisadvantage = reader.readBool();
                        break;
                    case 23:
                        message.damageSlash = reader.readString();
                        break;
                    case 24:
                        message.damageBlunt = reader.readString();
                        break;
                    case 25:
                        message.range = reader.readInt32();
                        break;
                    case 26:
                        message.twoHanded = reader.readBool();
                        break;
                    case 27:
                        message.nutrition = reader.readInt32();
                        break;
                    case 28:
                        message.spoilage = reader.readInt32();
                        break;
                    case 29:
                        message.thirstQuenched = reader.readInt32();
                        break;
                    case 30:
                        message.type = reader.readString();
                        break;
                    case 31:
                        pb_1.Message.addToRepeatedField(message, 31, reader.readString());
                        break;
                    case 32:
                        reader.readMessage(message.storageSlots, () => message.storageSlots = StorageSlotsDTO.deserialize(reader));
                        break;
                    case 33:
                        pb_1.Message.addToRepeatedField(message, 33, reader.readString());
                        break;
                    case 34:
                        message.user = reader.readString();
                        break;
                    case 35:
                        message.campaign = reader.readString();
                        break;
                    case 36:
                        message.world = reader.readString();
                        break;
                    case 37:
                        message.trainedSkill = reader.readString();
                        break;
                    case 38:
                        reader.readMessage(message.storageSlotDefinition, () => message.storageSlotDefinition = StorageSlotDefinitionsDTO.deserialize(reader));
                        break;
                    case 39:
                        message.weight = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemDTO {
            return ItemDTO.deserialize(bytes);
        }
    }
    export class ItemsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ItemDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ItemDTO, 1) as ItemDTO[];
        }
        set arr(value: ItemDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ItemDTO.prototype.toObject>[];
        }): ItemsDTO {
            const message = new ItemsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ItemDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ItemDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ItemDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ItemDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ItemDTO.deserialize(reader), ItemDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemsDTO {
            return ItemsDTO.deserialize(bytes);
        }
    }
    export class ItemActionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            actions?: ItemActionEnumDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
            }
        }
        get actions() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as ItemActionEnumDTO[];
        }
        set actions(value: ItemActionEnumDTO[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            actions?: ItemActionEnumDTO[];
        }): ItemActionsDTO {
            const message = new ItemActionsDTO({});
            if (data.actions != null) {
                message.actions = data.actions;
            }
            return message;
        }
        toObject() {
            const data: {
                actions?: ItemActionEnumDTO[];
            } = {};
            if (this.actions != null) {
                data.actions = this.actions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.actions.length)
                writer.writePackedEnum(1, this.actions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemActionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemActionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.actions = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemActionsDTO {
            return ItemActionsDTO.deserialize(bytes);
        }
    }
    export class StorageSlotDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            grid?: number[];
            gridState?: StorageGridDTO;
            maxWeight?: number;
            parentItem?: string;
            storedItems?: ItemsDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("grid" in data && data.grid != undefined) {
                    this.grid = data.grid;
                }
                if ("gridState" in data && data.gridState != undefined) {
                    this.gridState = data.gridState;
                }
                if ("maxWeight" in data && data.maxWeight != undefined) {
                    this.maxWeight = data.maxWeight;
                }
                if ("parentItem" in data && data.parentItem != undefined) {
                    this.parentItem = data.parentItem;
                }
                if ("storedItems" in data && data.storedItems != undefined) {
                    this.storedItems = data.storedItems;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get grid() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set grid(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get gridState() {
            return pb_1.Message.getWrapperField(this, StorageGridDTO, 9) as StorageGridDTO;
        }
        set gridState(value: StorageGridDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_gridState() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get maxWeight() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set maxWeight(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get parentItem() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set parentItem(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get storedItems() {
            return pb_1.Message.getWrapperField(this, ItemsDTO, 12) as ItemsDTO;
        }
        set storedItems(value: ItemsDTO) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_storedItems() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            grid?: number[];
            gridState?: ReturnType<typeof StorageGridDTO.prototype.toObject>;
            maxWeight?: number;
            parentItem?: string;
            storedItems?: ReturnType<typeof ItemsDTO.prototype.toObject>;
            targetEntity?: string;
        }): StorageSlotDTO {
            const message = new StorageSlotDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.grid != null) {
                message.grid = data.grid;
            }
            if (data.gridState != null) {
                message.gridState = StorageGridDTO.fromObject(data.gridState);
            }
            if (data.maxWeight != null) {
                message.maxWeight = data.maxWeight;
            }
            if (data.parentItem != null) {
                message.parentItem = data.parentItem;
            }
            if (data.storedItems != null) {
                message.storedItems = ItemsDTO.fromObject(data.storedItems);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                grid?: number[];
                gridState?: ReturnType<typeof StorageGridDTO.prototype.toObject>;
                maxWeight?: number;
                parentItem?: string;
                storedItems?: ReturnType<typeof ItemsDTO.prototype.toObject>;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.grid != null) {
                data.grid = this.grid;
            }
            if (this.gridState != null) {
                data.gridState = this.gridState.toObject();
            }
            if (this.maxWeight != null) {
                data.maxWeight = this.maxWeight;
            }
            if (this.parentItem != null) {
                data.parentItem = this.parentItem;
            }
            if (this.storedItems != null) {
                data.storedItems = this.storedItems.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.grid.length)
                writer.writePackedInt32(8, this.grid);
            if (this.has_gridState)
                writer.writeMessage(9, this.gridState, () => this.gridState.serialize(writer));
            if (this.maxWeight != 0)
                writer.writeInt32(10, this.maxWeight);
            if (this.parentItem.length)
                writer.writeString(11, this.parentItem);
            if (this.has_storedItems)
                writer.writeMessage(12, this.storedItems, () => this.storedItems.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(13, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageSlotDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageSlotDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.grid = reader.readPackedInt32();
                        break;
                    case 9:
                        reader.readMessage(message.gridState, () => message.gridState = StorageGridDTO.deserialize(reader));
                        break;
                    case 10:
                        message.maxWeight = reader.readInt32();
                        break;
                    case 11:
                        message.parentItem = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.storedItems, () => message.storedItems = ItemsDTO.deserialize(reader));
                        break;
                    case 13:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageSlotDTO {
            return StorageSlotDTO.deserialize(bytes);
        }
    }
    export class StorageSlotsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: StorageSlotDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageSlotDTO, 1) as StorageSlotDTO[];
        }
        set arr(value: StorageSlotDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof StorageSlotDTO.prototype.toObject>[];
        }): StorageSlotsDTO {
            const message = new StorageSlotsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => StorageSlotDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof StorageSlotDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: StorageSlotDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: StorageSlotDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageSlotsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageSlotsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StorageSlotDTO.deserialize(reader), StorageSlotDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageSlotsDTO {
            return StorageSlotsDTO.deserialize(bytes);
        }
    }
    export class StorageGridDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cells?: StorageGridCellDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cells" in data && data.cells != undefined) {
                    this.cells = data.cells;
                }
            }
        }
        get cells() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageGridCellDTO, 1) as StorageGridCellDTO[];
        }
        set cells(value: StorageGridCellDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            cells?: ReturnType<typeof StorageGridCellDTO.prototype.toObject>[];
        }): StorageGridDTO {
            const message = new StorageGridDTO({});
            if (data.cells != null) {
                message.cells = data.cells.map(item => StorageGridCellDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                cells?: ReturnType<typeof StorageGridCellDTO.prototype.toObject>[];
            } = {};
            if (this.cells != null) {
                data.cells = this.cells.map((item: StorageGridCellDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cells.length)
                writer.writeRepeatedMessage(1, this.cells, (item: StorageGridCellDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageGridDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageGridDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cells, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StorageGridCellDTO.deserialize(reader), StorageGridCellDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageGridDTO {
            return StorageGridDTO.deserialize(bytes);
        }
    }
    export class StorageGridCellDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            row?: number;
            column?: number;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("row" in data && data.row != undefined) {
                    this.row = data.row;
                }
                if ("column" in data && data.column != undefined) {
                    this.column = data.column;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get row() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set row(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get column() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set column(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            row?: number;
            column?: number;
            value?: string;
        }): StorageGridCellDTO {
            const message = new StorageGridCellDTO({});
            if (data.row != null) {
                message.row = data.row;
            }
            if (data.column != null) {
                message.column = data.column;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                row?: number;
                column?: number;
                value?: string;
            } = {};
            if (this.row != null) {
                data.row = this.row;
            }
            if (this.column != null) {
                data.column = this.column;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.row != 0)
                writer.writeInt32(1, this.row);
            if (this.column != 0)
                writer.writeInt32(2, this.column);
            if (this.value.length)
                writer.writeString(3, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageGridCellDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageGridCellDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.row = reader.readInt32();
                        break;
                    case 2:
                        message.column = reader.readInt32();
                        break;
                    case 3:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageGridCellDTO {
            return StorageGridCellDTO.deserialize(bytes);
        }
    }
    export class ItemRequirementDTO extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            type?: string;
            name?: string;
            clazz?: string;
        } & (({
            number?: number;
            flag?: never;
        } | {
            number?: never;
            flag?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("flag" in data && data.flag != undefined) {
                    this.flag = data.flag;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_number() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get flag() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set flag(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_flag() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get value() {
            const cases: {
                [index: number]: "none" | "number" | "flag";
            } = {
                0: "none",
                3: "number",
                4: "flag"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            number?: number;
            flag?: boolean;
            clazz?: string;
        }): ItemRequirementDTO {
            const message = new ItemRequirementDTO({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.flag != null) {
                message.flag = data.flag;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                number?: number;
                flag?: boolean;
                clazz?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.flag != null) {
                data.flag = this.flag;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_number)
                writer.writeInt32(3, this.number);
            if (this.has_flag)
                writer.writeBool(4, this.flag);
            if (this.clazz.length)
                writer.writeString(5, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemRequirementDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemRequirementDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.number = reader.readInt32();
                        break;
                    case 4:
                        message.flag = reader.readBool();
                        break;
                    case 5:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemRequirementDTO {
            return ItemRequirementDTO.deserialize(bytes);
        }
    }
    export class ItemRequirementsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ItemRequirementDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ItemRequirementDTO, 1) as ItemRequirementDTO[];
        }
        set arr(value: ItemRequirementDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ItemRequirementDTO.prototype.toObject>[];
        }): ItemRequirementsDTO {
            const message = new ItemRequirementsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ItemRequirementDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ItemRequirementDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ItemRequirementDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ItemRequirementDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemRequirementsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemRequirementsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ItemRequirementDTO.deserialize(reader), ItemRequirementDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemRequirementsDTO {
            return ItemRequirementsDTO.deserialize(bytes);
        }
    }
    export class CharacterDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            firstName?: string;
            lastName?: string;
            race?: string;
            gender?: GenderEnumDTO;
            birthsign?: string;
            birthYear?: number;
            birthMonth?: string;
            birthDay?: number;
            skills?: Map<string, number>;
            equipmentSlots?: EquipmentSlotsDTO;
            professions?: string[];
            memoryPools?: string[];
            characterMemories?: string[];
            enneagramType?: string;
            traits?: string[];
            diseases?: string[];
            addictions?: string[];
            factions?: string[];
            tags?: string[];
            targetEntity?: string;
            birthEra?: string;
            pastExperiences?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17, 18, 19, 21, 22, 23, 24, 25, 28], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("race" in data && data.race != undefined) {
                    this.race = data.race;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("birthsign" in data && data.birthsign != undefined) {
                    this.birthsign = data.birthsign;
                }
                if ("birthYear" in data && data.birthYear != undefined) {
                    this.birthYear = data.birthYear;
                }
                if ("birthMonth" in data && data.birthMonth != undefined) {
                    this.birthMonth = data.birthMonth;
                }
                if ("birthDay" in data && data.birthDay != undefined) {
                    this.birthDay = data.birthDay;
                }
                if ("skills" in data && data.skills != undefined) {
                    this.skills = data.skills;
                }
                if ("equipmentSlots" in data && data.equipmentSlots != undefined) {
                    this.equipmentSlots = data.equipmentSlots;
                }
                if ("professions" in data && data.professions != undefined) {
                    this.professions = data.professions;
                }
                if ("memoryPools" in data && data.memoryPools != undefined) {
                    this.memoryPools = data.memoryPools;
                }
                if ("characterMemories" in data && data.characterMemories != undefined) {
                    this.characterMemories = data.characterMemories;
                }
                if ("enneagramType" in data && data.enneagramType != undefined) {
                    this.enneagramType = data.enneagramType;
                }
                if ("traits" in data && data.traits != undefined) {
                    this.traits = data.traits;
                }
                if ("diseases" in data && data.diseases != undefined) {
                    this.diseases = data.diseases;
                }
                if ("addictions" in data && data.addictions != undefined) {
                    this.addictions = data.addictions;
                }
                if ("factions" in data && data.factions != undefined) {
                    this.factions = data.factions;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
                if ("birthEra" in data && data.birthEra != undefined) {
                    this.birthEra = data.birthEra;
                }
                if ("pastExperiences" in data && data.pastExperiences != undefined) {
                    this.pastExperiences = data.pastExperiences;
                }
            }
            if (!this.skills)
                this.skills = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 3) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get race() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set race(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 10, GenderEnumDTO.GENDER_MALE) as GenderEnumDTO;
        }
        set gender(value: GenderEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        get birthsign() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set birthsign(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get birthYear() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set birthYear(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get birthMonth() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set birthMonth(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get birthDay() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set birthDay(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get skills() {
            return pb_1.Message.getField(this, 15) as any as Map<string, number>;
        }
        set skills(value: Map<string, number>) {
            pb_1.Message.setField(this, 15, value as any);
        }
        get equipmentSlots() {
            return pb_1.Message.getWrapperField(this, EquipmentSlotsDTO, 16) as EquipmentSlotsDTO;
        }
        set equipmentSlots(value: EquipmentSlotsDTO) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_equipmentSlots() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get professions() {
            return pb_1.Message.getFieldWithDefault(this, 17, []) as string[];
        }
        set professions(value: string[]) {
            pb_1.Message.setField(this, 17, value);
        }
        get memoryPools() {
            return pb_1.Message.getFieldWithDefault(this, 18, []) as string[];
        }
        set memoryPools(value: string[]) {
            pb_1.Message.setField(this, 18, value);
        }
        get characterMemories() {
            return pb_1.Message.getFieldWithDefault(this, 19, []) as string[];
        }
        set characterMemories(value: string[]) {
            pb_1.Message.setField(this, 19, value);
        }
        get enneagramType() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set enneagramType(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get traits() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set traits(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        get diseases() {
            return pb_1.Message.getFieldWithDefault(this, 22, []) as string[];
        }
        set diseases(value: string[]) {
            pb_1.Message.setField(this, 22, value);
        }
        get addictions() {
            return pb_1.Message.getFieldWithDefault(this, 23, []) as string[];
        }
        set addictions(value: string[]) {
            pb_1.Message.setField(this, 23, value);
        }
        get factions() {
            return pb_1.Message.getFieldWithDefault(this, 24, []) as string[];
        }
        set factions(value: string[]) {
            pb_1.Message.setField(this, 24, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 25, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 25, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get birthEra() {
            return pb_1.Message.getFieldWithDefault(this, 27, "") as string;
        }
        set birthEra(value: string) {
            pb_1.Message.setField(this, 27, value);
        }
        get pastExperiences() {
            return pb_1.Message.getFieldWithDefault(this, 28, []) as string[];
        }
        set pastExperiences(value: string[]) {
            pb_1.Message.setField(this, 28, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            firstName?: string;
            lastName?: string;
            race?: string;
            gender?: GenderEnumDTO;
            birthsign?: string;
            birthYear?: number;
            birthMonth?: string;
            birthDay?: number;
            skills?: {
                [key: string]: number;
            };
            equipmentSlots?: ReturnType<typeof EquipmentSlotsDTO.prototype.toObject>;
            professions?: string[];
            memoryPools?: string[];
            characterMemories?: string[];
            enneagramType?: string;
            traits?: string[];
            diseases?: string[];
            addictions?: string[];
            factions?: string[];
            tags?: string[];
            targetEntity?: string;
            birthEra?: string;
            pastExperiences?: string[];
        }): CharacterDTO {
            const message = new CharacterDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.race != null) {
                message.race = data.race;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.birthsign != null) {
                message.birthsign = data.birthsign;
            }
            if (data.birthYear != null) {
                message.birthYear = data.birthYear;
            }
            if (data.birthMonth != null) {
                message.birthMonth = data.birthMonth;
            }
            if (data.birthDay != null) {
                message.birthDay = data.birthDay;
            }
            if (typeof data.skills == "object") {
                message.skills = new Map(Object.entries(data.skills));
            }
            if (data.equipmentSlots != null) {
                message.equipmentSlots = EquipmentSlotsDTO.fromObject(data.equipmentSlots);
            }
            if (data.professions != null) {
                message.professions = data.professions;
            }
            if (data.memoryPools != null) {
                message.memoryPools = data.memoryPools;
            }
            if (data.characterMemories != null) {
                message.characterMemories = data.characterMemories;
            }
            if (data.enneagramType != null) {
                message.enneagramType = data.enneagramType;
            }
            if (data.traits != null) {
                message.traits = data.traits;
            }
            if (data.diseases != null) {
                message.diseases = data.diseases;
            }
            if (data.addictions != null) {
                message.addictions = data.addictions;
            }
            if (data.factions != null) {
                message.factions = data.factions;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            if (data.birthEra != null) {
                message.birthEra = data.birthEra;
            }
            if (data.pastExperiences != null) {
                message.pastExperiences = data.pastExperiences;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                firstName?: string;
                lastName?: string;
                race?: string;
                gender?: GenderEnumDTO;
                birthsign?: string;
                birthYear?: number;
                birthMonth?: string;
                birthDay?: number;
                skills?: {
                    [key: string]: number;
                };
                equipmentSlots?: ReturnType<typeof EquipmentSlotsDTO.prototype.toObject>;
                professions?: string[];
                memoryPools?: string[];
                characterMemories?: string[];
                enneagramType?: string;
                traits?: string[];
                diseases?: string[];
                addictions?: string[];
                factions?: string[];
                tags?: string[];
                targetEntity?: string;
                birthEra?: string;
                pastExperiences?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.race != null) {
                data.race = this.race;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.birthsign != null) {
                data.birthsign = this.birthsign;
            }
            if (this.birthYear != null) {
                data.birthYear = this.birthYear;
            }
            if (this.birthMonth != null) {
                data.birthMonth = this.birthMonth;
            }
            if (this.birthDay != null) {
                data.birthDay = this.birthDay;
            }
            if (this.skills != null) {
                data.skills = (Object.fromEntries)(this.skills);
            }
            if (this.equipmentSlots != null) {
                data.equipmentSlots = this.equipmentSlots.toObject();
            }
            if (this.professions != null) {
                data.professions = this.professions;
            }
            if (this.memoryPools != null) {
                data.memoryPools = this.memoryPools;
            }
            if (this.characterMemories != null) {
                data.characterMemories = this.characterMemories;
            }
            if (this.enneagramType != null) {
                data.enneagramType = this.enneagramType;
            }
            if (this.traits != null) {
                data.traits = this.traits;
            }
            if (this.diseases != null) {
                data.diseases = this.diseases;
            }
            if (this.addictions != null) {
                data.addictions = this.addictions;
            }
            if (this.factions != null) {
                data.factions = this.factions;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            if (this.birthEra != null) {
                data.birthEra = this.birthEra;
            }
            if (this.pastExperiences != null) {
                data.pastExperiences = this.pastExperiences;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.has_metadata)
                writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(4, this.user);
            if (this.campaign.length)
                writer.writeString(5, this.campaign);
            if (this.world.length)
                writer.writeString(6, this.world);
            if (this.firstName.length)
                writer.writeString(7, this.firstName);
            if (this.lastName.length)
                writer.writeString(8, this.lastName);
            if (this.race.length)
                writer.writeString(9, this.race);
            if (this.gender != GenderEnumDTO.GENDER_MALE)
                writer.writeEnum(10, this.gender);
            if (this.birthsign.length)
                writer.writeString(11, this.birthsign);
            if (this.birthYear != 0)
                writer.writeInt32(12, this.birthYear);
            if (this.birthMonth.length)
                writer.writeString(13, this.birthMonth);
            if (this.birthDay != 0)
                writer.writeInt32(14, this.birthDay);
            for (const [key, value] of this.skills) {
                writer.writeMessage(15, this.skills, () => {
                    writer.writeString(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (this.has_equipmentSlots)
                writer.writeMessage(16, this.equipmentSlots, () => this.equipmentSlots.serialize(writer));
            if (this.professions.length)
                writer.writeRepeatedString(17, this.professions);
            if (this.memoryPools.length)
                writer.writeRepeatedString(18, this.memoryPools);
            if (this.characterMemories.length)
                writer.writeRepeatedString(19, this.characterMemories);
            if (this.enneagramType.length)
                writer.writeString(20, this.enneagramType);
            if (this.traits.length)
                writer.writeRepeatedString(21, this.traits);
            if (this.diseases.length)
                writer.writeRepeatedString(22, this.diseases);
            if (this.addictions.length)
                writer.writeRepeatedString(23, this.addictions);
            if (this.factions.length)
                writer.writeRepeatedString(24, this.factions);
            if (this.tags.length)
                writer.writeRepeatedString(25, this.tags);
            if (this.targetEntity.length)
                writer.writeString(26, this.targetEntity);
            if (this.birthEra.length)
                writer.writeString(27, this.birthEra);
            if (this.pastExperiences.length)
                writer.writeRepeatedString(28, this.pastExperiences);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    case 5:
                        message.campaign = reader.readString();
                        break;
                    case 6:
                        message.world = reader.readString();
                        break;
                    case 7:
                        message.firstName = reader.readString();
                        break;
                    case 8:
                        message.lastName = reader.readString();
                        break;
                    case 9:
                        message.race = reader.readString();
                        break;
                    case 10:
                        message.gender = reader.readEnum();
                        break;
                    case 11:
                        message.birthsign = reader.readString();
                        break;
                    case 12:
                        message.birthYear = reader.readInt32();
                        break;
                    case 13:
                        message.birthMonth = reader.readString();
                        break;
                    case 14:
                        message.birthDay = reader.readInt32();
                        break;
                    case 15:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skills as any, reader, reader.readString, reader.readInt32));
                        break;
                    case 16:
                        reader.readMessage(message.equipmentSlots, () => message.equipmentSlots = EquipmentSlotsDTO.deserialize(reader));
                        break;
                    case 17:
                        pb_1.Message.addToRepeatedField(message, 17, reader.readString());
                        break;
                    case 18:
                        pb_1.Message.addToRepeatedField(message, 18, reader.readString());
                        break;
                    case 19:
                        pb_1.Message.addToRepeatedField(message, 19, reader.readString());
                        break;
                    case 20:
                        message.enneagramType = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    case 22:
                        pb_1.Message.addToRepeatedField(message, 22, reader.readString());
                        break;
                    case 23:
                        pb_1.Message.addToRepeatedField(message, 23, reader.readString());
                        break;
                    case 24:
                        pb_1.Message.addToRepeatedField(message, 24, reader.readString());
                        break;
                    case 25:
                        pb_1.Message.addToRepeatedField(message, 25, reader.readString());
                        break;
                    case 26:
                        message.targetEntity = reader.readString();
                        break;
                    case 27:
                        message.birthEra = reader.readString();
                        break;
                    case 28:
                        pb_1.Message.addToRepeatedField(message, 28, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterDTO {
            return CharacterDTO.deserialize(bytes);
        }
    }
    export class CharactersDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: CharacterDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, CharacterDTO, 1) as CharacterDTO[];
        }
        set arr(value: CharacterDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof CharacterDTO.prototype.toObject>[];
        }): CharactersDTO {
            const message = new CharactersDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => CharacterDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof CharacterDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: CharacterDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: CharacterDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharactersDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharactersDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CharacterDTO.deserialize(reader), CharacterDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharactersDTO {
            return CharactersDTO.deserialize(bytes);
        }
    }
    export class AddictionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            characters?: string[];
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("characters" in data && data.characters != undefined) {
                    this.characters = data.characters;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get characters() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set characters(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            characters?: string[];
            targetEntity?: string;
        }): AddictionDTO {
            const message = new AddictionDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.characters != null) {
                message.characters = data.characters;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                characters?: string[];
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.characters != null) {
                data.characters = this.characters;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.characters.length)
                writer.writeRepeatedString(8, this.characters);
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddictionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddictionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddictionDTO {
            return AddictionDTO.deserialize(bytes);
        }
    }
    export class AddictionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: AddictionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, AddictionDTO, 1) as AddictionDTO[];
        }
        set arr(value: AddictionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof AddictionDTO.prototype.toObject>[];
        }): AddictionsDTO {
            const message = new AddictionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => AddictionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof AddictionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: AddictionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: AddictionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddictionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddictionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AddictionDTO.deserialize(reader), AddictionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddictionsDTO {
            return AddictionsDTO.deserialize(bytes);
        }
    }
    export class CharacterMemoryDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            character?: string;
            factStatus?: FactStatusDTO[];
            importance?: number;
            resistance?: number;
            accumulator?: number;
            acquiredAt?: number;
            lastUpdatedAt?: number;
            tags?: string[];
            memory?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("character" in data && data.character != undefined) {
                    this.character = data.character;
                }
                if ("factStatus" in data && data.factStatus != undefined) {
                    this.factStatus = data.factStatus;
                }
                if ("importance" in data && data.importance != undefined) {
                    this.importance = data.importance;
                }
                if ("resistance" in data && data.resistance != undefined) {
                    this.resistance = data.resistance;
                }
                if ("accumulator" in data && data.accumulator != undefined) {
                    this.accumulator = data.accumulator;
                }
                if ("acquiredAt" in data && data.acquiredAt != undefined) {
                    this.acquiredAt = data.acquiredAt;
                }
                if ("lastUpdatedAt" in data && data.lastUpdatedAt != undefined) {
                    this.lastUpdatedAt = data.lastUpdatedAt;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("memory" in data && data.memory != undefined) {
                    this.memory = data.memory;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get character() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set character(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get factStatus() {
            return pb_1.Message.getRepeatedWrapperField(this, FactStatusDTO, 9) as FactStatusDTO[];
        }
        set factStatus(value: FactStatusDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get importance() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set importance(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get resistance() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set resistance(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get accumulator() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set accumulator(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get acquiredAt() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set acquiredAt(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get lastUpdatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set lastUpdatedAt(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 15, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 15, value);
        }
        get memory() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set memory(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            character?: string;
            factStatus?: ReturnType<typeof FactStatusDTO.prototype.toObject>[];
            importance?: number;
            resistance?: number;
            accumulator?: number;
            acquiredAt?: number;
            lastUpdatedAt?: number;
            tags?: string[];
            memory?: string;
            targetEntity?: string;
        }): CharacterMemoryDTO {
            const message = new CharacterMemoryDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.character != null) {
                message.character = data.character;
            }
            if (data.factStatus != null) {
                message.factStatus = data.factStatus.map(item => FactStatusDTO.fromObject(item));
            }
            if (data.importance != null) {
                message.importance = data.importance;
            }
            if (data.resistance != null) {
                message.resistance = data.resistance;
            }
            if (data.accumulator != null) {
                message.accumulator = data.accumulator;
            }
            if (data.acquiredAt != null) {
                message.acquiredAt = data.acquiredAt;
            }
            if (data.lastUpdatedAt != null) {
                message.lastUpdatedAt = data.lastUpdatedAt;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.memory != null) {
                message.memory = data.memory;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                character?: string;
                factStatus?: ReturnType<typeof FactStatusDTO.prototype.toObject>[];
                importance?: number;
                resistance?: number;
                accumulator?: number;
                acquiredAt?: number;
                lastUpdatedAt?: number;
                tags?: string[];
                memory?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.character != null) {
                data.character = this.character;
            }
            if (this.factStatus != null) {
                data.factStatus = this.factStatus.map((item: FactStatusDTO) => item.toObject());
            }
            if (this.importance != null) {
                data.importance = this.importance;
            }
            if (this.resistance != null) {
                data.resistance = this.resistance;
            }
            if (this.accumulator != null) {
                data.accumulator = this.accumulator;
            }
            if (this.acquiredAt != null) {
                data.acquiredAt = this.acquiredAt;
            }
            if (this.lastUpdatedAt != null) {
                data.lastUpdatedAt = this.lastUpdatedAt;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.memory != null) {
                data.memory = this.memory;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.character.length)
                writer.writeString(8, this.character);
            if (this.factStatus.length)
                writer.writeRepeatedMessage(9, this.factStatus, (item: FactStatusDTO) => item.serialize(writer));
            if (this.importance != 0)
                writer.writeInt32(10, this.importance);
            if (this.resistance != 0)
                writer.writeInt32(11, this.resistance);
            if (this.accumulator != 0)
                writer.writeInt32(12, this.accumulator);
            if (this.acquiredAt != 0)
                writer.writeInt32(13, this.acquiredAt);
            if (this.lastUpdatedAt != 0)
                writer.writeInt32(14, this.lastUpdatedAt);
            if (this.tags.length)
                writer.writeRepeatedString(15, this.tags);
            if (this.memory.length)
                writer.writeString(16, this.memory);
            if (this.targetEntity.length)
                writer.writeString(17, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterMemoryDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterMemoryDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.character = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.factStatus, () => pb_1.Message.addToRepeatedWrapperField(message, 9, FactStatusDTO.deserialize(reader), FactStatusDTO));
                        break;
                    case 10:
                        message.importance = reader.readInt32();
                        break;
                    case 11:
                        message.resistance = reader.readInt32();
                        break;
                    case 12:
                        message.accumulator = reader.readInt32();
                        break;
                    case 13:
                        message.acquiredAt = reader.readInt32();
                        break;
                    case 14:
                        message.lastUpdatedAt = reader.readInt32();
                        break;
                    case 15:
                        pb_1.Message.addToRepeatedField(message, 15, reader.readString());
                        break;
                    case 16:
                        message.memory = reader.readString();
                        break;
                    case 17:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterMemoryDTO {
            return CharacterMemoryDTO.deserialize(bytes);
        }
    }
    export class CharacterMemoriesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: CharacterMemoryDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, CharacterMemoryDTO, 1) as CharacterMemoryDTO[];
        }
        set arr(value: CharacterMemoryDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof CharacterMemoryDTO.prototype.toObject>[];
        }): CharacterMemoriesDTO {
            const message = new CharacterMemoriesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => CharacterMemoryDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof CharacterMemoryDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: CharacterMemoryDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: CharacterMemoryDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterMemoriesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterMemoriesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CharacterMemoryDTO.deserialize(reader), CharacterMemoryDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterMemoriesDTO {
            return CharacterMemoriesDTO.deserialize(bytes);
        }
    }
    export class FactStatusDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            factId?: string;
            status?: FactStatusEnumDTO;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("factId" in data && data.factId != undefined) {
                    this.factId = data.factId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get factId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set factId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, FactStatusEnumDTO.FACT_STATUS_ACCESSIBLE) as FactStatusEnumDTO;
        }
        set status(value: FactStatusEnumDTO) {
            pb_1.Message.setField(this, 2, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            factId?: string;
            status?: FactStatusEnumDTO;
            clazz?: string;
        }): FactStatusDTO {
            const message = new FactStatusDTO({});
            if (data.factId != null) {
                message.factId = data.factId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                factId?: string;
                status?: FactStatusEnumDTO;
                clazz?: string;
            } = {};
            if (this.factId != null) {
                data.factId = this.factId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.factId.length)
                writer.writeString(1, this.factId);
            if (this.status != FactStatusEnumDTO.FACT_STATUS_ACCESSIBLE)
                writer.writeEnum(2, this.status);
            if (this.clazz.length)
                writer.writeString(3, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FactStatusDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FactStatusDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.factId = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    case 3:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FactStatusDTO {
            return FactStatusDTO.deserialize(bytes);
        }
    }
    export class FactStatusesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: FactStatusDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, FactStatusDTO, 1) as FactStatusDTO[];
        }
        set arr(value: FactStatusDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof FactStatusDTO.prototype.toObject>[];
        }): FactStatusesDTO {
            const message = new FactStatusesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => FactStatusDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof FactStatusDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: FactStatusDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: FactStatusDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FactStatusesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FactStatusesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FactStatusDTO.deserialize(reader), FactStatusDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FactStatusesDTO {
            return FactStatusesDTO.deserialize(bytes);
        }
    }
    export class TagDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            metadata?: Metadata;
            label?: string;
            subtype?: TagSubtypeEnumDTO;
            user?: string;
            campaign?: string;
            world?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("subtype" in data && data.subtype != undefined) {
                    this.subtype = data.subtype;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 3) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get subtype() {
            return pb_1.Message.getFieldWithDefault(this, 5, TagSubtypeEnumDTO.TAG_SUBTYPE_MATERIAL) as TagSubtypeEnumDTO;
        }
        set subtype(value: TagSubtypeEnumDTO) {
            pb_1.Message.setField(this, 5, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            label?: string;
            subtype?: TagSubtypeEnumDTO;
            user?: string;
            campaign?: string;
            world?: string;
            targetEntity?: string;
        }): TagDTO {
            const message = new TagDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.subtype != null) {
                message.subtype = data.subtype;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                label?: string;
                subtype?: TagSubtypeEnumDTO;
                user?: string;
                campaign?: string;
                world?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.subtype != null) {
                data.subtype = this.subtype;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.has_metadata)
                writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
            if (this.label.length)
                writer.writeString(4, this.label);
            if (this.subtype != TagSubtypeEnumDTO.TAG_SUBTYPE_MATERIAL)
                writer.writeEnum(5, this.subtype);
            if (this.user.length)
                writer.writeString(6, this.user);
            if (this.campaign.length)
                writer.writeString(7, this.campaign);
            if (this.world.length)
                writer.writeString(8, this.world);
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TagDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TagDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    case 5:
                        message.subtype = reader.readEnum();
                        break;
                    case 6:
                        message.user = reader.readString();
                        break;
                    case 7:
                        message.campaign = reader.readString();
                        break;
                    case 8:
                        message.world = reader.readString();
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TagDTO {
            return TagDTO.deserialize(bytes);
        }
    }
    export class TagsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: TagDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, TagDTO, 1) as TagDTO[];
        }
        set arr(value: TagDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof TagDTO.prototype.toObject>[];
        }): TagsDTO {
            const message = new TagsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => TagDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof TagDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: TagDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: TagDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TagsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TagsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TagDTO.deserialize(reader), TagDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TagsDTO {
            return TagsDTO.deserialize(bytes);
        }
    }
    export class SkillDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            description?: string;
            category?: SkillCategoryEnumDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 10, SkillCategoryEnumDTO.SKILL_CATEGORY_CRAFTING) as SkillCategoryEnumDTO;
        }
        set category(value: SkillCategoryEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            description?: string;
            category?: SkillCategoryEnumDTO;
            targetEntity?: string;
        }): SkillDTO {
            const message = new SkillDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                description?: string;
                category?: SkillCategoryEnumDTO;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.description.length)
                writer.writeString(9, this.description);
            if (this.category != SkillCategoryEnumDTO.SKILL_CATEGORY_CRAFTING)
                writer.writeEnum(10, this.category);
            if (this.targetEntity.length)
                writer.writeString(11, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SkillDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SkillDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.description = reader.readString();
                        break;
                    case 10:
                        message.category = reader.readEnum();
                        break;
                    case 11:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SkillDTO {
            return SkillDTO.deserialize(bytes);
        }
    }
    export class SkillsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: SkillDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, SkillDTO, 1) as SkillDTO[];
        }
        set arr(value: SkillDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof SkillDTO.prototype.toObject>[];
        }): SkillsDTO {
            const message = new SkillsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => SkillDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof SkillDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: SkillDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: SkillDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SkillsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SkillsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SkillDTO.deserialize(reader), SkillDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SkillsDTO {
            return SkillsDTO.deserialize(bytes);
        }
    }
    export class TraitDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            targetEntity?: string;
            type?: TraitTypeEnumDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 10, TraitTypeEnumDTO.TRAIT_CONGENITAL) as TraitTypeEnumDTO;
        }
        set type(value: TraitTypeEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            targetEntity?: string;
            type?: TraitTypeEnumDTO;
        }): TraitDTO {
            const message = new TraitDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                targetEntity?: string;
                type?: TraitTypeEnumDTO;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (this.type != TraitTypeEnumDTO.TRAIT_CONGENITAL)
                writer.writeEnum(10, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraitDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraitDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    case 10:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TraitDTO {
            return TraitDTO.deserialize(bytes);
        }
    }
    export class TraitsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: TraitDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, TraitDTO, 1) as TraitDTO[];
        }
        set arr(value: TraitDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof TraitDTO.prototype.toObject>[];
        }): TraitsDTO {
            const message = new TraitsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => TraitDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof TraitDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: TraitDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: TraitDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraitsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraitsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TraitDTO.deserialize(reader), TraitDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TraitsDTO {
            return TraitsDTO.deserialize(bytes);
        }
    }
    export class DiseaseDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            description?: string;
            severity?: DiseaseSeverityEnumDTO;
            characters?: string[];
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("severity" in data && data.severity != undefined) {
                    this.severity = data.severity;
                }
                if ("characters" in data && data.characters != undefined) {
                    this.characters = data.characters;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get severity() {
            return pb_1.Message.getFieldWithDefault(this, 10, DiseaseSeverityEnumDTO.DISEASE_SEVERITY_MILD) as DiseaseSeverityEnumDTO;
        }
        set severity(value: DiseaseSeverityEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        get characters() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as string[];
        }
        set characters(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            description?: string;
            severity?: DiseaseSeverityEnumDTO;
            characters?: string[];
            targetEntity?: string;
        }): DiseaseDTO {
            const message = new DiseaseDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.severity != null) {
                message.severity = data.severity;
            }
            if (data.characters != null) {
                message.characters = data.characters;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                description?: string;
                severity?: DiseaseSeverityEnumDTO;
                characters?: string[];
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.severity != null) {
                data.severity = this.severity;
            }
            if (this.characters != null) {
                data.characters = this.characters;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.description.length)
                writer.writeString(9, this.description);
            if (this.severity != DiseaseSeverityEnumDTO.DISEASE_SEVERITY_MILD)
                writer.writeEnum(10, this.severity);
            if (this.characters.length)
                writer.writeRepeatedString(11, this.characters);
            if (this.targetEntity.length)
                writer.writeString(12, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiseaseDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiseaseDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.description = reader.readString();
                        break;
                    case 10:
                        message.severity = reader.readEnum();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 12:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiseaseDTO {
            return DiseaseDTO.deserialize(bytes);
        }
    }
    export class DiseasesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: DiseaseDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, DiseaseDTO, 1) as DiseaseDTO[];
        }
        set arr(value: DiseaseDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof DiseaseDTO.prototype.toObject>[];
        }): DiseasesDTO {
            const message = new DiseasesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => DiseaseDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof DiseaseDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: DiseaseDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: DiseaseDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiseasesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiseasesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DiseaseDTO.deserialize(reader), DiseaseDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiseasesDTO {
            return DiseasesDTO.deserialize(bytes);
        }
    }
    export class FactDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            description?: string;
            weight?: number;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            description?: string;
            weight?: number;
            targetEntity?: string;
        }): FactDTO {
            const message = new FactDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                description?: string;
                weight?: number;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.description.length)
                writer.writeString(9, this.description);
            if (this.weight != 0)
                writer.writeInt32(10, this.weight);
            if (this.targetEntity.length)
                writer.writeString(11, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FactDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FactDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.description = reader.readString();
                        break;
                    case 10:
                        message.weight = reader.readInt32();
                        break;
                    case 11:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FactDTO {
            return FactDTO.deserialize(bytes);
        }
    }
    export class FactsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: FactDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, FactDTO, 1) as FactDTO[];
        }
        set arr(value: FactDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof FactDTO.prototype.toObject>[];
        }): FactsDTO {
            const message = new FactsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => FactDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof FactDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: FactDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: FactDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FactsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FactsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FactDTO.deserialize(reader), FactDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FactsDTO {
            return FactsDTO.deserialize(bytes);
        }
    }
    export class FactionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            targetEntity?: string;
        }): FactionDTO {
            const message = new FactionDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FactionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FactionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FactionDTO {
            return FactionDTO.deserialize(bytes);
        }
    }
    export class FactionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: FactionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, FactionDTO, 1) as FactionDTO[];
        }
        set arr(value: FactionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof FactionDTO.prototype.toObject>[];
        }): FactionsDTO {
            const message = new FactionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => FactionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof FactionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: FactionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: FactionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FactionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FactionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FactionDTO.deserialize(reader), FactionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FactionsDTO {
            return FactionsDTO.deserialize(bytes);
        }
    }
    export class MemoryPoolDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            memoryPoolEntries?: string[];
            tags?: string[];
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("memoryPoolEntries" in data && data.memoryPoolEntries != undefined) {
                    this.memoryPoolEntries = data.memoryPoolEntries;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get memoryPoolEntries() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set memoryPoolEntries(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            memoryPoolEntries?: string[];
            tags?: string[];
            targetEntity?: string;
        }): MemoryPoolDTO {
            const message = new MemoryPoolDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.memoryPoolEntries != null) {
                message.memoryPoolEntries = data.memoryPoolEntries;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                description?: string;
                memoryPoolEntries?: string[];
                tags?: string[];
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.memoryPoolEntries != null) {
                data.memoryPoolEntries = this.memoryPoolEntries;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.description.length)
                writer.writeString(8, this.description);
            if (this.memoryPoolEntries.length)
                writer.writeRepeatedString(9, this.memoryPoolEntries);
            if (this.tags.length)
                writer.writeRepeatedString(10, this.tags);
            if (this.targetEntity.length)
                writer.writeString(11, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryPoolDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryPoolDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryPoolDTO {
            return MemoryPoolDTO.deserialize(bytes);
        }
    }
    export class MemoryPoolsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: MemoryPoolDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, MemoryPoolDTO, 1) as MemoryPoolDTO[];
        }
        set arr(value: MemoryPoolDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof MemoryPoolDTO.prototype.toObject>[];
        }): MemoryPoolsDTO {
            const message = new MemoryPoolsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => MemoryPoolDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof MemoryPoolDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: MemoryPoolDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: MemoryPoolDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryPoolsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryPoolsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MemoryPoolDTO.deserialize(reader), MemoryPoolDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryPoolsDTO {
            return MemoryPoolsDTO.deserialize(bytes);
        }
    }
    export class MemoryPoolEntryDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            memoryPool?: string;
            memory?: string;
            probability?: number;
            defaultClarity?: number;
            defaultImportance?: number;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("memoryPool" in data && data.memoryPool != undefined) {
                    this.memoryPool = data.memoryPool;
                }
                if ("memory" in data && data.memory != undefined) {
                    this.memory = data.memory;
                }
                if ("probability" in data && data.probability != undefined) {
                    this.probability = data.probability;
                }
                if ("defaultClarity" in data && data.defaultClarity != undefined) {
                    this.defaultClarity = data.defaultClarity;
                }
                if ("defaultImportance" in data && data.defaultImportance != undefined) {
                    this.defaultImportance = data.defaultImportance;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get memoryPool() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set memoryPool(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get memory() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set memory(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get probability() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set probability(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get defaultClarity() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set defaultClarity(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get defaultImportance() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set defaultImportance(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            memoryPool?: string;
            memory?: string;
            probability?: number;
            defaultClarity?: number;
            defaultImportance?: number;
            targetEntity?: string;
        }): MemoryPoolEntryDTO {
            const message = new MemoryPoolEntryDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.memoryPool != null) {
                message.memoryPool = data.memoryPool;
            }
            if (data.memory != null) {
                message.memory = data.memory;
            }
            if (data.probability != null) {
                message.probability = data.probability;
            }
            if (data.defaultClarity != null) {
                message.defaultClarity = data.defaultClarity;
            }
            if (data.defaultImportance != null) {
                message.defaultImportance = data.defaultImportance;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                memoryPool?: string;
                memory?: string;
                probability?: number;
                defaultClarity?: number;
                defaultImportance?: number;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.memoryPool != null) {
                data.memoryPool = this.memoryPool;
            }
            if (this.memory != null) {
                data.memory = this.memory;
            }
            if (this.probability != null) {
                data.probability = this.probability;
            }
            if (this.defaultClarity != null) {
                data.defaultClarity = this.defaultClarity;
            }
            if (this.defaultImportance != null) {
                data.defaultImportance = this.defaultImportance;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.memoryPool.length)
                writer.writeString(8, this.memoryPool);
            if (this.memory.length)
                writer.writeString(9, this.memory);
            if (this.probability != 0)
                writer.writeInt32(10, this.probability);
            if (this.defaultClarity != 0)
                writer.writeInt32(11, this.defaultClarity);
            if (this.defaultImportance != 0)
                writer.writeInt32(12, this.defaultImportance);
            if (this.targetEntity.length)
                writer.writeString(13, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryPoolEntryDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryPoolEntryDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.memoryPool = reader.readString();
                        break;
                    case 9:
                        message.memory = reader.readString();
                        break;
                    case 10:
                        message.probability = reader.readInt32();
                        break;
                    case 11:
                        message.defaultClarity = reader.readInt32();
                        break;
                    case 12:
                        message.defaultImportance = reader.readInt32();
                        break;
                    case 13:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryPoolEntryDTO {
            return MemoryPoolEntryDTO.deserialize(bytes);
        }
    }
    export class MemoryPoolEntriesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: MemoryPoolEntryDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, MemoryPoolEntryDTO, 1) as MemoryPoolEntryDTO[];
        }
        set arr(value: MemoryPoolEntryDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof MemoryPoolEntryDTO.prototype.toObject>[];
        }): MemoryPoolEntriesDTO {
            const message = new MemoryPoolEntriesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => MemoryPoolEntryDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof MemoryPoolEntryDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: MemoryPoolEntryDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: MemoryPoolEntryDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryPoolEntriesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryPoolEntriesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MemoryPoolEntryDTO.deserialize(reader), MemoryPoolEntryDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryPoolEntriesDTO {
            return MemoryPoolEntriesDTO.deserialize(bytes);
        }
    }
    export class CharacterProfessionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            memoryPools?: string[];
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("memoryPools" in data && data.memoryPools != undefined) {
                    this.memoryPools = data.memoryPools;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get memoryPools() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set memoryPools(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            memoryPools?: string[];
            targetEntity?: string;
        }): CharacterProfessionDTO {
            const message = new CharacterProfessionDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.memoryPools != null) {
                message.memoryPools = data.memoryPools;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                memoryPools?: string[];
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.memoryPools != null) {
                data.memoryPools = this.memoryPools;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.memoryPools.length)
                writer.writeRepeatedString(9, this.memoryPools);
            if (this.targetEntity.length)
                writer.writeString(10, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterProfessionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterProfessionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterProfessionDTO {
            return CharacterProfessionDTO.deserialize(bytes);
        }
    }
    export class CharacterProfessionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: CharacterProfessionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, CharacterProfessionDTO, 1) as CharacterProfessionDTO[];
        }
        set arr(value: CharacterProfessionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof CharacterProfessionDTO.prototype.toObject>[];
        }): CharacterProfessionsDTO {
            const message = new CharacterProfessionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => CharacterProfessionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof CharacterProfessionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: CharacterProfessionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: CharacterProfessionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterProfessionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterProfessionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CharacterProfessionDTO.deserialize(reader), CharacterProfessionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterProfessionsDTO {
            return CharacterProfessionsDTO.deserialize(bytes);
        }
    }
    export class EquipmentSlotDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            allowedEntities?: string[];
            equippedItem?: ItemDTO;
            character?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("allowedEntities" in data && data.allowedEntities != undefined) {
                    this.allowedEntities = data.allowedEntities;
                }
                if ("equippedItem" in data && data.equippedItem != undefined) {
                    this.equippedItem = data.equippedItem;
                }
                if ("character" in data && data.character != undefined) {
                    this.character = data.character;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get allowedEntities() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set allowedEntities(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get equippedItem() {
            return pb_1.Message.getWrapperField(this, ItemDTO, 9) as ItemDTO;
        }
        set equippedItem(value: ItemDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_equippedItem() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get character() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set character(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            allowedEntities?: string[];
            equippedItem?: ReturnType<typeof ItemDTO.prototype.toObject>;
            character?: string;
            targetEntity?: string;
        }): EquipmentSlotDTO {
            const message = new EquipmentSlotDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.allowedEntities != null) {
                message.allowedEntities = data.allowedEntities;
            }
            if (data.equippedItem != null) {
                message.equippedItem = ItemDTO.fromObject(data.equippedItem);
            }
            if (data.character != null) {
                message.character = data.character;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                allowedEntities?: string[];
                equippedItem?: ReturnType<typeof ItemDTO.prototype.toObject>;
                character?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.allowedEntities != null) {
                data.allowedEntities = this.allowedEntities;
            }
            if (this.equippedItem != null) {
                data.equippedItem = this.equippedItem.toObject();
            }
            if (this.character != null) {
                data.character = this.character;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.allowedEntities.length)
                writer.writeRepeatedString(8, this.allowedEntities);
            if (this.has_equippedItem)
                writer.writeMessage(9, this.equippedItem, () => this.equippedItem.serialize(writer));
            if (this.character.length)
                writer.writeString(10, this.character);
            if (this.targetEntity.length)
                writer.writeString(11, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EquipmentSlotDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EquipmentSlotDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.equippedItem, () => message.equippedItem = ItemDTO.deserialize(reader));
                        break;
                    case 10:
                        message.character = reader.readString();
                        break;
                    case 11:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EquipmentSlotDTO {
            return EquipmentSlotDTO.deserialize(bytes);
        }
    }
    export class EquipmentSlotsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: EquipmentSlotDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, EquipmentSlotDTO, 1) as EquipmentSlotDTO[];
        }
        set arr(value: EquipmentSlotDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof EquipmentSlotDTO.prototype.toObject>[];
        }): EquipmentSlotsDTO {
            const message = new EquipmentSlotsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => EquipmentSlotDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof EquipmentSlotDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: EquipmentSlotDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: EquipmentSlotDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EquipmentSlotsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EquipmentSlotsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EquipmentSlotDTO.deserialize(reader), EquipmentSlotDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EquipmentSlotsDTO {
            return EquipmentSlotsDTO.deserialize(bytes);
        }
    }
    export class BirthsignDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            targetEntity?: string;
        }): BirthsignDTO {
            const message = new BirthsignDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.targetEntity.length)
                writer.writeString(8, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BirthsignDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BirthsignDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BirthsignDTO {
            return BirthsignDTO.deserialize(bytes);
        }
    }
    export class BirthsignsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: BirthsignDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, BirthsignDTO, 1) as BirthsignDTO[];
        }
        set arr(value: BirthsignDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof BirthsignDTO.prototype.toObject>[];
        }): BirthsignsDTO {
            const message = new BirthsignsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => BirthsignDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof BirthsignDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: BirthsignDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: BirthsignDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BirthsignsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BirthsignsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BirthsignDTO.deserialize(reader), BirthsignDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BirthsignsDTO {
            return BirthsignsDTO.deserialize(bytes);
        }
    }
    export class RaceDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            equipmentSlotDefinitions?: EquipmentSlotDefinitionsDTO;
            user?: string;
            campaign?: string;
            world?: string;
            metadata?: Metadata;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("equipmentSlotDefinitions" in data && data.equipmentSlotDefinitions != undefined) {
                    this.equipmentSlotDefinitions = data.equipmentSlotDefinitions;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get equipmentSlotDefinitions() {
            return pb_1.Message.getWrapperField(this, EquipmentSlotDefinitionsDTO, 4) as EquipmentSlotDefinitionsDTO;
        }
        set equipmentSlotDefinitions(value: EquipmentSlotDefinitionsDTO) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_equipmentSlotDefinitions() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 8) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            equipmentSlotDefinitions?: ReturnType<typeof EquipmentSlotDefinitionsDTO.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            targetEntity?: string;
        }): RaceDTO {
            const message = new RaceDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.equipmentSlotDefinitions != null) {
                message.equipmentSlotDefinitions = EquipmentSlotDefinitionsDTO.fromObject(data.equipmentSlotDefinitions);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                equipmentSlotDefinitions?: ReturnType<typeof EquipmentSlotDefinitionsDTO.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.equipmentSlotDefinitions != null) {
                data.equipmentSlotDefinitions = this.equipmentSlotDefinitions.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_equipmentSlotDefinitions)
                writer.writeMessage(4, this.equipmentSlotDefinitions, () => this.equipmentSlotDefinitions.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.has_metadata)
                writer.writeMessage(8, this.metadata, () => this.metadata.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RaceDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RaceDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.equipmentSlotDefinitions, () => message.equipmentSlotDefinitions = EquipmentSlotDefinitionsDTO.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RaceDTO {
            return RaceDTO.deserialize(bytes);
        }
    }
    export class RacesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: RaceDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, RaceDTO, 1) as RaceDTO[];
        }
        set arr(value: RaceDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof RaceDTO.prototype.toObject>[];
        }): RacesDTO {
            const message = new RacesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => RaceDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof RaceDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: RaceDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: RaceDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RacesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RacesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RaceDTO.deserialize(reader), RaceDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RacesDTO {
            return RacesDTO.deserialize(bytes);
        }
    }
    export class EquipmentSlotDefinitionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            allowedEntities?: string[];
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("allowedEntities" in data && data.allowedEntities != undefined) {
                    this.allowedEntities = data.allowedEntities;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get allowedEntities() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set allowedEntities(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            allowedEntities?: string[];
            clazz?: string;
        }): EquipmentSlotDefinitionDTO {
            const message = new EquipmentSlotDefinitionDTO({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.allowedEntities != null) {
                message.allowedEntities = data.allowedEntities;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                allowedEntities?: string[];
                clazz?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.allowedEntities != null) {
                data.allowedEntities = this.allowedEntities;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.allowedEntities.length)
                writer.writeRepeatedString(2, this.allowedEntities);
            if (this.clazz.length)
                writer.writeString(3, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EquipmentSlotDefinitionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EquipmentSlotDefinitionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EquipmentSlotDefinitionDTO {
            return EquipmentSlotDefinitionDTO.deserialize(bytes);
        }
    }
    export class EquipmentSlotDefinitionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: EquipmentSlotDefinitionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, EquipmentSlotDefinitionDTO, 1) as EquipmentSlotDefinitionDTO[];
        }
        set arr(value: EquipmentSlotDefinitionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof EquipmentSlotDefinitionDTO.prototype.toObject>[];
        }): EquipmentSlotDefinitionsDTO {
            const message = new EquipmentSlotDefinitionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => EquipmentSlotDefinitionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof EquipmentSlotDefinitionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: EquipmentSlotDefinitionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: EquipmentSlotDefinitionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EquipmentSlotDefinitionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EquipmentSlotDefinitionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EquipmentSlotDefinitionDTO.deserialize(reader), EquipmentSlotDefinitionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EquipmentSlotDefinitionsDTO {
            return EquipmentSlotDefinitionsDTO.deserialize(bytes);
        }
    }
    export class StorageSlotDefinitionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            grid?: number[];
            name?: string;
            maxWeight?: number;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("grid" in data && data.grid != undefined) {
                    this.grid = data.grid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("maxWeight" in data && data.maxWeight != undefined) {
                    this.maxWeight = data.maxWeight;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get grid() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set grid(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get maxWeight() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set maxWeight(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            grid?: number[];
            name?: string;
            maxWeight?: number;
            clazz?: string;
        }): StorageSlotDefinitionDTO {
            const message = new StorageSlotDefinitionDTO({});
            if (data.grid != null) {
                message.grid = data.grid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.maxWeight != null) {
                message.maxWeight = data.maxWeight;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                grid?: number[];
                name?: string;
                maxWeight?: number;
                clazz?: string;
            } = {};
            if (this.grid != null) {
                data.grid = this.grid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.maxWeight != null) {
                data.maxWeight = this.maxWeight;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.grid.length)
                writer.writePackedInt32(1, this.grid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.maxWeight != 0)
                writer.writeInt32(3, this.maxWeight);
            if (this.clazz.length)
                writer.writeString(4, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageSlotDefinitionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageSlotDefinitionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.grid = reader.readPackedInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.maxWeight = reader.readInt32();
                        break;
                    case 4:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageSlotDefinitionDTO {
            return StorageSlotDefinitionDTO.deserialize(bytes);
        }
    }
    export class StorageSlotDefinitionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: StorageSlotDefinitionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageSlotDefinitionDTO, 1) as StorageSlotDefinitionDTO[];
        }
        set arr(value: StorageSlotDefinitionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof StorageSlotDefinitionDTO.prototype.toObject>[];
        }): StorageSlotDefinitionsDTO {
            const message = new StorageSlotDefinitionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => StorageSlotDefinitionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof StorageSlotDefinitionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: StorageSlotDefinitionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: StorageSlotDefinitionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageSlotDefinitionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageSlotDefinitionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StorageSlotDefinitionDTO.deserialize(reader), StorageSlotDefinitionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageSlotDefinitionsDTO {
            return StorageSlotDefinitionsDTO.deserialize(bytes);
        }
    }
    export class MoodDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            targetEntity?: string;
        }): MoodDTO {
            const message = new MoodDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                description?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.description.length)
                writer.writeString(8, this.description);
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoodDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoodDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoodDTO {
            return MoodDTO.deserialize(bytes);
        }
    }
    export class MoodsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: MoodDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, MoodDTO, 1) as MoodDTO[];
        }
        set arr(value: MoodDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof MoodDTO.prototype.toObject>[];
        }): MoodsDTO {
            const message = new MoodsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => MoodDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof MoodDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: MoodDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: MoodDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoodsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoodsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MoodDTO.deserialize(reader), MoodDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoodsDTO {
            return MoodsDTO.deserialize(bytes);
        }
    }
    export class ReligionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            rituals?: ReligionRitualsDTO;
            tenets?: ReligionTenetsDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("rituals" in data && data.rituals != undefined) {
                    this.rituals = data.rituals;
                }
                if ("tenets" in data && data.tenets != undefined) {
                    this.tenets = data.tenets;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get rituals() {
            return pb_1.Message.getWrapperField(this, ReligionRitualsDTO, 9) as ReligionRitualsDTO;
        }
        set rituals(value: ReligionRitualsDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_rituals() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get tenets() {
            return pb_1.Message.getWrapperField(this, ReligionTenetsDTO, 10) as ReligionTenetsDTO;
        }
        set tenets(value: ReligionTenetsDTO) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_tenets() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            rituals?: ReturnType<typeof ReligionRitualsDTO.prototype.toObject>;
            tenets?: ReturnType<typeof ReligionTenetsDTO.prototype.toObject>;
            targetEntity?: string;
        }): ReligionDTO {
            const message = new ReligionDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.rituals != null) {
                message.rituals = ReligionRitualsDTO.fromObject(data.rituals);
            }
            if (data.tenets != null) {
                message.tenets = ReligionTenetsDTO.fromObject(data.tenets);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                description?: string;
                rituals?: ReturnType<typeof ReligionRitualsDTO.prototype.toObject>;
                tenets?: ReturnType<typeof ReligionTenetsDTO.prototype.toObject>;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.rituals != null) {
                data.rituals = this.rituals.toObject();
            }
            if (this.tenets != null) {
                data.tenets = this.tenets.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.description.length)
                writer.writeString(8, this.description);
            if (this.has_rituals)
                writer.writeMessage(9, this.rituals, () => this.rituals.serialize(writer));
            if (this.has_tenets)
                writer.writeMessage(10, this.tenets, () => this.tenets.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(11, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReligionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReligionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.rituals, () => message.rituals = ReligionRitualsDTO.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.tenets, () => message.tenets = ReligionTenetsDTO.deserialize(reader));
                        break;
                    case 11:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReligionDTO {
            return ReligionDTO.deserialize(bytes);
        }
    }
    export class ReligionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ReligionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ReligionDTO, 1) as ReligionDTO[];
        }
        set arr(value: ReligionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ReligionDTO.prototype.toObject>[];
        }): ReligionsDTO {
            const message = new ReligionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ReligionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ReligionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ReligionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ReligionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReligionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReligionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReligionDTO.deserialize(reader), ReligionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReligionsDTO {
            return ReligionsDTO.deserialize(bytes);
        }
    }
    export class ReligionRitualDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            clazz?: string;
        }): ReligionRitualDTO {
            const message = new ReligionRitualDTO({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                clazz?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.clazz.length)
                writer.writeString(3, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReligionRitualDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReligionRitualDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReligionRitualDTO {
            return ReligionRitualDTO.deserialize(bytes);
        }
    }
    export class ReligionRitualsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ReligionRitualDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ReligionRitualDTO, 1) as ReligionRitualDTO[];
        }
        set arr(value: ReligionRitualDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ReligionRitualDTO.prototype.toObject>[];
        }): ReligionRitualsDTO {
            const message = new ReligionRitualsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ReligionRitualDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ReligionRitualDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ReligionRitualDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ReligionRitualDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReligionRitualsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReligionRitualsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReligionRitualDTO.deserialize(reader), ReligionRitualDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReligionRitualsDTO {
            return ReligionRitualsDTO.deserialize(bytes);
        }
    }
    export class ReligionTenetDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            clazz?: string;
        }): ReligionTenetDTO {
            const message = new ReligionTenetDTO({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                clazz?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.clazz.length)
                writer.writeString(3, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReligionTenetDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReligionTenetDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReligionTenetDTO {
            return ReligionTenetDTO.deserialize(bytes);
        }
    }
    export class ReligionTenetsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: ReligionTenetDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, ReligionTenetDTO, 1) as ReligionTenetDTO[];
        }
        set arr(value: ReligionTenetDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof ReligionTenetDTO.prototype.toObject>[];
        }): ReligionTenetsDTO {
            const message = new ReligionTenetsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => ReligionTenetDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof ReligionTenetDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: ReligionTenetDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: ReligionTenetDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReligionTenetsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReligionTenetsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReligionTenetDTO.deserialize(reader), ReligionTenetDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReligionTenetsDTO {
            return ReligionTenetsDTO.deserialize(bytes);
        }
    }
    export class GridPositionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): GridPositionDTO {
            const message = new GridPositionDTO({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeInt32(1, this.x);
            if (this.y != 0)
                writer.writeInt32(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridPositionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridPositionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readInt32();
                        break;
                    case 2:
                        message.y = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GridPositionDTO {
            return GridPositionDTO.deserialize(bytes);
        }
    }
    export class GenerationInstructionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            blueprintId?: string;
            idAndQuant?: never;
            simpleProb?: never;
            gaussianProb?: never;
            combinator?: never;
        } | {
            blueprintId?: never;
            idAndQuant?: IdAndQuantDTO;
            simpleProb?: never;
            gaussianProb?: never;
            combinator?: never;
        } | {
            blueprintId?: never;
            idAndQuant?: never;
            simpleProb?: SimpleProbDTO;
            gaussianProb?: never;
            combinator?: never;
        } | {
            blueprintId?: never;
            idAndQuant?: never;
            simpleProb?: never;
            gaussianProb?: GaussianProbDTO;
            combinator?: never;
        } | {
            blueprintId?: never;
            idAndQuant?: never;
            simpleProb?: never;
            gaussianProb?: never;
            combinator?: CombinatorDTO;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("idAndQuant" in data && data.idAndQuant != undefined) {
                    this.idAndQuant = data.idAndQuant;
                }
                if ("simpleProb" in data && data.simpleProb != undefined) {
                    this.simpleProb = data.simpleProb;
                }
                if ("gaussianProb" in data && data.gaussianProb != undefined) {
                    this.gaussianProb = data.gaussianProb;
                }
                if ("combinator" in data && data.combinator != undefined) {
                    this.combinator = data.combinator;
                }
            }
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_blueprintId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get idAndQuant() {
            return pb_1.Message.getWrapperField(this, IdAndQuantDTO, 2) as IdAndQuantDTO;
        }
        set idAndQuant(value: IdAndQuantDTO) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_idAndQuant() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get simpleProb() {
            return pb_1.Message.getWrapperField(this, SimpleProbDTO, 3) as SimpleProbDTO;
        }
        set simpleProb(value: SimpleProbDTO) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_simpleProb() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get gaussianProb() {
            return pb_1.Message.getWrapperField(this, GaussianProbDTO, 4) as GaussianProbDTO;
        }
        set gaussianProb(value: GaussianProbDTO) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_gaussianProb() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get combinator() {
            return pb_1.Message.getWrapperField(this, CombinatorDTO, 5) as CombinatorDTO;
        }
        set combinator(value: CombinatorDTO) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_combinator() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get instruction() {
            const cases: {
                [index: number]: "none" | "blueprintId" | "idAndQuant" | "simpleProb" | "gaussianProb" | "combinator";
            } = {
                0: "none",
                1: "blueprintId",
                2: "idAndQuant",
                3: "simpleProb",
                4: "gaussianProb",
                5: "combinator"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            blueprintId?: string;
            idAndQuant?: ReturnType<typeof IdAndQuantDTO.prototype.toObject>;
            simpleProb?: ReturnType<typeof SimpleProbDTO.prototype.toObject>;
            gaussianProb?: ReturnType<typeof GaussianProbDTO.prototype.toObject>;
            combinator?: ReturnType<typeof CombinatorDTO.prototype.toObject>;
        }): GenerationInstructionDTO {
            const message = new GenerationInstructionDTO({});
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.idAndQuant != null) {
                message.idAndQuant = IdAndQuantDTO.fromObject(data.idAndQuant);
            }
            if (data.simpleProb != null) {
                message.simpleProb = SimpleProbDTO.fromObject(data.simpleProb);
            }
            if (data.gaussianProb != null) {
                message.gaussianProb = GaussianProbDTO.fromObject(data.gaussianProb);
            }
            if (data.combinator != null) {
                message.combinator = CombinatorDTO.fromObject(data.combinator);
            }
            return message;
        }
        toObject() {
            const data: {
                blueprintId?: string;
                idAndQuant?: ReturnType<typeof IdAndQuantDTO.prototype.toObject>;
                simpleProb?: ReturnType<typeof SimpleProbDTO.prototype.toObject>;
                gaussianProb?: ReturnType<typeof GaussianProbDTO.prototype.toObject>;
                combinator?: ReturnType<typeof CombinatorDTO.prototype.toObject>;
            } = {};
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.idAndQuant != null) {
                data.idAndQuant = this.idAndQuant.toObject();
            }
            if (this.simpleProb != null) {
                data.simpleProb = this.simpleProb.toObject();
            }
            if (this.gaussianProb != null) {
                data.gaussianProb = this.gaussianProb.toObject();
            }
            if (this.combinator != null) {
                data.combinator = this.combinator.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_blueprintId)
                writer.writeString(1, this.blueprintId);
            if (this.has_idAndQuant)
                writer.writeMessage(2, this.idAndQuant, () => this.idAndQuant.serialize(writer));
            if (this.has_simpleProb)
                writer.writeMessage(3, this.simpleProb, () => this.simpleProb.serialize(writer));
            if (this.has_gaussianProb)
                writer.writeMessage(4, this.gaussianProb, () => this.gaussianProb.serialize(writer));
            if (this.has_combinator)
                writer.writeMessage(5, this.combinator, () => this.combinator.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerationInstructionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerationInstructionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blueprintId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.idAndQuant, () => message.idAndQuant = IdAndQuantDTO.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.simpleProb, () => message.simpleProb = SimpleProbDTO.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.gaussianProb, () => message.gaussianProb = GaussianProbDTO.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.combinator, () => message.combinator = CombinatorDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerationInstructionDTO {
            return GenerationInstructionDTO.deserialize(bytes);
        }
    }
    export class GenerationInstructionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: GenerationInstructionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, GenerationInstructionDTO, 1) as GenerationInstructionDTO[];
        }
        set arr(value: GenerationInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>[];
        }): GenerationInstructionsDTO {
            const message = new GenerationInstructionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => GenerationInstructionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: GenerationInstructionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: GenerationInstructionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerationInstructionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerationInstructionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GenerationInstructionDTO.deserialize(reader), GenerationInstructionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerationInstructionsDTO {
            return GenerationInstructionsDTO.deserialize(bytes);
        }
    }
    export class IdAndQuantDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blueprintId?: string;
            quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            blueprintId?: string;
            quantity?: number;
        }): IdAndQuantDTO {
            const message = new IdAndQuantDTO({});
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                blueprintId?: string;
                quantity?: number;
            } = {};
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blueprintId.length)
                writer.writeString(1, this.blueprintId);
            if (this.quantity != 0)
                writer.writeInt32(2, this.quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdAndQuantDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdAndQuantDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blueprintId = reader.readString();
                        break;
                    case 2:
                        message.quantity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdAndQuantDTO {
            return IdAndQuantDTO.deserialize(bytes);
        }
    }
    export class IdsAndQuantsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: IdAndQuantDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, IdAndQuantDTO, 1) as IdAndQuantDTO[];
        }
        set arr(value: IdAndQuantDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof IdAndQuantDTO.prototype.toObject>[];
        }): IdsAndQuantsDTO {
            const message = new IdsAndQuantsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => IdAndQuantDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof IdAndQuantDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: IdAndQuantDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: IdAndQuantDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdsAndQuantsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdsAndQuantsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, IdAndQuantDTO.deserialize(reader), IdAndQuantDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdsAndQuantsDTO {
            return IdsAndQuantsDTO.deserialize(bytes);
        }
    }
    export class CharacterGenInstructionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blueprintId?: string;
            backgroundBlueprintId?: string;
            targetEntity?: string;
            firstName?: string;
            lastName?: string;
            gender?: GenderEnumDTO;
            birthEra?: string;
            birthYear?: number;
            birthMonth?: string;
            birthDay?: number;
            backgroundCustomization?: BackgroundCustomizationDTO;
            birthSign?: string;
            id?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("backgroundBlueprintId" in data && data.backgroundBlueprintId != undefined) {
                    this.backgroundBlueprintId = data.backgroundBlueprintId;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("birthEra" in data && data.birthEra != undefined) {
                    this.birthEra = data.birthEra;
                }
                if ("birthYear" in data && data.birthYear != undefined) {
                    this.birthYear = data.birthYear;
                }
                if ("birthMonth" in data && data.birthMonth != undefined) {
                    this.birthMonth = data.birthMonth;
                }
                if ("birthDay" in data && data.birthDay != undefined) {
                    this.birthDay = data.birthDay;
                }
                if ("backgroundCustomization" in data && data.backgroundCustomization != undefined) {
                    this.backgroundCustomization = data.backgroundCustomization;
                }
                if ("birthSign" in data && data.birthSign != undefined) {
                    this.birthSign = data.birthSign;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
            }
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get backgroundBlueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set backgroundBlueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 6, GenderEnumDTO.GENDER_MALE) as GenderEnumDTO;
        }
        set gender(value: GenderEnumDTO) {
            pb_1.Message.setField(this, 6, value);
        }
        get birthEra() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set birthEra(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get birthYear() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set birthYear(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get birthMonth() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set birthMonth(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get birthDay() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set birthDay(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get backgroundCustomization() {
            return pb_1.Message.getWrapperField(this, BackgroundCustomizationDTO, 11) as BackgroundCustomizationDTO;
        }
        set backgroundCustomization(value: BackgroundCustomizationDTO) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_backgroundCustomization() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get birthSign() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set birthSign(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 14) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            blueprintId?: string;
            backgroundBlueprintId?: string;
            targetEntity?: string;
            firstName?: string;
            lastName?: string;
            gender?: GenderEnumDTO;
            birthEra?: string;
            birthYear?: number;
            birthMonth?: string;
            birthDay?: number;
            backgroundCustomization?: ReturnType<typeof BackgroundCustomizationDTO.prototype.toObject>;
            birthSign?: string;
            id?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
        }): CharacterGenInstructionDTO {
            const message = new CharacterGenInstructionDTO({});
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.backgroundBlueprintId != null) {
                message.backgroundBlueprintId = data.backgroundBlueprintId;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.birthEra != null) {
                message.birthEra = data.birthEra;
            }
            if (data.birthYear != null) {
                message.birthYear = data.birthYear;
            }
            if (data.birthMonth != null) {
                message.birthMonth = data.birthMonth;
            }
            if (data.birthDay != null) {
                message.birthDay = data.birthDay;
            }
            if (data.backgroundCustomization != null) {
                message.backgroundCustomization = BackgroundCustomizationDTO.fromObject(data.backgroundCustomization);
            }
            if (data.birthSign != null) {
                message.birthSign = data.birthSign;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            return message;
        }
        toObject() {
            const data: {
                blueprintId?: string;
                backgroundBlueprintId?: string;
                targetEntity?: string;
                firstName?: string;
                lastName?: string;
                gender?: GenderEnumDTO;
                birthEra?: string;
                birthYear?: number;
                birthMonth?: string;
                birthDay?: number;
                backgroundCustomization?: ReturnType<typeof BackgroundCustomizationDTO.prototype.toObject>;
                birthSign?: string;
                id?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
            } = {};
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.backgroundBlueprintId != null) {
                data.backgroundBlueprintId = this.backgroundBlueprintId;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.birthEra != null) {
                data.birthEra = this.birthEra;
            }
            if (this.birthYear != null) {
                data.birthYear = this.birthYear;
            }
            if (this.birthMonth != null) {
                data.birthMonth = this.birthMonth;
            }
            if (this.birthDay != null) {
                data.birthDay = this.birthDay;
            }
            if (this.backgroundCustomization != null) {
                data.backgroundCustomization = this.backgroundCustomization.toObject();
            }
            if (this.birthSign != null) {
                data.birthSign = this.birthSign;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blueprintId.length)
                writer.writeString(1, this.blueprintId);
            if (this.backgroundBlueprintId.length)
                writer.writeString(2, this.backgroundBlueprintId);
            if (this.targetEntity.length)
                writer.writeString(3, this.targetEntity);
            if (this.firstName.length)
                writer.writeString(4, this.firstName);
            if (this.lastName.length)
                writer.writeString(5, this.lastName);
            if (this.gender != GenderEnumDTO.GENDER_MALE)
                writer.writeEnum(6, this.gender);
            if (this.birthEra.length)
                writer.writeString(7, this.birthEra);
            if (this.birthYear != 0)
                writer.writeInt32(8, this.birthYear);
            if (this.birthMonth.length)
                writer.writeString(9, this.birthMonth);
            if (this.birthDay != 0)
                writer.writeInt32(10, this.birthDay);
            if (this.has_backgroundCustomization)
                writer.writeMessage(11, this.backgroundCustomization, () => this.backgroundCustomization.serialize(writer));
            if (this.birthSign.length)
                writer.writeString(12, this.birthSign);
            if (this.id.length)
                writer.writeString(13, this.id);
            if (this.has_metadata)
                writer.writeMessage(14, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(15, this.user);
            if (this.campaign.length)
                writer.writeString(16, this.campaign);
            if (this.world.length)
                writer.writeString(17, this.world);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterGenInstructionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterGenInstructionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blueprintId = reader.readString();
                        break;
                    case 2:
                        message.backgroundBlueprintId = reader.readString();
                        break;
                    case 3:
                        message.targetEntity = reader.readString();
                        break;
                    case 4:
                        message.firstName = reader.readString();
                        break;
                    case 5:
                        message.lastName = reader.readString();
                        break;
                    case 6:
                        message.gender = reader.readEnum();
                        break;
                    case 7:
                        message.birthEra = reader.readString();
                        break;
                    case 8:
                        message.birthYear = reader.readInt32();
                        break;
                    case 9:
                        message.birthMonth = reader.readString();
                        break;
                    case 10:
                        message.birthDay = reader.readInt32();
                        break;
                    case 11:
                        reader.readMessage(message.backgroundCustomization, () => message.backgroundCustomization = BackgroundCustomizationDTO.deserialize(reader));
                        break;
                    case 12:
                        message.birthSign = reader.readString();
                        break;
                    case 13:
                        message.id = reader.readString();
                        break;
                    case 14:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 15:
                        message.user = reader.readString();
                        break;
                    case 16:
                        message.campaign = reader.readString();
                        break;
                    case 17:
                        message.world = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterGenInstructionDTO {
            return CharacterGenInstructionDTO.deserialize(bytes);
        }
    }
    export class CharacterGenInstructions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: CharacterGenInstructionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, CharacterGenInstructionDTO, 1) as CharacterGenInstructionDTO[];
        }
        set arr(value: CharacterGenInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof CharacterGenInstructionDTO.prototype.toObject>[];
        }): CharacterGenInstructions {
            const message = new CharacterGenInstructions({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => CharacterGenInstructionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof CharacterGenInstructionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: CharacterGenInstructionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: CharacterGenInstructionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterGenInstructions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterGenInstructions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CharacterGenInstructionDTO.deserialize(reader), CharacterGenInstructionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterGenInstructions {
            return CharacterGenInstructions.deserialize(bytes);
        }
    }
    export class CharacterGroupGenInstructionDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            set?: CombinatorDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("set" in data && data.set != undefined) {
                    this.set = data.set;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get set() {
            return pb_1.Message.getWrapperField(this, CombinatorDTO, 8) as CombinatorDTO;
        }
        set set(value: CombinatorDTO) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_set() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            set?: ReturnType<typeof CombinatorDTO.prototype.toObject>;
            targetEntity?: string;
        }): CharacterGroupGenInstructionDTO {
            const message = new CharacterGroupGenInstructionDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.set != null) {
                message.set = CombinatorDTO.fromObject(data.set);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                set?: ReturnType<typeof CombinatorDTO.prototype.toObject>;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.set != null) {
                data.set = this.set.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.has_set)
                writer.writeMessage(8, this.set, () => this.set.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(9, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterGroupGenInstructionDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterGroupGenInstructionDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.set, () => message.set = CombinatorDTO.deserialize(reader));
                        break;
                    case 9:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterGroupGenInstructionDTO {
            return CharacterGroupGenInstructionDTO.deserialize(bytes);
        }
    }
    export class CharacterGroupGenInstructionsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: CharacterGroupGenInstructionDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, CharacterGroupGenInstructionDTO, 1) as CharacterGroupGenInstructionDTO[];
        }
        set arr(value: CharacterGroupGenInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof CharacterGroupGenInstructionDTO.prototype.toObject>[];
        }): CharacterGroupGenInstructionsDTO {
            const message = new CharacterGroupGenInstructionsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => CharacterGroupGenInstructionDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof CharacterGroupGenInstructionDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: CharacterGroupGenInstructionDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: CharacterGroupGenInstructionDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CharacterGroupGenInstructionsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CharacterGroupGenInstructionsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CharacterGroupGenInstructionDTO.deserialize(reader), CharacterGroupGenInstructionDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CharacterGroupGenInstructionsDTO {
            return CharacterGroupGenInstructionsDTO.deserialize(bytes);
        }
    }
    export class BackgroundCustomizationDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            race?: GenerationInstructionsDTO;
            faction?: GenerationInstructionsDTO;
            disease?: GenerationInstructionsDTO;
            addiction?: GenerationInstructionsDTO;
            profession?: GenerationInstructionsDTO;
            religion?: GenerationInstructionsDTO;
            itemSets?: GenerationInstructionsDTO;
            items?: GenerationInstructionsDTO;
            pastExpChild?: GenerationInstructionsDTO;
            pastExpAdult?: GenerationInstructionsDTO;
            skillSets?: GenerationInstructionsDTO;
            skillAdjustments?: SkillAdjustmentsDTO;
            personality?: GenerationInstructionsDTO;
            gender?: GenerationInstructionDTO;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("race" in data && data.race != undefined) {
                    this.race = data.race;
                }
                if ("faction" in data && data.faction != undefined) {
                    this.faction = data.faction;
                }
                if ("disease" in data && data.disease != undefined) {
                    this.disease = data.disease;
                }
                if ("addiction" in data && data.addiction != undefined) {
                    this.addiction = data.addiction;
                }
                if ("profession" in data && data.profession != undefined) {
                    this.profession = data.profession;
                }
                if ("religion" in data && data.religion != undefined) {
                    this.religion = data.religion;
                }
                if ("itemSets" in data && data.itemSets != undefined) {
                    this.itemSets = data.itemSets;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("pastExpChild" in data && data.pastExpChild != undefined) {
                    this.pastExpChild = data.pastExpChild;
                }
                if ("pastExpAdult" in data && data.pastExpAdult != undefined) {
                    this.pastExpAdult = data.pastExpAdult;
                }
                if ("skillSets" in data && data.skillSets != undefined) {
                    this.skillSets = data.skillSets;
                }
                if ("skillAdjustments" in data && data.skillAdjustments != undefined) {
                    this.skillAdjustments = data.skillAdjustments;
                }
                if ("personality" in data && data.personality != undefined) {
                    this.personality = data.personality;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get race() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 1) as GenerationInstructionsDTO;
        }
        set race(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_race() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get faction() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 2) as GenerationInstructionsDTO;
        }
        set faction(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_faction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get disease() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 3) as GenerationInstructionsDTO;
        }
        set disease(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_disease() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get addiction() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 4) as GenerationInstructionsDTO;
        }
        set addiction(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_addiction() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get profession() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 5) as GenerationInstructionsDTO;
        }
        set profession(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_profession() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get religion() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 6) as GenerationInstructionsDTO;
        }
        set religion(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_religion() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get itemSets() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 7) as GenerationInstructionsDTO;
        }
        set itemSets(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_itemSets() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get items() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 8) as GenerationInstructionsDTO;
        }
        set items(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get pastExpChild() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 9) as GenerationInstructionsDTO;
        }
        set pastExpChild(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_pastExpChild() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get pastExpAdult() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 10) as GenerationInstructionsDTO;
        }
        set pastExpAdult(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_pastExpAdult() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get skillSets() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 11) as GenerationInstructionsDTO;
        }
        set skillSets(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_skillSets() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get skillAdjustments() {
            return pb_1.Message.getWrapperField(this, SkillAdjustmentsDTO, 12) as SkillAdjustmentsDTO;
        }
        set skillAdjustments(value: SkillAdjustmentsDTO) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_skillAdjustments() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get personality() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionsDTO, 13) as GenerationInstructionsDTO;
        }
        set personality(value: GenerationInstructionsDTO) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_personality() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get gender() {
            return pb_1.Message.getWrapperField(this, GenerationInstructionDTO, 14) as GenerationInstructionDTO;
        }
        set gender(value: GenerationInstructionDTO) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_gender() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            race?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            faction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            disease?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            addiction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            profession?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            religion?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            itemSets?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            items?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            pastExpChild?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            pastExpAdult?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            skillSets?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            skillAdjustments?: ReturnType<typeof SkillAdjustmentsDTO.prototype.toObject>;
            personality?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
            gender?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>;
            clazz?: string;
        }): BackgroundCustomizationDTO {
            const message = new BackgroundCustomizationDTO({});
            if (data.race != null) {
                message.race = GenerationInstructionsDTO.fromObject(data.race);
            }
            if (data.faction != null) {
                message.faction = GenerationInstructionsDTO.fromObject(data.faction);
            }
            if (data.disease != null) {
                message.disease = GenerationInstructionsDTO.fromObject(data.disease);
            }
            if (data.addiction != null) {
                message.addiction = GenerationInstructionsDTO.fromObject(data.addiction);
            }
            if (data.profession != null) {
                message.profession = GenerationInstructionsDTO.fromObject(data.profession);
            }
            if (data.religion != null) {
                message.religion = GenerationInstructionsDTO.fromObject(data.religion);
            }
            if (data.itemSets != null) {
                message.itemSets = GenerationInstructionsDTO.fromObject(data.itemSets);
            }
            if (data.items != null) {
                message.items = GenerationInstructionsDTO.fromObject(data.items);
            }
            if (data.pastExpChild != null) {
                message.pastExpChild = GenerationInstructionsDTO.fromObject(data.pastExpChild);
            }
            if (data.pastExpAdult != null) {
                message.pastExpAdult = GenerationInstructionsDTO.fromObject(data.pastExpAdult);
            }
            if (data.skillSets != null) {
                message.skillSets = GenerationInstructionsDTO.fromObject(data.skillSets);
            }
            if (data.skillAdjustments != null) {
                message.skillAdjustments = SkillAdjustmentsDTO.fromObject(data.skillAdjustments);
            }
            if (data.personality != null) {
                message.personality = GenerationInstructionsDTO.fromObject(data.personality);
            }
            if (data.gender != null) {
                message.gender = GenerationInstructionDTO.fromObject(data.gender);
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                race?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                faction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                disease?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                addiction?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                profession?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                religion?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                itemSets?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                items?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                pastExpChild?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                pastExpAdult?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                skillSets?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                skillAdjustments?: ReturnType<typeof SkillAdjustmentsDTO.prototype.toObject>;
                personality?: ReturnType<typeof GenerationInstructionsDTO.prototype.toObject>;
                gender?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>;
                clazz?: string;
            } = {};
            if (this.race != null) {
                data.race = this.race.toObject();
            }
            if (this.faction != null) {
                data.faction = this.faction.toObject();
            }
            if (this.disease != null) {
                data.disease = this.disease.toObject();
            }
            if (this.addiction != null) {
                data.addiction = this.addiction.toObject();
            }
            if (this.profession != null) {
                data.profession = this.profession.toObject();
            }
            if (this.religion != null) {
                data.religion = this.religion.toObject();
            }
            if (this.itemSets != null) {
                data.itemSets = this.itemSets.toObject();
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            if (this.pastExpChild != null) {
                data.pastExpChild = this.pastExpChild.toObject();
            }
            if (this.pastExpAdult != null) {
                data.pastExpAdult = this.pastExpAdult.toObject();
            }
            if (this.skillSets != null) {
                data.skillSets = this.skillSets.toObject();
            }
            if (this.skillAdjustments != null) {
                data.skillAdjustments = this.skillAdjustments.toObject();
            }
            if (this.personality != null) {
                data.personality = this.personality.toObject();
            }
            if (this.gender != null) {
                data.gender = this.gender.toObject();
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_race)
                writer.writeMessage(1, this.race, () => this.race.serialize(writer));
            if (this.has_faction)
                writer.writeMessage(2, this.faction, () => this.faction.serialize(writer));
            if (this.has_disease)
                writer.writeMessage(3, this.disease, () => this.disease.serialize(writer));
            if (this.has_addiction)
                writer.writeMessage(4, this.addiction, () => this.addiction.serialize(writer));
            if (this.has_profession)
                writer.writeMessage(5, this.profession, () => this.profession.serialize(writer));
            if (this.has_religion)
                writer.writeMessage(6, this.religion, () => this.religion.serialize(writer));
            if (this.has_itemSets)
                writer.writeMessage(7, this.itemSets, () => this.itemSets.serialize(writer));
            if (this.has_items)
                writer.writeMessage(8, this.items, () => this.items.serialize(writer));
            if (this.has_pastExpChild)
                writer.writeMessage(9, this.pastExpChild, () => this.pastExpChild.serialize(writer));
            if (this.has_pastExpAdult)
                writer.writeMessage(10, this.pastExpAdult, () => this.pastExpAdult.serialize(writer));
            if (this.has_skillSets)
                writer.writeMessage(11, this.skillSets, () => this.skillSets.serialize(writer));
            if (this.has_skillAdjustments)
                writer.writeMessage(12, this.skillAdjustments, () => this.skillAdjustments.serialize(writer));
            if (this.has_personality)
                writer.writeMessage(13, this.personality, () => this.personality.serialize(writer));
            if (this.has_gender)
                writer.writeMessage(14, this.gender, () => this.gender.serialize(writer));
            if (this.clazz.length)
                writer.writeString(15, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackgroundCustomizationDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackgroundCustomizationDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.race, () => message.race = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.faction, () => message.faction = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.disease, () => message.disease = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.addiction, () => message.addiction = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.profession, () => message.profession = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.religion, () => message.religion = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.itemSets, () => message.itemSets = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.items, () => message.items = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.pastExpChild, () => message.pastExpChild = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.pastExpAdult, () => message.pastExpAdult = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.skillSets, () => message.skillSets = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.skillAdjustments, () => message.skillAdjustments = SkillAdjustmentsDTO.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.personality, () => message.personality = GenerationInstructionsDTO.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.gender, () => message.gender = GenerationInstructionDTO.deserialize(reader));
                        break;
                    case 15:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BackgroundCustomizationDTO {
            return BackgroundCustomizationDTO.deserialize(bytes);
        }
    }
    export class SkillAdjustmentsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            skillAdjustments?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("skillAdjustments" in data && data.skillAdjustments != undefined) {
                    this.skillAdjustments = data.skillAdjustments;
                }
            }
            if (!this.skillAdjustments)
                this.skillAdjustments = new Map();
        }
        get skillAdjustments() {
            return pb_1.Message.getField(this, 1) as any as Map<string, number>;
        }
        set skillAdjustments(value: Map<string, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            skillAdjustments?: {
                [key: string]: number;
            };
        }): SkillAdjustmentsDTO {
            const message = new SkillAdjustmentsDTO({});
            if (typeof data.skillAdjustments == "object") {
                message.skillAdjustments = new Map(Object.entries(data.skillAdjustments));
            }
            return message;
        }
        toObject() {
            const data: {
                skillAdjustments?: {
                    [key: string]: number;
                };
            } = {};
            if (this.skillAdjustments != null) {
                data.skillAdjustments = (Object.fromEntries)(this.skillAdjustments);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.skillAdjustments) {
                writer.writeMessage(1, this.skillAdjustments, () => {
                    writer.writeString(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SkillAdjustmentsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SkillAdjustmentsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skillAdjustments as any, reader, reader.readString, reader.readInt32));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SkillAdjustmentsDTO {
            return SkillAdjustmentsDTO.deserialize(bytes);
        }
    }
    export class SimpleProbDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cond?: ConditionEnumDTO;
            prob?: Map<string, number>;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cond" in data && data.cond != undefined) {
                    this.cond = data.cond;
                }
                if ("prob" in data && data.prob != undefined) {
                    this.prob = data.prob;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
            if (!this.prob)
                this.prob = new Map();
        }
        get cond() {
            return pb_1.Message.getFieldWithDefault(this, 1, ConditionEnumDTO.CONDITION_OR) as ConditionEnumDTO;
        }
        set cond(value: ConditionEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get prob() {
            return pb_1.Message.getField(this, 2) as any as Map<string, number>;
        }
        set prob(value: Map<string, number>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            cond?: ConditionEnumDTO;
            prob?: {
                [key: string]: number;
            };
            clazz?: string;
        }): SimpleProbDTO {
            const message = new SimpleProbDTO({});
            if (data.cond != null) {
                message.cond = data.cond;
            }
            if (typeof data.prob == "object") {
                message.prob = new Map(Object.entries(data.prob));
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                cond?: ConditionEnumDTO;
                prob?: {
                    [key: string]: number;
                };
                clazz?: string;
            } = {};
            if (this.cond != null) {
                data.cond = this.cond;
            }
            if (this.prob != null) {
                data.prob = (Object.fromEntries)(this.prob);
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cond != ConditionEnumDTO.CONDITION_OR)
                writer.writeEnum(1, this.cond);
            for (const [key, value] of this.prob) {
                writer.writeMessage(2, this.prob, () => {
                    writer.writeString(1, key);
                    writer.writeFloat(2, value);
                });
            }
            if (this.clazz.length)
                writer.writeString(3, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimpleProbDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimpleProbDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cond = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.prob as any, reader, reader.readString, reader.readFloat));
                        break;
                    case 3:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimpleProbDTO {
            return SimpleProbDTO.deserialize(bytes);
        }
    }
    export class GaussianProbDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blueprintId?: string;
            prob?: number;
            avgQuan?: number;
            stDev?: number;
            skew?: number;
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("prob" in data && data.prob != undefined) {
                    this.prob = data.prob;
                }
                if ("avgQuan" in data && data.avgQuan != undefined) {
                    this.avgQuan = data.avgQuan;
                }
                if ("stDev" in data && data.stDev != undefined) {
                    this.stDev = data.stDev;
                }
                if ("skew" in data && data.skew != undefined) {
                    this.skew = data.skew;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get prob() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set prob(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get avgQuan() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set avgQuan(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get stDev() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set stDev(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get skew() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set skew(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            blueprintId?: string;
            prob?: number;
            avgQuan?: number;
            stDev?: number;
            skew?: number;
            clazz?: string;
        }): GaussianProbDTO {
            const message = new GaussianProbDTO({});
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.prob != null) {
                message.prob = data.prob;
            }
            if (data.avgQuan != null) {
                message.avgQuan = data.avgQuan;
            }
            if (data.stDev != null) {
                message.stDev = data.stDev;
            }
            if (data.skew != null) {
                message.skew = data.skew;
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                blueprintId?: string;
                prob?: number;
                avgQuan?: number;
                stDev?: number;
                skew?: number;
                clazz?: string;
            } = {};
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.prob != null) {
                data.prob = this.prob;
            }
            if (this.avgQuan != null) {
                data.avgQuan = this.avgQuan;
            }
            if (this.stDev != null) {
                data.stDev = this.stDev;
            }
            if (this.skew != null) {
                data.skew = this.skew;
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blueprintId.length)
                writer.writeString(1, this.blueprintId);
            if (this.prob != 0)
                writer.writeFloat(2, this.prob);
            if (this.avgQuan != 0)
                writer.writeInt32(3, this.avgQuan);
            if (this.stDev != 0)
                writer.writeFloat(4, this.stDev);
            if (this.skew != 0)
                writer.writeFloat(5, this.skew);
            if (this.clazz.length)
                writer.writeString(6, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GaussianProbDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GaussianProbDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blueprintId = reader.readString();
                        break;
                    case 2:
                        message.prob = reader.readFloat();
                        break;
                    case 3:
                        message.avgQuan = reader.readInt32();
                        break;
                    case 4:
                        message.stDev = reader.readFloat();
                        break;
                    case 5:
                        message.skew = reader.readFloat();
                        break;
                    case 6:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GaussianProbDTO {
            return GaussianProbDTO.deserialize(bytes);
        }
    }
    export class CombinatorDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            cond?: ConditionEnumDTO;
            prob?: number;
            instructions?: GenerationInstructionDTO[];
            clazz?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("cond" in data && data.cond != undefined) {
                    this.cond = data.cond;
                }
                if ("prob" in data && data.prob != undefined) {
                    this.prob = data.prob;
                }
                if ("instructions" in data && data.instructions != undefined) {
                    this.instructions = data.instructions;
                }
                if ("clazz" in data && data.clazz != undefined) {
                    this.clazz = data.clazz;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get cond() {
            return pb_1.Message.getFieldWithDefault(this, 2, ConditionEnumDTO.CONDITION_OR) as ConditionEnumDTO;
        }
        set cond(value: ConditionEnumDTO) {
            pb_1.Message.setField(this, 2, value);
        }
        get prob() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set prob(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get instructions() {
            return pb_1.Message.getRepeatedWrapperField(this, GenerationInstructionDTO, 4) as GenerationInstructionDTO[];
        }
        set instructions(value: GenerationInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get clazz() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set clazz(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            cond?: ConditionEnumDTO;
            prob?: number;
            instructions?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>[];
            clazz?: string;
        }): CombinatorDTO {
            const message = new CombinatorDTO({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.cond != null) {
                message.cond = data.cond;
            }
            if (data.prob != null) {
                message.prob = data.prob;
            }
            if (data.instructions != null) {
                message.instructions = data.instructions.map(item => GenerationInstructionDTO.fromObject(item));
            }
            if (data.clazz != null) {
                message.clazz = data.clazz;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                cond?: ConditionEnumDTO;
                prob?: number;
                instructions?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>[];
                clazz?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.cond != null) {
                data.cond = this.cond;
            }
            if (this.prob != null) {
                data.prob = this.prob;
            }
            if (this.instructions != null) {
                data.instructions = this.instructions.map((item: GenerationInstructionDTO) => item.toObject());
            }
            if (this.clazz != null) {
                data.clazz = this.clazz;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.cond != ConditionEnumDTO.CONDITION_OR)
                writer.writeEnum(2, this.cond);
            if (this.prob != 0)
                writer.writeFloat(3, this.prob);
            if (this.instructions.length)
                writer.writeRepeatedMessage(4, this.instructions, (item: GenerationInstructionDTO) => item.serialize(writer));
            if (this.clazz.length)
                writer.writeString(5, this.clazz);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CombinatorDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CombinatorDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.cond = reader.readEnum();
                        break;
                    case 3:
                        message.prob = reader.readFloat();
                        break;
                    case 4:
                        reader.readMessage(message.instructions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, GenerationInstructionDTO.deserialize(reader), GenerationInstructionDTO));
                        break;
                    case 5:
                        message.clazz = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CombinatorDTO {
            return CombinatorDTO.deserialize(bytes);
        }
    }
    export class PastExperienceDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            type?: PastExperienceTypeEnumDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 9, PastExperienceTypeEnumDTO.PAST_EXPERIENCE_CHILD) as PastExperienceTypeEnumDTO;
        }
        set type(value: PastExperienceTypeEnumDTO) {
            pb_1.Message.setField(this, 9, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            type?: PastExperienceTypeEnumDTO;
            targetEntity?: string;
        }): PastExperienceDTO {
            const message = new PastExperienceDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                type?: PastExperienceTypeEnumDTO;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.type != PastExperienceTypeEnumDTO.PAST_EXPERIENCE_CHILD)
                writer.writeEnum(9, this.type);
            if (this.targetEntity.length)
                writer.writeString(10, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PastExperienceDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PastExperienceDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.type = reader.readEnum();
                        break;
                    case 10:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PastExperienceDTO {
            return PastExperienceDTO.deserialize(bytes);
        }
    }
    export class PastExperiencesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: PastExperienceDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, PastExperienceDTO, 1) as PastExperienceDTO[];
        }
        set arr(value: PastExperienceDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof PastExperienceDTO.prototype.toObject>[];
        }): PastExperiencesDTO {
            const message = new PastExperiencesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => PastExperienceDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof PastExperienceDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: PastExperienceDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: PastExperienceDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PastExperiencesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PastExperiencesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PastExperienceDTO.deserialize(reader), PastExperienceDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PastExperiencesDTO {
            return PastExperiencesDTO.deserialize(bytes);
        }
    }
    export class MemoryDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            facts?: FactsDTO;
            type?: MemoryTypeEnumDTO;
            description?: string;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("facts" in data && data.facts != undefined) {
                    this.facts = data.facts;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get facts() {
            return pb_1.Message.getWrapperField(this, FactsDTO, 9) as FactsDTO;
        }
        set facts(value: FactsDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_facts() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 10, MemoryTypeEnumDTO.MEMORY_TYPE_GLOBAL) as MemoryTypeEnumDTO;
        }
        set type(value: MemoryTypeEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            facts?: ReturnType<typeof FactsDTO.prototype.toObject>;
            type?: MemoryTypeEnumDTO;
            description?: string;
            targetEntity?: string;
        }): MemoryDTO {
            const message = new MemoryDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.facts != null) {
                message.facts = FactsDTO.fromObject(data.facts);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                facts?: ReturnType<typeof FactsDTO.prototype.toObject>;
                type?: MemoryTypeEnumDTO;
                description?: string;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.facts != null) {
                data.facts = this.facts.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.has_facts)
                writer.writeMessage(9, this.facts, () => this.facts.serialize(writer));
            if (this.type != MemoryTypeEnumDTO.MEMORY_TYPE_GLOBAL)
                writer.writeEnum(10, this.type);
            if (this.description.length)
                writer.writeString(11, this.description);
            if (this.targetEntity.length)
                writer.writeString(12, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.facts, () => message.facts = FactsDTO.deserialize(reader));
                        break;
                    case 10:
                        message.type = reader.readEnum();
                        break;
                    case 11:
                        message.description = reader.readString();
                        break;
                    case 12:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryDTO {
            return MemoryDTO.deserialize(bytes);
        }
    }
    export class MemoriesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: MemoryDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, MemoryDTO, 1) as MemoryDTO[];
        }
        set arr(value: MemoryDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof MemoryDTO.prototype.toObject>[];
        }): MemoriesDTO {
            const message = new MemoriesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => MemoryDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof MemoryDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: MemoryDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: MemoryDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoriesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoriesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MemoryDTO.deserialize(reader), MemoryDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoriesDTO {
            return MemoriesDTO.deserialize(bytes);
        }
    }
    export class SkillSetDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            skillImprovement?: SkillImprovementDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("skillImprovement" in data && data.skillImprovement != undefined) {
                    this.skillImprovement = data.skillImprovement;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get skillImprovement() {
            return pb_1.Message.getWrapperField(this, SkillImprovementDTO, 9) as SkillImprovementDTO;
        }
        set skillImprovement(value: SkillImprovementDTO) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_skillImprovement() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            tags?: string[];
            skillImprovement?: ReturnType<typeof SkillImprovementDTO.prototype.toObject>;
            targetEntity?: string;
        }): SkillSetDTO {
            const message = new SkillSetDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.skillImprovement != null) {
                message.skillImprovement = SkillImprovementDTO.fromObject(data.skillImprovement);
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                tags?: string[];
                skillImprovement?: ReturnType<typeof SkillImprovementDTO.prototype.toObject>;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.skillImprovement != null) {
                data.skillImprovement = this.skillImprovement.toObject();
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            if (this.has_skillImprovement)
                writer.writeMessage(9, this.skillImprovement, () => this.skillImprovement.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(10, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SkillSetDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SkillSetDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.skillImprovement, () => message.skillImprovement = SkillImprovementDTO.deserialize(reader));
                        break;
                    case 10:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SkillSetDTO {
            return SkillSetDTO.deserialize(bytes);
        }
    }
    export class SkillSetsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: SkillSetDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, SkillSetDTO, 1) as SkillSetDTO[];
        }
        set arr(value: SkillSetDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof SkillSetDTO.prototype.toObject>[];
        }): SkillSetsDTO {
            const message = new SkillSetsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => SkillSetDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof SkillSetDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: SkillSetDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: SkillSetDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SkillSetsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SkillSetsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SkillSetDTO.deserialize(reader), SkillSetDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SkillSetsDTO {
            return SkillSetsDTO.deserialize(bytes);
        }
    }
    export class SkillImprovementDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            skillImprovement?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("skillImprovement" in data && data.skillImprovement != undefined) {
                    this.skillImprovement = data.skillImprovement;
                }
            }
            if (!this.skillImprovement)
                this.skillImprovement = new Map();
        }
        get skillImprovement() {
            return pb_1.Message.getField(this, 1) as any as Map<string, number>;
        }
        set skillImprovement(value: Map<string, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            skillImprovement?: {
                [key: string]: number;
            };
        }): SkillImprovementDTO {
            const message = new SkillImprovementDTO({});
            if (typeof data.skillImprovement == "object") {
                message.skillImprovement = new Map(Object.entries(data.skillImprovement));
            }
            return message;
        }
        toObject() {
            const data: {
                skillImprovement?: {
                    [key: string]: number;
                };
            } = {};
            if (this.skillImprovement != null) {
                data.skillImprovement = (Object.fromEntries)(this.skillImprovement);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.skillImprovement) {
                writer.writeMessage(1, this.skillImprovement, () => {
                    writer.writeString(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SkillImprovementDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SkillImprovementDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skillImprovement as any, reader, reader.readString, reader.readInt32));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SkillImprovementDTO {
            return SkillImprovementDTO.deserialize(bytes);
        }
    }
    export class PersonalityProfileDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            enneagramType?: string;
            traits?: GenerationInstructionDTO[];
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("enneagramType" in data && data.enneagramType != undefined) {
                    this.enneagramType = data.enneagramType;
                }
                if ("traits" in data && data.traits != undefined) {
                    this.traits = data.traits;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get enneagramType() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set enneagramType(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get traits() {
            return pb_1.Message.getRepeatedWrapperField(this, GenerationInstructionDTO, 9) as GenerationInstructionDTO[];
        }
        set traits(value: GenerationInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            enneagramType?: string;
            traits?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>[];
            targetEntity?: string;
        }): PersonalityProfileDTO {
            const message = new PersonalityProfileDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.enneagramType != null) {
                message.enneagramType = data.enneagramType;
            }
            if (data.traits != null) {
                message.traits = data.traits.map(item => GenerationInstructionDTO.fromObject(item));
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                enneagramType?: string;
                traits?: ReturnType<typeof GenerationInstructionDTO.prototype.toObject>[];
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.enneagramType != null) {
                data.enneagramType = this.enneagramType;
            }
            if (this.traits != null) {
                data.traits = this.traits.map((item: GenerationInstructionDTO) => item.toObject());
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.enneagramType.length)
                writer.writeString(8, this.enneagramType);
            if (this.traits.length)
                writer.writeRepeatedMessage(9, this.traits, (item: GenerationInstructionDTO) => item.serialize(writer));
            if (this.targetEntity.length)
                writer.writeString(10, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PersonalityProfileDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PersonalityProfileDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.enneagramType = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.traits, () => pb_1.Message.addToRepeatedWrapperField(message, 9, GenerationInstructionDTO.deserialize(reader), GenerationInstructionDTO));
                        break;
                    case 10:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PersonalityProfileDTO {
            return PersonalityProfileDTO.deserialize(bytes);
        }
    }
    export class PersonalityProfilesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: PersonalityProfileDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, PersonalityProfileDTO, 1) as PersonalityProfileDTO[];
        }
        set arr(value: PersonalityProfileDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof PersonalityProfileDTO.prototype.toObject>[];
        }): PersonalityProfilesDTO {
            const message = new PersonalityProfilesDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => PersonalityProfileDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof PersonalityProfileDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: PersonalityProfileDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: PersonalityProfileDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PersonalityProfilesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PersonalityProfilesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PersonalityProfileDTO.deserialize(reader), PersonalityProfileDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PersonalityProfilesDTO {
            return PersonalityProfilesDTO.deserialize(bytes);
        }
    }
    export class NeedDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: Metadata;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            type?: NeedTypeEnumDTO;
            layer?: NeedLayerEnumDTO;
            targetEntity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("blueprintId" in data && data.blueprintId != undefined) {
                    this.blueprintId = data.blueprintId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("targetEntity" in data && data.targetEntity != undefined) {
                    this.targetEntity = data.targetEntity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get blueprintId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set blueprintId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 4) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 9, NeedTypeEnumDTO.NEED_TYPE_DYNAMIC) as NeedTypeEnumDTO;
        }
        set type(value: NeedTypeEnumDTO) {
            pb_1.Message.setField(this, 9, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 10, NeedLayerEnumDTO.NEED_LAYER_PHYSIOLOGICAL) as NeedLayerEnumDTO;
        }
        set layer(value: NeedLayerEnumDTO) {
            pb_1.Message.setField(this, 10, value);
        }
        get targetEntity() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set targetEntity(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            blueprintId?: string;
            name?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            user?: string;
            campaign?: string;
            world?: string;
            description?: string;
            type?: NeedTypeEnumDTO;
            layer?: NeedLayerEnumDTO;
            targetEntity?: string;
        }): NeedDTO {
            const message = new NeedDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.blueprintId != null) {
                message.blueprintId = data.blueprintId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.targetEntity != null) {
                message.targetEntity = data.targetEntity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                blueprintId?: string;
                name?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                user?: string;
                campaign?: string;
                world?: string;
                description?: string;
                type?: NeedTypeEnumDTO;
                layer?: NeedLayerEnumDTO;
                targetEntity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.blueprintId != null) {
                data.blueprintId = this.blueprintId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.targetEntity != null) {
                data.targetEntity = this.targetEntity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.blueprintId.length)
                writer.writeString(2, this.blueprintId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.has_metadata)
                writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.campaign.length)
                writer.writeString(6, this.campaign);
            if (this.world.length)
                writer.writeString(7, this.world);
            if (this.description.length)
                writer.writeString(8, this.description);
            if (this.type != NeedTypeEnumDTO.NEED_TYPE_DYNAMIC)
                writer.writeEnum(9, this.type);
            if (this.layer != NeedLayerEnumDTO.NEED_LAYER_PHYSIOLOGICAL)
                writer.writeEnum(10, this.layer);
            if (this.targetEntity.length)
                writer.writeString(11, this.targetEntity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NeedDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NeedDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.blueprintId = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        message.campaign = reader.readString();
                        break;
                    case 7:
                        message.world = reader.readString();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    case 9:
                        message.type = reader.readEnum();
                        break;
                    case 10:
                        message.layer = reader.readEnum();
                        break;
                    case 11:
                        message.targetEntity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NeedDTO {
            return NeedDTO.deserialize(bytes);
        }
    }
    export class NeedsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: NeedDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, NeedDTO, 1) as NeedDTO[];
        }
        set arr(value: NeedDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof NeedDTO.prototype.toObject>[];
        }): NeedsDTO {
            const message = new NeedsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => NeedDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof NeedDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: NeedDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: NeedDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NeedsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NeedsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, NeedDTO.deserialize(reader), NeedDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NeedsDTO {
            return NeedsDTO.deserialize(bytes);
        }
    }
    export class UserDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            backgrounds?: BackgroundsDTO;
            worlds?: WorldsDTO;
            campaigns?: CampaignsDTO;
            account?: AccountDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("backgrounds" in data && data.backgrounds != undefined) {
                    this.backgrounds = data.backgrounds;
                }
                if ("worlds" in data && data.worlds != undefined) {
                    this.worlds = data.worlds;
                }
                if ("campaigns" in data && data.campaigns != undefined) {
                    this.campaigns = data.campaigns;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get backgrounds() {
            return pb_1.Message.getWrapperField(this, BackgroundsDTO, 2) as BackgroundsDTO;
        }
        set backgrounds(value: BackgroundsDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_backgrounds() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get worlds() {
            return pb_1.Message.getWrapperField(this, WorldsDTO, 3) as WorldsDTO;
        }
        set worlds(value: WorldsDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_worlds() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get campaigns() {
            return pb_1.Message.getWrapperField(this, CampaignsDTO, 4) as CampaignsDTO;
        }
        set campaigns(value: CampaignsDTO) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_campaigns() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get account() {
            return pb_1.Message.getWrapperField(this, AccountDTO, 5) as AccountDTO;
        }
        set account(value: AccountDTO) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: string;
            backgrounds?: ReturnType<typeof BackgroundsDTO.prototype.toObject>;
            worlds?: ReturnType<typeof WorldsDTO.prototype.toObject>;
            campaigns?: ReturnType<typeof CampaignsDTO.prototype.toObject>;
            account?: ReturnType<typeof AccountDTO.prototype.toObject>;
        }): UserDTO {
            const message = new UserDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.backgrounds != null) {
                message.backgrounds = BackgroundsDTO.fromObject(data.backgrounds);
            }
            if (data.worlds != null) {
                message.worlds = WorldsDTO.fromObject(data.worlds);
            }
            if (data.campaigns != null) {
                message.campaigns = CampaignsDTO.fromObject(data.campaigns);
            }
            if (data.account != null) {
                message.account = AccountDTO.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                backgrounds?: ReturnType<typeof BackgroundsDTO.prototype.toObject>;
                worlds?: ReturnType<typeof WorldsDTO.prototype.toObject>;
                campaigns?: ReturnType<typeof CampaignsDTO.prototype.toObject>;
                account?: ReturnType<typeof AccountDTO.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.backgrounds != null) {
                data.backgrounds = this.backgrounds.toObject();
            }
            if (this.worlds != null) {
                data.worlds = this.worlds.toObject();
            }
            if (this.campaigns != null) {
                data.campaigns = this.campaigns.toObject();
            }
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_backgrounds)
                writer.writeMessage(2, this.backgrounds, () => this.backgrounds.serialize(writer));
            if (this.has_worlds)
                writer.writeMessage(3, this.worlds, () => this.worlds.serialize(writer));
            if (this.has_campaigns)
                writer.writeMessage(4, this.campaigns, () => this.campaigns.serialize(writer));
            if (this.has_account)
                writer.writeMessage(5, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.backgrounds, () => message.backgrounds = BackgroundsDTO.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.worlds, () => message.worlds = WorldsDTO.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.campaigns, () => message.campaigns = CampaignsDTO.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.account, () => message.account = AccountDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserDTO {
            return UserDTO.deserialize(bytes);
        }
    }
    export class UsersDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: UserDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, UserDTO, 1) as UserDTO[];
        }
        set arr(value: UserDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof UserDTO.prototype.toObject>[];
        }): UsersDTO {
            const message = new UsersDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => UserDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof UserDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: UserDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: UserDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsersDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsersDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserDTO.deserialize(reader), UserDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsersDTO {
            return UsersDTO.deserialize(bytes);
        }
    }
    export class AccountDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            username?: string;
            email?: string;
            role?: string;
            user?: string;
            preferences?: PreferencesDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("preferences" in data && data.preferences != undefined) {
                    this.preferences = data.preferences;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get preferences() {
            return pb_1.Message.getWrapperField(this, PreferencesDTO, 6) as PreferencesDTO;
        }
        set preferences(value: PreferencesDTO) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_preferences() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            id?: string;
            username?: string;
            email?: string;
            role?: string;
            user?: string;
            preferences?: ReturnType<typeof PreferencesDTO.prototype.toObject>;
        }): AccountDTO {
            const message = new AccountDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.preferences != null) {
                message.preferences = PreferencesDTO.fromObject(data.preferences);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                username?: string;
                email?: string;
                role?: string;
                user?: string;
                preferences?: ReturnType<typeof PreferencesDTO.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.preferences != null) {
                data.preferences = this.preferences.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.role.length)
                writer.writeString(4, this.role);
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.has_preferences)
                writer.writeMessage(6, this.preferences, () => this.preferences.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readString();
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.preferences, () => message.preferences = PreferencesDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountDTO {
            return AccountDTO.deserialize(bytes);
        }
    }
    export class PreferencesDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PreferencesDTO {
            const message = new PreferencesDTO({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreferencesDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreferencesDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreferencesDTO {
            return PreferencesDTO.deserialize(bytes);
        }
    }
    export class WorldSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            settings?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
            }
            if (!this.settings)
                this.settings = new Map();
        }
        get settings() {
            return pb_1.Message.getField(this, 1) as any as Map<string, string>;
        }
        set settings(value: Map<string, string>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            settings?: {
                [key: string]: string;
            };
        }): WorldSettings {
            const message = new WorldSettings({});
            if (typeof data.settings == "object") {
                message.settings = new Map(Object.entries(data.settings));
            }
            return message;
        }
        toObject() {
            const data: {
                settings?: {
                    [key: string]: string;
                };
            } = {};
            if (this.settings != null) {
                data.settings = (Object.fromEntries)(this.settings);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.settings) {
                writer.writeMessage(1, this.settings, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorldSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorldSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.settings as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorldSettings {
            return WorldSettings.deserialize(bytes);
        }
    }
    export class WorldDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            settings?: WorldSettings;
            frozen?: boolean;
            user?: string;
            campaigns?: CampaignsDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
                if ("frozen" in data && data.frozen != undefined) {
                    this.frozen = data.frozen;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("campaigns" in data && data.campaigns != undefined) {
                    this.campaigns = data.campaigns;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, WorldSettings, 4) as WorldSettings;
        }
        set settings(value: WorldSettings) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get frozen() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set frozen(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get campaigns() {
            return pb_1.Message.getWrapperField(this, CampaignsDTO, 7) as CampaignsDTO;
        }
        set campaigns(value: CampaignsDTO) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_campaigns() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            settings?: ReturnType<typeof WorldSettings.prototype.toObject>;
            frozen?: boolean;
            user?: string;
            campaigns?: ReturnType<typeof CampaignsDTO.prototype.toObject>;
        }): WorldDTO {
            const message = new WorldDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.settings != null) {
                message.settings = WorldSettings.fromObject(data.settings);
            }
            if (data.frozen != null) {
                message.frozen = data.frozen;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.campaigns != null) {
                message.campaigns = CampaignsDTO.fromObject(data.campaigns);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                settings?: ReturnType<typeof WorldSettings.prototype.toObject>;
                frozen?: boolean;
                user?: string;
                campaigns?: ReturnType<typeof CampaignsDTO.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            if (this.frozen != null) {
                data.frozen = this.frozen;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.campaigns != null) {
                data.campaigns = this.campaigns.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.has_settings)
                writer.writeMessage(4, this.settings, () => this.settings.serialize(writer));
            if (this.frozen != false)
                writer.writeBool(5, this.frozen);
            if (this.user.length)
                writer.writeString(6, this.user);
            if (this.has_campaigns)
                writer.writeMessage(7, this.campaigns, () => this.campaigns.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorldDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorldDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.settings, () => message.settings = WorldSettings.deserialize(reader));
                        break;
                    case 5:
                        message.frozen = reader.readBool();
                        break;
                    case 6:
                        message.user = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.campaigns, () => message.campaigns = CampaignsDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorldDTO {
            return WorldDTO.deserialize(bytes);
        }
    }
    export class WorldsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: WorldDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, WorldDTO, 1) as WorldDTO[];
        }
        set arr(value: WorldDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof WorldDTO.prototype.toObject>[];
        }): WorldsDTO {
            const message = new WorldsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => WorldDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof WorldDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: WorldDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: WorldDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorldsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorldsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorldDTO.deserialize(reader), WorldDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorldsDTO {
            return WorldsDTO.deserialize(bytes);
        }
    }
    export class CampaignDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            dynamicState?: Map<string, string>;
            createdAt?: string;
            world?: string;
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("dynamicState" in data && data.dynamicState != undefined) {
                    this.dynamicState = data.dynamicState;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("world" in data && data.world != undefined) {
                    this.world = data.world;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
            if (!this.dynamicState)
                this.dynamicState = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dynamicState() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set dynamicState(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get world() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set world(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            dynamicState?: {
                [key: string]: string;
            };
            createdAt?: string;
            world?: string;
            user?: string;
        }): CampaignDTO {
            const message = new CampaignDTO({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (typeof data.dynamicState == "object") {
                message.dynamicState = new Map(Object.entries(data.dynamicState));
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.world != null) {
                message.world = data.world;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                dynamicState?: {
                    [key: string]: string;
                };
                createdAt?: string;
                world?: string;
                user?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.dynamicState != null) {
                data.dynamicState = (Object.fromEntries)(this.dynamicState);
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.world != null) {
                data.world = this.world;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            for (const [key, value] of this.dynamicState) {
                writer.writeMessage(4, this.dynamicState, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.createdAt.length)
                writer.writeString(5, this.createdAt);
            if (this.world.length)
                writer.writeString(6, this.world);
            if (this.user.length)
                writer.writeString(7, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CampaignDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CampaignDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.dynamicState as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        message.createdAt = reader.readString();
                        break;
                    case 6:
                        message.world = reader.readString();
                        break;
                    case 7:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CampaignDTO {
            return CampaignDTO.deserialize(bytes);
        }
    }
    export class CampaignsDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: CampaignDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, CampaignDTO, 1) as CampaignDTO[];
        }
        set arr(value: CampaignDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof CampaignDTO.prototype.toObject>[];
        }): CampaignsDTO {
            const message = new CampaignsDTO({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => CampaignDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof CampaignDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: CampaignDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: CampaignDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CampaignsDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CampaignsDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CampaignDTO.deserialize(reader), CampaignDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CampaignsDTO {
            return CampaignsDTO.deserialize(bytes);
        }
    }
    export class SearchQueryDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: QueryFilterDTO[];
            sortBy?: SortByDTO;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("sortBy" in data && data.sortBy != undefined) {
                    this.sortBy = data.sortBy;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get filters() {
            return pb_1.Message.getRepeatedWrapperField(this, QueryFilterDTO, 1) as QueryFilterDTO[];
        }
        set filters(value: QueryFilterDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get sortBy() {
            return pb_1.Message.getWrapperField(this, SortByDTO, 2) as SortByDTO;
        }
        set sortBy(value: SortByDTO) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sortBy() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            filters?: ReturnType<typeof QueryFilterDTO.prototype.toObject>[];
            sortBy?: ReturnType<typeof SortByDTO.prototype.toObject>;
            page?: number;
            pageSize?: number;
        }): SearchQueryDTO {
            const message = new SearchQueryDTO({});
            if (data.filters != null) {
                message.filters = data.filters.map(item => QueryFilterDTO.fromObject(item));
            }
            if (data.sortBy != null) {
                message.sortBy = SortByDTO.fromObject(data.sortBy);
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof QueryFilterDTO.prototype.toObject>[];
                sortBy?: ReturnType<typeof SortByDTO.prototype.toObject>;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.map((item: QueryFilterDTO) => item.toObject());
            }
            if (this.sortBy != null) {
                data.sortBy = this.sortBy.toObject();
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.filters.length)
                writer.writeRepeatedMessage(1, this.filters, (item: QueryFilterDTO) => item.serialize(writer));
            if (this.has_sortBy)
                writer.writeMessage(2, this.sortBy, () => this.sortBy.serialize(writer));
            if (this.page != 0)
                writer.writeInt32(3, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(4, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchQueryDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchQueryDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QueryFilterDTO.deserialize(reader), QueryFilterDTO));
                        break;
                    case 2:
                        reader.readMessage(message.sortBy, () => message.sortBy = SortByDTO.deserialize(reader));
                        break;
                    case 3:
                        message.page = reader.readInt32();
                        break;
                    case 4:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchQueryDTO {
            return SearchQueryDTO.deserialize(bytes);
        }
    }
    export class QueryFilterDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            operator?: string;
            value?: QueryFilterValueDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set operator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, QueryFilterValueDTO, 3) as QueryFilterValueDTO;
        }
        set value(value: QueryFilterValueDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            field?: string;
            operator?: string;
            value?: ReturnType<typeof QueryFilterValueDTO.prototype.toObject>;
        }): QueryFilterDTO {
            const message = new QueryFilterDTO({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.operator != null) {
                message.operator = data.operator;
            }
            if (data.value != null) {
                message.value = QueryFilterValueDTO.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                operator?: string;
                value?: ReturnType<typeof QueryFilterValueDTO.prototype.toObject>;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.operator != null) {
                data.operator = this.operator;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.operator.length)
                writer.writeString(2, this.operator);
            if (this.has_value)
                writer.writeMessage(3, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryFilterDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryFilterDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.operator = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.value, () => message.value = QueryFilterValueDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryFilterDTO {
            return QueryFilterDTO.deserialize(bytes);
        }
    }
    export class QueryFilterValueDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stringValue?: string;
            numberValue?: number;
            boolValue?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stringValue" in data && data.stringValue != undefined) {
                    this.stringValue = data.stringValue;
                }
                if ("numberValue" in data && data.numberValue != undefined) {
                    this.numberValue = data.numberValue;
                }
                if ("boolValue" in data && data.boolValue != undefined) {
                    this.boolValue = data.boolValue;
                }
            }
        }
        get stringValue() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stringValue(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get numberValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set numberValue(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get boolValue() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set boolValue(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            stringValue?: string;
            numberValue?: number;
            boolValue?: boolean;
        }): QueryFilterValueDTO {
            const message = new QueryFilterValueDTO({});
            if (data.stringValue != null) {
                message.stringValue = data.stringValue;
            }
            if (data.numberValue != null) {
                message.numberValue = data.numberValue;
            }
            if (data.boolValue != null) {
                message.boolValue = data.boolValue;
            }
            return message;
        }
        toObject() {
            const data: {
                stringValue?: string;
                numberValue?: number;
                boolValue?: boolean;
            } = {};
            if (this.stringValue != null) {
                data.stringValue = this.stringValue;
            }
            if (this.numberValue != null) {
                data.numberValue = this.numberValue;
            }
            if (this.boolValue != null) {
                data.boolValue = this.boolValue;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stringValue.length)
                writer.writeString(1, this.stringValue);
            if (this.numberValue != 0)
                writer.writeInt32(2, this.numberValue);
            if (this.boolValue != false)
                writer.writeBool(3, this.boolValue);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryFilterValueDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryFilterValueDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stringValue = reader.readString();
                        break;
                    case 2:
                        message.numberValue = reader.readInt32();
                        break;
                    case 3:
                        message.boolValue = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryFilterValueDTO {
            return QueryFilterValueDTO.deserialize(bytes);
        }
    }
    export class SortByDTO extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            direction?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get direction() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set direction(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            field?: string;
            direction?: string;
        }): SortByDTO {
            const message = new SortByDTO({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.direction != null) {
                message.direction = data.direction;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                direction?: string;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.direction != null) {
                data.direction = this.direction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.direction.length)
                writer.writeString(2, this.direction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortByDTO {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortByDTO();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.direction = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortByDTO {
            return SortByDTO.deserialize(bytes);
        }
    }
}
