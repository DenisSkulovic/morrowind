/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: generator.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace generator {
    export class GenerateItemsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: dependency_1.common.DataSourceEnumDTO;
            arr?: dependency_1.common.GenerationInstructionDTO[];
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD) as dependency_1.common.DataSourceEnumDTO;
        }
        set source(value: dependency_1.common.DataSourceEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.GenerationInstructionDTO, 2) as dependency_1.common.GenerationInstructionDTO[];
        }
        set arr(value: dependency_1.common.GenerationInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            source?: dependency_1.common.DataSourceEnumDTO;
            arr?: ReturnType<typeof dependency_1.common.GenerationInstructionDTO.prototype.toObject>[];
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): GenerateItemsRequest {
            const message = new GenerateItemsRequest({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.arr != null) {
                message.arr = data.arr.map(item => dependency_1.common.GenerationInstructionDTO.fromObject(item));
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: dependency_1.common.DataSourceEnumDTO;
                arr?: ReturnType<typeof dependency_1.common.GenerationInstructionDTO.prototype.toObject>[];
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.arr != null) {
                data.arr = this.arr.map((item: dependency_1.common.GenerationInstructionDTO) => item.toObject());
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source != dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD)
                writer.writeEnum(1, this.source);
            if (this.arr.length)
                writer.writeRepeatedMessage(2, this.arr, (item: dependency_1.common.GenerationInstructionDTO) => item.serialize(writer));
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateItemsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateItemsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.common.GenerationInstructionDTO.deserialize(reader), dependency_1.common.GenerationInstructionDTO));
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateItemsRequest {
            return GenerateItemsRequest.deserialize(bytes);
        }
    }
    export class GenerateItemsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: dependency_1.common.ItemDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.ItemDTO, 1) as dependency_1.common.ItemDTO[];
        }
        set arr(value: dependency_1.common.ItemDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof dependency_1.common.ItemDTO.prototype.toObject>[];
        }): GenerateItemsResponse {
            const message = new GenerateItemsResponse({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => dependency_1.common.ItemDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof dependency_1.common.ItemDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: dependency_1.common.ItemDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: dependency_1.common.ItemDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateItemsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateItemsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.common.ItemDTO.deserialize(reader), dependency_1.common.ItemDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateItemsResponse {
            return GenerateItemsResponse.deserialize(bytes);
        }
    }
    export class GenerateCharactersRequestCustom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: dependency_1.common.DataSourceEnumDTO;
            arr?: dependency_1.common.CharacterGenInstructionDTO[];
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD) as dependency_1.common.DataSourceEnumDTO;
        }
        set source(value: dependency_1.common.DataSourceEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.CharacterGenInstructionDTO, 2) as dependency_1.common.CharacterGenInstructionDTO[];
        }
        set arr(value: dependency_1.common.CharacterGenInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            source?: dependency_1.common.DataSourceEnumDTO;
            arr?: ReturnType<typeof dependency_1.common.CharacterGenInstructionDTO.prototype.toObject>[];
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): GenerateCharactersRequestCustom {
            const message = new GenerateCharactersRequestCustom({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.arr != null) {
                message.arr = data.arr.map(item => dependency_1.common.CharacterGenInstructionDTO.fromObject(item));
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: dependency_1.common.DataSourceEnumDTO;
                arr?: ReturnType<typeof dependency_1.common.CharacterGenInstructionDTO.prototype.toObject>[];
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.arr != null) {
                data.arr = this.arr.map((item: dependency_1.common.CharacterGenInstructionDTO) => item.toObject());
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source != dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD)
                writer.writeEnum(1, this.source);
            if (this.arr.length)
                writer.writeRepeatedMessage(2, this.arr, (item: dependency_1.common.CharacterGenInstructionDTO) => item.serialize(writer));
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateCharactersRequestCustom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateCharactersRequestCustom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.common.CharacterGenInstructionDTO.deserialize(reader), dependency_1.common.CharacterGenInstructionDTO));
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateCharactersRequestCustom {
            return GenerateCharactersRequestCustom.deserialize(bytes);
        }
    }
    export class GenerateCharactersRequestDB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: dependency_1.common.DataSourceEnumDTO;
            charGenInstructionIds?: string[];
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("charGenInstructionIds" in data && data.charGenInstructionIds != undefined) {
                    this.charGenInstructionIds = data.charGenInstructionIds;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD) as dependency_1.common.DataSourceEnumDTO;
        }
        set source(value: dependency_1.common.DataSourceEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get charGenInstructionIds() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set charGenInstructionIds(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            source?: dependency_1.common.DataSourceEnumDTO;
            charGenInstructionIds?: string[];
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): GenerateCharactersRequestDB {
            const message = new GenerateCharactersRequestDB({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.charGenInstructionIds != null) {
                message.charGenInstructionIds = data.charGenInstructionIds;
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: dependency_1.common.DataSourceEnumDTO;
                charGenInstructionIds?: string[];
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.charGenInstructionIds != null) {
                data.charGenInstructionIds = this.charGenInstructionIds;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source != dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD)
                writer.writeEnum(1, this.source);
            if (this.charGenInstructionIds.length)
                writer.writeRepeatedString(2, this.charGenInstructionIds);
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateCharactersRequestDB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateCharactersRequestDB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateCharactersRequestDB {
            return GenerateCharactersRequestDB.deserialize(bytes);
        }
    }
    export class GenerateCharactersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: dependency_1.common.CharacterDTO[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.CharacterDTO, 1) as dependency_1.common.CharacterDTO[];
        }
        set arr(value: dependency_1.common.CharacterDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof dependency_1.common.CharacterDTO.prototype.toObject>[];
        }): GenerateCharactersResponse {
            const message = new GenerateCharactersResponse({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => dependency_1.common.CharacterDTO.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof dependency_1.common.CharacterDTO.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: dependency_1.common.CharacterDTO) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: dependency_1.common.CharacterDTO) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateCharactersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateCharactersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.common.CharacterDTO.deserialize(reader), dependency_1.common.CharacterDTO));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateCharactersResponse {
            return GenerateCharactersResponse.deserialize(bytes);
        }
    }
    export class GenerateCharacterGroupsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: dependency_1.common.DataSourceEnumDTO;
            arr?: dependency_1.common.CharacterGroupGenInstructionDTO[];
            context?: dependency_1.common.ContextDTO;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD) as dependency_1.common.DataSourceEnumDTO;
        }
        set source(value: dependency_1.common.DataSourceEnumDTO) {
            pb_1.Message.setField(this, 1, value);
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.CharacterGroupGenInstructionDTO, 2) as dependency_1.common.CharacterGroupGenInstructionDTO[];
        }
        set arr(value: dependency_1.common.CharacterGroupGenInstructionDTO[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ContextDTO, 3) as dependency_1.common.ContextDTO;
        }
        set context(value: dependency_1.common.ContextDTO) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            source?: dependency_1.common.DataSourceEnumDTO;
            arr?: ReturnType<typeof dependency_1.common.CharacterGroupGenInstructionDTO.prototype.toObject>[];
            context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
        }): GenerateCharacterGroupsRequest {
            const message = new GenerateCharacterGroupsRequest({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.arr != null) {
                message.arr = data.arr.map(item => dependency_1.common.CharacterGroupGenInstructionDTO.fromObject(item));
            }
            if (data.context != null) {
                message.context = dependency_1.common.ContextDTO.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: dependency_1.common.DataSourceEnumDTO;
                arr?: ReturnType<typeof dependency_1.common.CharacterGroupGenInstructionDTO.prototype.toObject>[];
                context?: ReturnType<typeof dependency_1.common.ContextDTO.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.arr != null) {
                data.arr = this.arr.map((item: dependency_1.common.CharacterGroupGenInstructionDTO) => item.toObject());
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source != dependency_1.common.DataSourceEnumDTO.DATA_SOURCE_WORLD)
                writer.writeEnum(1, this.source);
            if (this.arr.length)
                writer.writeRepeatedMessage(2, this.arr, (item: dependency_1.common.CharacterGroupGenInstructionDTO) => item.serialize(writer));
            if (this.has_context)
                writer.writeMessage(3, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateCharacterGroupsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateCharacterGroupsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.common.CharacterGroupGenInstructionDTO.deserialize(reader), dependency_1.common.CharacterGroupGenInstructionDTO));
                        break;
                    case 3:
                        reader.readMessage(message.context, () => message.context = dependency_1.common.ContextDTO.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateCharacterGroupsRequest {
            return GenerateCharacterGroupsRequest.deserialize(bytes);
        }
    }
    export class GenerateCharacterGroupsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            arr?: GenerateCharactersResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arr" in data && data.arr != undefined) {
                    this.arr = data.arr;
                }
            }
        }
        get arr() {
            return pb_1.Message.getRepeatedWrapperField(this, GenerateCharactersResponse, 1) as GenerateCharactersResponse[];
        }
        set arr(value: GenerateCharactersResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            arr?: ReturnType<typeof GenerateCharactersResponse.prototype.toObject>[];
        }): GenerateCharacterGroupsResponse {
            const message = new GenerateCharacterGroupsResponse({});
            if (data.arr != null) {
                message.arr = data.arr.map(item => GenerateCharactersResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                arr?: ReturnType<typeof GenerateCharactersResponse.prototype.toObject>[];
            } = {};
            if (this.arr != null) {
                data.arr = this.arr.map((item: GenerateCharactersResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arr.length)
                writer.writeRepeatedMessage(1, this.arr, (item: GenerateCharactersResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateCharacterGroupsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateCharacterGroupsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GenerateCharactersResponse.deserialize(reader), GenerateCharactersResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateCharacterGroupsResponse {
            return GenerateCharacterGroupsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGeneratorServiceService {
        static definition = {
            generateItems: {
                path: "/generator.GeneratorService/generateItems",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateItemsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateItemsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateItemsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateItemsResponse.deserialize(new Uint8Array(bytes))
            },
            generateCharactersCustom: {
                path: "/generator.GeneratorService/generateCharactersCustom",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateCharactersRequestCustom) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateCharactersRequestCustom.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateCharactersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateCharactersResponse.deserialize(new Uint8Array(bytes))
            },
            generateCharactersDB: {
                path: "/generator.GeneratorService/generateCharactersDB",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateCharactersRequestDB) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateCharactersRequestDB.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateCharactersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateCharactersResponse.deserialize(new Uint8Array(bytes))
            },
            generateCharacterGroups: {
                path: "/generator.GeneratorService/generateCharacterGroups",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateCharacterGroupsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateCharacterGroupsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateCharacterGroupsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateCharacterGroupsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract generateItems(call: grpc_1.ServerUnaryCall<GenerateItemsRequest, GenerateItemsResponse>, callback: grpc_1.sendUnaryData<GenerateItemsResponse>): void;
        abstract generateCharactersCustom(call: grpc_1.ServerUnaryCall<GenerateCharactersRequestCustom, GenerateCharactersResponse>, callback: grpc_1.sendUnaryData<GenerateCharactersResponse>): void;
        abstract generateCharactersDB(call: grpc_1.ServerUnaryCall<GenerateCharactersRequestDB, GenerateCharactersResponse>, callback: grpc_1.sendUnaryData<GenerateCharactersResponse>): void;
        abstract generateCharacterGroups(call: grpc_1.ServerUnaryCall<GenerateCharacterGroupsRequest, GenerateCharacterGroupsResponse>, callback: grpc_1.sendUnaryData<GenerateCharacterGroupsResponse>): void;
    }
    export class GeneratorServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGeneratorServiceService.definition, "GeneratorService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        generateItems: GrpcUnaryServiceInterface<GenerateItemsRequest, GenerateItemsResponse> = (message: GenerateItemsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateItemsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateItemsResponse>, callback?: grpc_1.requestCallback<GenerateItemsResponse>): grpc_1.ClientUnaryCall => {
            return super.generateItems(message, metadata, options, callback);
        };
        generateCharactersCustom: GrpcUnaryServiceInterface<GenerateCharactersRequestCustom, GenerateCharactersResponse> = (message: GenerateCharactersRequestCustom, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateCharactersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateCharactersResponse>, callback?: grpc_1.requestCallback<GenerateCharactersResponse>): grpc_1.ClientUnaryCall => {
            return super.generateCharactersCustom(message, metadata, options, callback);
        };
        generateCharactersDB: GrpcUnaryServiceInterface<GenerateCharactersRequestDB, GenerateCharactersResponse> = (message: GenerateCharactersRequestDB, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateCharactersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateCharactersResponse>, callback?: grpc_1.requestCallback<GenerateCharactersResponse>): grpc_1.ClientUnaryCall => {
            return super.generateCharactersDB(message, metadata, options, callback);
        };
        generateCharacterGroups: GrpcUnaryServiceInterface<GenerateCharacterGroupsRequest, GenerateCharacterGroupsResponse> = (message: GenerateCharacterGroupsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateCharacterGroupsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateCharacterGroupsResponse>, callback?: grpc_1.requestCallback<GenerateCharacterGroupsResponse>): grpc_1.ClientUnaryCall => {
            return super.generateCharacterGroups(message, metadata, options, callback);
        };
    }
}
